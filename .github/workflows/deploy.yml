# .github/workflows/deploy.yml
name: Build and Deploy to Cloud Run

on:
  push:
    branches:
      - master
      - develop
      - 'feature/*'
      - 'hotfix/*'
  pull_request:
    branches:
      - master
    types: [closed]

env:
  PROJECT_ID: jax-points-tracker
  REGION: us-central1
  SUPABASE_URL: https://ftdradvuyhumgrjrsmkp.supabase.co
  SUPABASE_ANON_KEY: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZ0ZHJhZHZ1eWh1bWdyanJzbWtwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDc3NjY1NjQsImV4cCI6MjA2MzM0MjU2NH0.SxWO5NdfiyM36KeSWof2DP5H18FmE7inlwJw8yQINqk

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    # Deploy on:
    # 1. Direct pushes to non-master branches (feature branches)
    # 2. Merged PRs to master (production deployments)
    if: |
      (github.event_name == 'push' && github.ref != 'refs/heads/master') ||
      (github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'master')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.PROJECT_ID }}

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Configure Docker to use gcloud as a credential helper
      run: gcloud auth configure-docker

    - name: Extract branch name and set service name
      id: extract_branch
      run: |
        # Get the branch name from the ref or PR target
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          # For merged PRs, use the target branch (master)
          BRANCH_NAME="${{ github.event.pull_request.base.ref }}"
        else
          # For direct pushes, use the pushed branch
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
        fi
        echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
        
        # Set service name based on branch
        if [ "$BRANCH_NAME" = "master" ]; then
          SERVICE_NAME="jax-points"
        else
          # Replace special characters and convert to lowercase for Cloud Run naming
          CLEAN_BRANCH=$(echo "$BRANCH_NAME" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9-]/-/g' | sed 's/--*/-/g' | sed 's/^-\|-$//g')
          SERVICE_NAME="jax-points-$CLEAN_BRANCH"
        fi
        echo "service_name=$SERVICE_NAME" >> $GITHUB_OUTPUT
        echo "🚀 Deploying to service: $SERVICE_NAME"

    - name: Build and submit to Cloud Build
      run: |
        echo "🏗️ Starting Cloud Build..."
        
        # Submit build and get the build ID
        BUILD_ID=$(gcloud builds submit --config cloudbuild.yaml \
          --substitutions=_VITE_SUPABASE_URL=${{ secrets.VITE_SUPABASE_URL }},_VITE_SUPABASE_ANON_KEY=${{ secrets.VITE_SUPABASE_ANON_KEY }} \
          --async \
          --format="value(name)" | cut -d'/' -f6)
        
        echo "✅ Build submitted with ID: $BUILD_ID"
        echo "🔗 View logs: https://console.cloud.google.com/cloud-build/builds/$BUILD_ID?project=${{ env.PROJECT_ID }}"
        
        # Wait for build to complete (without streaming logs)
        echo "⏳ Waiting for build to complete..."
        while true; do
          BUILD_STATUS=$(gcloud builds describe $BUILD_ID --format="value(status)" 2>/dev/null || echo "QUEUED")
          echo "📊 Build status: $BUILD_STATUS"
          
          case $BUILD_STATUS in
            "SUCCESS")
              echo "🎉 Build completed successfully!"
              break
              ;;
            "FAILURE"|"TIMEOUT"|"CANCELLED")
              echo "❌ Build failed with status: $BUILD_STATUS"
              echo "🔗 Check logs: https://console.cloud.google.com/cloud-build/builds/$BUILD_ID?project=${{ env.PROJECT_ID }}"
              exit 1
              ;;
            "WORKING"|"QUEUED")
              echo "⏳ Build still in progress, waiting 30 seconds..."
              sleep 30
              ;;
            *)
              echo "⚠️ Unknown status: $BUILD_STATUS, waiting 30 seconds..."
              sleep 30
              ;;
          esac
        done

    - name: Deploy to Cloud Run
      run: |
        # Performance-optimized deployment for 20-30 concurrent judges
        gcloud run deploy ${{ steps.extract_branch.outputs.service_name }} \
          --image gcr.io/${{ env.PROJECT_ID }}/jax-points \
          --platform managed \
          --allow-unauthenticated \
          --region ${{ env.REGION }} \
          --port 8080 \
          --cpu=2 \
          --memory=2Gi \
          --min-instances=1 \
          --max-instances=10 \
          --concurrency=50 \
          --timeout=300 \
          --cpu-throttling \
          --execution-environment=gen2 \
          --set-env-vars SUPABASE_URL=${{ env.SUPABASE_URL }} \
          --set-env-vars SUPABASE_ANON_KEY=${{ env.SUPABASE_ANON_KEY }} \
          --set-env-vars NODE_ENV=production \
          --set-env-vars NODE_OPTIONS="--max-old-space-size=1536"

    - name: Get service URL
      id: get_url
      run: |
        SERVICE_URL=$(gcloud run services describe ${{ steps.extract_branch.outputs.service_name }} \
          --platform managed \
          --region ${{ env.REGION }} \
          --format 'value(status.url)')
        echo "service_url=$SERVICE_URL" >> $GITHUB_OUTPUT

    - name: Output deployment info
      run: |
        echo "✅ Deployment completed successfully!"
        echo "🌍 Service: ${{ steps.extract_branch.outputs.service_name }}"
        echo "🔗 URL: ${{ steps.get_url.outputs.service_url }}"
        echo "🌿 Branch: ${{ steps.extract_branch.outputs.branch_name }}"

  # Build-only job for open PRs (validation before merge)
  build-only:
    runs-on: ubuntu-latest
    
    # Only run on open pull requests (not merged ones)
    if: github.event_name == 'pull_request' && github.event.action != 'closed'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.PROJECT_ID }}

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Configure Docker to use gcloud as a credential helper
      run: gcloud auth configure-docker

    - name: Build only (PR validation)
      run: |
        echo "🔍 Building for PR validation..."
        gcloud builds submit --config cloudbuild.yaml

    - name: PR Build Status
      run: |
        echo "✅ PR build completed successfully!"
        echo "📦 Docker image built and validated"
        echo "🔀 PR: ${{ github.head_ref }} → ${{ github.base_ref }}"
import{d as b,w as h}from"./t4v5LbV4.js";import{s as g}from"./CCM_4jRA.js";import{u as v}from"./BZKsMI7B.js";import{l as C}from"./Clc9C5PT.js";const m=h([]),_=h(!1),y=h(null),w=h(null),U=b(m,e=>{if(console.log("ðŸ“Š Computing stats for competitions:",e),!Array.isArray(e)||e.length===0){const r={total:0,active:0,totalEntries:0,avgEntries:0};return console.log("ðŸ“Š Using default stats:",r),r}const t=e.length,a=e.filter(r=>r.is_active).length,s=e.reduce((r,i)=>r+(i.entry_count||0),0),n=t>0?Math.round(s/t*10)/10:0,d={total:t,active:a,totalEntries:s,avgEntries:n};return console.log("ðŸ“Š Computed stats:",d),d}),j=b(m,e=>Array.isArray(e)?e:[]);async function u(e=!1){const t=C(v);if(!(t!=null&&t.is_officer)){console.warn("User is not officer or profile not loaded yet");return}const a=new Date,s=C(w);if(!e&&s&&a-s<3e4){console.log("Using cached competition data");return}_.set(!0),y.set(null);try{console.log("Loading fresh competition data...");const{data:n,error:d}=await g.from("competitions").select("*").order("entry_deadline",{ascending:!1});if(d)throw d;console.log("Competitions fetched:",n==null?void 0:n.length);const r=await Promise.all((n||[]).map(async i=>{const{count:l,error:c}=await g.from("competition_entries").select("*",{count:"exact",head:!0}).eq("competition_id",i.id);c&&console.warn("Warning getting count for competition",i.id,":",c);const o=new Date,f=new Date(i.entry_deadline),E=i.active&&f>o;let p="closed";return E?p="open":i.judging_date&&new Date(i.judging_date)>=o&&!i.results_published?p="judging":i.results_published&&(p="completed"),{...i,entry_count:l||0,is_active:E,status:p}}));console.log("Competition data with counts:",r==null?void 0:r.length),m.set(r||[]),w.set(a),console.log("Loading complete")}catch(n){console.error("Failed to load competitions:",n),y.set(n.message||"Failed to load competitions"),m.set([])}finally{_.set(!1)}}async function k(e){if(!e)return console.warn("No competition ID provided"),[];try{console.log("Loading entries for competition:",e);const{data:t,error:a}=await g.from("competition_entries").select("*").eq("competition_id",e).order("entry_number",{ascending:!0});if(a)throw a;if(!t||t.length===0)return console.log("No entries found for this competition"),[];const s=[...new Set(t.map(l=>l.member_id))],{data:n}=await g.from("members").select("id, name, email, phone").in("id",s),d=[...new Set(t.map(l=>l.bjcp_category_id).filter(Boolean))],{data:r}=await g.from("bjcp_categories").select("id, category_name, category_number, subcategory_letter, subcategory_name").in("id",d),i=t.map(l=>{const c=n==null?void 0:n.find(f=>f.id===l.member_id),o=r==null?void 0:r.find(f=>f.id===l.bjcp_category_id);return{...l,member_name:(c==null?void 0:c.name)||"Unknown",member_email:(c==null?void 0:c.email)||"",member_phone:(c==null?void 0:c.phone)||"",category_name:(o==null?void 0:o.category_name)||"Unknown Category",category_number:(o==null?void 0:o.category_number)||"",subcategory_letter:(o==null?void 0:o.subcategory_letter)||"",subcategory_name:(o==null?void 0:o.subcategory_name)||"",category_display:o?`${o.category_number}${o.subcategory_letter||""} - ${o.category_name}${o.subcategory_name?": "+o.subcategory_name:""}`:"Unknown Category"}});return console.log("Loaded",i.length,"entries with full details"),i}catch(t){throw console.error("Failed to load competition entries:",t),t}}async function S(e){const{ranking_groups:t,...a}=e,{data:s,error:n}=await g.from("competitions").insert([a]).select().single();if(n)throw n;if(e.category_system==="custom"&&t&&t.length>0){const d=t.map((i,l)=>({competition_id:s.id,group_name:i.name,group_description:i.description||null,bjcp_category_ids:i.categories,group_order:l+1})),{error:r}=await g.from("competition_ranking_groups").insert(d);r&&console.error("Error creating ranking groups:",r)}return await u(!0),s}async function L(e,t){const{data:a,error:s}=await g.from("competitions").update(t).eq("id",e).select().single();if(s)throw s;return await u(!0),a}async function q(e){const{error:t}=await g.from("competitions").delete().eq("id",e);if(t)throw t;await u(!0)}function A(){m.set([]),_.set(!1),y.set(null),w.set(null)}async function D(){w.set(null),await u(!0)}const z={subscribe:b([m,_,y,U,j],([e,t,a,s,n])=>({competitions:e,isLoading:t,error:a,stats:s,filteredCompetitions:n})).subscribe,loadCompetitions:u,loadCompetitionEntries:k,createCompetition:S,updateCompetition:L,deleteCompetition:q,forceRefresh:D,initialize:async()=>{console.log("Initializing competition management store"),await u(!1)}};v.subscribe(e=>{console.log("User profile changed in store:",e),e!=null&&e.is_officer?(console.log("User is officer, loading competitions"),u(!1)):(console.log("User is not officer or profile not loaded yet"),A())});export{z as competitionManagementStore,m as competitions,S as createCompetition,q as deleteCompetition,y as error,j as filteredCompetitions,D as forceRefresh,_ as isLoading,w as lastRefresh,k as loadCompetitionEntries,u as loadCompetitions,A as resetStore,U as stats,L as updateCompetition};

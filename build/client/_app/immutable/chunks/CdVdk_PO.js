import{d as _,w as v}from"./KTA_1Rqc.js";import{s as d}from"./CCM_4jRA.js";import{l as y}from"./DpwROyu6.js";const l=v({judges:[],loading:!1,error:null,lastUpdate:null}),a=v({activeCompetition:null,assignedEntries:[],currentEntry:null,judgeId:null,sessionActive:!1,loading:!1,error:null}),b={BJCP_JUDGE:"bjcp_judge",CLUB_JUDGE:"club_judge",GUEST_JUDGE:"guest_judge"};class q{async loadJudges(r){l.update(e=>({...e,loading:!0,error:null}));try{const{data:e,error:t}=await d.from("competition_judges").select(`
          *,
          judge:members!competition_judges_judge_id_fkey(id, name, email, phone),
          competition:competitions(id, name, judging_date)
        `).eq("competition_id",r).order("assigned_at",{ascending:!1});if(t)throw t;return l.update(s=>({...s,judges:e||[],loading:!1,lastUpdate:Date.now()})),e}catch(e){throw console.error("Error loading judges:",e),l.update(t=>({...t,loading:!1,error:e.message})),e}}async assignJudge(r,e){try{const t={competition_id:r,judge_id:e.judge_id,judge_role:e.judge_role||b.CLUB_JUDGE,assignment_notes:e.assignment_notes||null,assigned_at:new Date().toISOString(),assigned_by:e.assigned_by,active:!0},{data:s,error:i}=await d.from("competition_judges").insert([t]).select(`
          *,
          judge:members!competition_judges_judge_id_fkey(id, name, email, phone),
          competition:competitions(id, name, judging_date)
        `).single();if(i)throw i;return l.update(n=>({...n,judges:[...n.judges,s]})),s}catch(t){throw console.error("Error assigning judge:",t),t}}async removeJudge(r){try{const{error:e}=await d.from("competition_judges").update({active:!1,removed_at:new Date().toISOString()}).eq("id",r);if(e)throw e;l.update(t=>({...t,judges:t.judges.filter(s=>s.id!==r)}))}catch(e){throw console.error("Error removing judge:",e),e}}async startJudgingSession(r,e){this.endSession(),a.update(t=>({...t,loading:!0,error:null}));try{const{data:t,error:s}=await d.from("competition_judges").select("*").eq("competition_id",r).eq("judge_id",e).eq("active",!0).single();if(s||!t)throw new Error("Judge not assigned to this competition");const{data:i,error:n}=await d.from("competitions").select("*").eq("id",r).single();if(n)throw n;const c=new Date,m=new Date(i.entry_deadline),j=new Date(i.judging_date);if(c<m)throw new Error("Competition entry deadline has not passed yet");const{data:u,error:p}=await d.from("competition_entries").select(`
          *,
          category:bjcp_categories(id, category_name, category_number, subcategory_letter, subcategory_name)
        `).eq("competition_id",r).order("bjcp_category_id",{ascending:!0}).order("entry_number",{ascending:!0});if(p)throw p;const{data:E,error:w}=await d.from("competition_judging_sessions").select("*").eq("competition_id",r).eq("judge_id",e);w&&console.warn("Error loading existing judging sessions:",w);const h=u.map(f=>{const g=E==null?void 0:E.find(J=>J.entry_id===f.id),S=g&&(g.aroma_score!==null||g.appearance_score!==null||g.flavor_score!==null||g.mouthfeel_score!==null||g.overall_score!==null);return{...f,judging:g||null,hasBeenJudged:!!S}});return a.update(f=>({...f,activeCompetition:i,assignedEntries:h,judgeId:e,sessionActive:!0,loading:!1,currentEntry:h[0]||null})),{competition:i,entries:h,assignment:t}}catch(t){throw console.error("Error starting judging session:",t),a.update(s=>({...s,loading:!1,error:t.message,sessionActive:!1})),t}}async saveJudgingResults(r,e){try{const t=y(a),s={competition_id:t.activeCompetition.id,entry_id:r,judge_id:t.judgeId,aroma_score:e.aroma_score||null,appearance_score:e.appearance_score||null,flavor_score:e.flavor_score||null,mouthfeel_score:e.mouthfeel_score||null,overall_score:e.overall_score||null,judge_notes:e.judge_notes||null,private_notes:e.private_notes||null,scoresheet_data:e.scoresheet_data||null,judged_at:new Date().toISOString(),updated_at:new Date().toISOString()},{data:i}=await d.from("competition_judging_sessions").select("id").eq("competition_id",t.activeCompetition.id).eq("entry_id",r).eq("judge_id",t.judgeId).single();let n;if(i?n=await d.from("competition_judging_sessions").update(s).eq("id",i.id).select().single():n=await d.from("competition_judging_sessions").insert([s]).select().single(),n.error)throw n.error;return a.update(c=>{const m=c.assignedEntries.map(u=>{if(u.id===r){const p=n.data&&(n.data.aroma_score!==null||n.data.appearance_score!==null||n.data.flavor_score!==null||n.data.mouthfeel_score!==null||n.data.overall_score!==null);return{...u,judging:n.data,hasBeenJudged:!!p}}return u});let j=c.currentEntry;return c.currentEntry&&c.currentEntry.id===r&&(j=m.find(u=>u.id===r)),{...c,assignedEntries:m,currentEntry:j}}),n.data}catch(t){throw console.error("Error saving judging results:",t),t}}getJudgingProgress(){const r=y(a);if(!r.assignedEntries.length)return{total:0,completed:0,percentage:0};const e=r.assignedEntries.length,t=r.assignedEntries.filter(i=>i.hasBeenJudged).length,s=Math.round(t/e*100);return{total:e,completed:t,percentage:s}}setCurrentEntry(r){a.update(e=>{const t=e.assignedEntries[r]||null;return{...e,currentEntry:t}})}endSession(){a.update(r=>({activeCompetition:null,assignedEntries:[],currentEntry:null,judgeId:null,sessionActive:!1,loading:!1,error:null}))}clearError(){l.update(r=>({...r,error:null})),a.update(r=>({...r,error:null}))}}const G=new q,A=_(l,o=>o.judges),D=_(l,o=>o.loading),L=_(l,o=>o.error),O=_(a,o=>o),k=_(a,o=>o.sessionActive),x=_(a,o=>o.currentEntry);export{b as J,O as a,x as b,G as c,D as d,L as e,k as i,A as j};

import { c as create_ssr_component, d as escape } from './ssr-CFMHIens.js';

const css = {
  code: ".loading.svelte-12vrk7a{display:flex;flex-direction:column;align-items:center;gap:var(--space-4);padding:var(--space-12)}.loading-center.svelte-12vrk7a{justify-content:center;min-height:200px}.spinner.svelte-12vrk7a{border-radius:var(--radius-full);border-style:solid;border-color:var(--color-brand-primary-light);border-top-color:var(--color-brand-primary);animation:svelte-12vrk7a-spin 1s linear infinite}.spinner-sm.svelte-12vrk7a{width:24px;height:24px;border-width:2px}.spinner-md.svelte-12vrk7a{width:40px;height:40px;border-width:4px}.spinner-lg.svelte-12vrk7a{width:64px;height:64px;border-width:6px}.loading-message.svelte-12vrk7a{color:var(--color-text-secondary);font-size:var(--font-size-base);margin:0}@keyframes svelte-12vrk7a-spin{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}",
  map: `{"version":3,"file":"LoadingSpinner.svelte","sources":["LoadingSpinner.svelte"],"sourcesContent":["<script>\\r\\n  /**\\r\\n   * LoadingSpinner Component\\r\\n   *\\r\\n   * A loading spinner with optional message.\\r\\n   *\\r\\n   * @prop {string} message - Optional loading message to display\\r\\n   * @prop {string} size - Spinner size: 'sm', 'md', 'lg'\\r\\n   * @prop {boolean} center - Center the spinner (default: true)\\r\\n   */\\r\\n\\r\\n  export let message = 'Loading...';\\r\\n  export let size = 'md';\\r\\n  export let center = true;\\r\\n<\/script>\\r\\n\\r\\n<div class=\\"loading\\" class:loading-center={center}>\\r\\n  <div class=\\"spinner spinner-{size}\\"></div>\\r\\n  {#if message}\\r\\n    <p class=\\"loading-message\\">{message}</p>\\r\\n  {/if}\\r\\n</div>\\r\\n\\r\\n<style>\\r\\n  .loading {\\r\\n    display: flex;\\r\\n    flex-direction: column;\\r\\n    align-items: center;\\r\\n    gap: var(--space-4);\\r\\n    padding: var(--space-12);\\r\\n  }\\r\\n\\r\\n  .loading-center {\\r\\n    justify-content: center;\\r\\n    min-height: 200px;\\r\\n  }\\r\\n\\r\\n  .spinner {\\r\\n    border-radius: var(--radius-full);\\r\\n    border-style: solid;\\r\\n    border-color: var(--color-brand-primary-light);\\r\\n    border-top-color: var(--color-brand-primary);\\r\\n    animation: spin 1s linear infinite;\\r\\n  }\\r\\n\\r\\n  .spinner-sm {\\r\\n    width: 24px;\\r\\n    height: 24px;\\r\\n    border-width: 2px;\\r\\n  }\\r\\n\\r\\n  .spinner-md {\\r\\n    width: 40px;\\r\\n    height: 40px;\\r\\n    border-width: 4px;\\r\\n  }\\r\\n\\r\\n  .spinner-lg {\\r\\n    width: 64px;\\r\\n    height: 64px;\\r\\n    border-width: 6px;\\r\\n  }\\r\\n\\r\\n  .loading-message {\\r\\n    color: var(--color-text-secondary);\\r\\n    font-size: var(--font-size-base);\\r\\n    margin: 0;\\r\\n  }\\r\\n\\r\\n  @keyframes spin {\\r\\n    0% {\\r\\n      transform: rotate(0deg);\\r\\n    }\\r\\n    100% {\\r\\n      transform: rotate(360deg);\\r\\n    }\\r\\n  }\\r\\n</style>\\r\\n"],"names":[],"mappings":"AAwBE,uBAAS,CACP,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,WAAW,CAAE,MAAM,CACnB,GAAG,CAAE,IAAI,SAAS,CAAC,CACnB,OAAO,CAAE,IAAI,UAAU,CACzB,CAEA,8BAAgB,CACd,eAAe,CAAE,MAAM,CACvB,UAAU,CAAE,KACd,CAEA,uBAAS,CACP,aAAa,CAAE,IAAI,aAAa,CAAC,CACjC,YAAY,CAAE,KAAK,CACnB,YAAY,CAAE,IAAI,2BAA2B,CAAC,CAC9C,gBAAgB,CAAE,IAAI,qBAAqB,CAAC,CAC5C,SAAS,CAAE,mBAAI,CAAC,EAAE,CAAC,MAAM,CAAC,QAC5B,CAEA,0BAAY,CACV,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,YAAY,CAAE,GAChB,CAEA,0BAAY,CACV,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,YAAY,CAAE,GAChB,CAEA,0BAAY,CACV,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,YAAY,CAAE,GAChB,CAEA,+BAAiB,CACf,KAAK,CAAE,IAAI,sBAAsB,CAAC,CAClC,SAAS,CAAE,IAAI,gBAAgB,CAAC,CAChC,MAAM,CAAE,CACV,CAEA,WAAW,mBAAK,CACd,EAAG,CACD,SAAS,CAAE,OAAO,IAAI,CACxB,CACA,IAAK,CACH,SAAS,CAAE,OAAO,MAAM,CAC1B,CACF"}`
};
const LoadingSpinner = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let { message = "Loading..." } = $$props;
  let { size = "md" } = $$props;
  let { center = true } = $$props;
  if ($$props.message === void 0 && $$bindings.message && message !== void 0) $$bindings.message(message);
  if ($$props.size === void 0 && $$bindings.size && size !== void 0) $$bindings.size(size);
  if ($$props.center === void 0 && $$bindings.center && center !== void 0) $$bindings.center(center);
  $$result.css.add(css);
  return `<div class="${["loading svelte-12vrk7a", center ? "loading-center" : ""].join(" ").trim()}"><div class="${"spinner spinner-" + escape(size, true) + " svelte-12vrk7a"}"></div> ${message ? `<p class="loading-message svelte-12vrk7a">${escape(message)}</p>` : ``} </div>`;
});

export { LoadingSpinner as L };
//# sourceMappingURL=LoadingSpinner-Don57TQN.js.map

import { c as create_ssr_component, a as subscribe, o as onDestroy } from './ssr-DUmth7AN.js';
import { g as goto } from './client-C3KLrhj1.js';
import { p as page } from './stores-CjFwPvAb.js';
import { u as userProfile } from './userProfile-BJElsKeo.js';
import './supabaseClient-D_8i9Ohq.js';
import './exports-DKuYoYKl.js';
import './index-D3y4l4qv.js';
import './false-CRHihH2U.js';
import '@supabase/supabase-js';

const css = {
  code: ".container.svelte-1yscyhl.svelte-1yscyhl{max-width:1400px;margin:0 auto;padding:1rem}.hero.svelte-1yscyhl.svelte-1yscyhl{text-align:center;margin-bottom:3rem}.hero.svelte-1yscyhl h1.svelte-1yscyhl{color:#ff3e00;text-transform:uppercase;font-size:4rem;font-weight:100;margin:0 0 0.25em;line-height:1.1;display:flex;align-items:center;justify-content:center;gap:1rem}.hero.svelte-1yscyhl h1 .emoji.svelte-1yscyhl{font-size:1em}.hero.svelte-1yscyhl .subtitle.svelte-1yscyhl{font-size:1.2rem;color:#333;font-weight:500}.competition-info.svelte-1yscyhl.svelte-1yscyhl{background:white;padding:1.5rem;border-radius:6px;box-shadow:0 2px 4px rgba(0, 0, 0, 0.1);border-left:4px solid #ff3e00;margin-bottom:2rem}.competition-info.svelte-1yscyhl h2.svelte-1yscyhl{margin:0 0 1rem 0;color:#333}.info-grid.svelte-1yscyhl.svelte-1yscyhl{display:grid;grid-template-columns:repeat(auto-fit, minmax(200px, 1fr));gap:1rem}.info-item.svelte-1yscyhl.svelte-1yscyhl{display:flex;flex-direction:column}.info-label.svelte-1yscyhl.svelte-1yscyhl{font-size:0.875rem;color:#666;margin-bottom:0.25rem}.info-value.svelte-1yscyhl.svelte-1yscyhl{font-size:1.1rem;font-weight:600;color:#333}.controls.svelte-1yscyhl.svelte-1yscyhl{display:flex;gap:1rem;margin-bottom:2rem;flex-wrap:wrap;align-items:center}.search-input.svelte-1yscyhl.svelte-1yscyhl{flex:1;min-width:250px;padding:0.75rem;border:1px solid #ddd;border-radius:6px;font-size:1rem}.btn.svelte-1yscyhl.svelte-1yscyhl{padding:0.75rem 1.5rem;border:none;border-radius:6px;font-size:1rem;cursor:pointer;transition:all 0.3s ease}.btn-primary.svelte-1yscyhl.svelte-1yscyhl{background:#ff3e00;color:white}.btn-primary.svelte-1yscyhl.svelte-1yscyhl:hover{background:#e63600}.btn-primary.svelte-1yscyhl.svelte-1yscyhl:disabled{background:#ccc;cursor:not-allowed}.btn-secondary.svelte-1yscyhl.svelte-1yscyhl{background:#6b7280;color:white}.btn-secondary.svelte-1yscyhl.svelte-1yscyhl:hover{background:#4b5563}.selected-count.svelte-1yscyhl.svelte-1yscyhl{padding:0.5rem 1rem;background:#fef3c7;border-radius:6px;color:#92400e;font-weight:500}.entries-table.svelte-1yscyhl.svelte-1yscyhl{background:white;border-radius:6px;overflow:hidden;box-shadow:0 2px 4px rgba(0, 0, 0, 0.1)}table.svelte-1yscyhl.svelte-1yscyhl{width:100%;border-collapse:collapse}th.svelte-1yscyhl.svelte-1yscyhl{background:#f5f5f5;padding:1rem;text-align:left;font-weight:600;color:#333;border-bottom:2px solid #ddd;cursor:pointer;user-select:none;position:relative}th.svelte-1yscyhl.svelte-1yscyhl:hover{background:#ebebeb}.sort-indicator.svelte-1yscyhl.svelte-1yscyhl{position:absolute;right:0.5rem;top:50%;transform:translateY(-50%);color:#ff3e00}td.svelte-1yscyhl.svelte-1yscyhl{padding:1rem;border-bottom:1px solid #eee}tr.svelte-1yscyhl.svelte-1yscyhl:hover{background:#f9f9f9}.checkbox-cell.svelte-1yscyhl.svelte-1yscyhl{width:50px}.entry-number.svelte-1yscyhl.svelte-1yscyhl{font-weight:600;color:#ff3e00}.category-badge.svelte-1yscyhl.svelte-1yscyhl{display:inline-block;padding:0.25rem 0.5rem;background:#e5e7eb;border-radius:4px;font-size:0.875rem;font-weight:500}.payment-toggle.svelte-1yscyhl.svelte-1yscyhl{display:flex;align-items:center;gap:0.5rem}.toggle-switch.svelte-1yscyhl.svelte-1yscyhl{position:relative;width:48px;height:24px;background:#ddd;border-radius:12px;cursor:pointer;transition:background 0.3s}.toggle-switch.active.svelte-1yscyhl.svelte-1yscyhl{background:#059669}.toggle-switch.svelte-1yscyhl.svelte-1yscyhl::after{content:'';position:absolute;top:2px;left:2px;width:20px;height:20px;background:white;border-radius:50%;transition:transform 0.3s}.toggle-switch.active.svelte-1yscyhl.svelte-1yscyhl::after{transform:translateX(24px)}.empty-state.svelte-1yscyhl.svelte-1yscyhl{text-align:center;padding:3rem;color:#666}.loading.svelte-1yscyhl.svelte-1yscyhl{text-align:center;padding:3rem}.spinner.svelte-1yscyhl.svelte-1yscyhl{display:inline-block;width:40px;height:40px;border:4px solid #f3f3f3;border-top:4px solid #ff3e00;border-radius:50%;animation:svelte-1yscyhl-spin 1s linear infinite}@keyframes svelte-1yscyhl-spin{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@media(max-width: 768px){.hero.svelte-1yscyhl h1.svelte-1yscyhl{font-size:2.5rem}.controls.svelte-1yscyhl.svelte-1yscyhl{flex-direction:column;align-items:stretch}.search-input.svelte-1yscyhl.svelte-1yscyhl{width:100%}.entries-table.svelte-1yscyhl.svelte-1yscyhl{overflow-x:auto}table.svelte-1yscyhl.svelte-1yscyhl{min-width:800px}.info-grid.svelte-1yscyhl.svelte-1yscyhl{grid-template-columns:1fr}}",
  map: `{"version":3,"file":"+page.svelte","sources":["+page.svelte"],"sourcesContent":["<!-- src/routes/officers/manage-competitions/entries/[id]/+page.svelte -->\\n<script>\\n  import { onMount, onDestroy } from 'svelte';\\n  import { goto } from '$app/navigation';\\n  import { page } from '$app/stores';\\n  import { userProfile } from '$lib/stores/userProfile';\\n  import { supabase } from '$lib/supabaseClient';\\n  \\n  // Check officer status\\n  $: if ($userProfile && !$userProfile.is_officer) {\\n    goto('/');\\n  }\\n\\n  // Get competition ID from URL\\n  $: competitionId = $page.params.id;\\n\\n  let competition = null;\\n  let entries = [];\\n  let filteredEntries = [];\\n  let isLoading = true;\\n  let searchQuery = '';\\n  let sortColumn = 'entry_number';\\n  let sortDirection = 'asc';\\n  let selectedEntries = new Set();\\n  let selectAll = false;\\n\\n  onMount(() => {\\n    loadCompetitionAndEntries();\\n    setupEventHandlers();\\n  });\\n\\n  // Removed tab switching reload - causes issues with Supabase tab switching\\n  function setupEventHandlers() {\\n    // Tab visibility handling removed for better Supabase compatibility\\n    return () => {\\n      // No cleanup needed now\\n    };\\n  }\\n\\n  onDestroy(() => {\\n    // Cleanup handled by setupEventHandlers return\\n  });\\n\\n  // Load competition and entries data\\n  async function loadCompetitionAndEntries() {\\n    isLoading = true;\\n    \\n    try {\\n      // Load competition details\\n      const { data: compData, error: compError } = await supabase\\n        .from('competitions')\\n        .select('*')\\n        .eq('id', competitionId)\\n        .single();\\n      \\n      if (compError) throw compError;\\n      competition = compData;\\n\\n      // Load entries with member details\\n      const { data: entriesData, error: entriesError } = await supabase\\n        .from('competition_entries')\\n        .select(\`\\n          *,\\n          members!inner(\\n            name,\\n            email,\\n            phone\\n          ),\\n          bjcp_category:bjcp_categories(\\n            id,\\n            category_number,\\n            subcategory_letter,\\n            subcategory_name,\\n            category_name\\n          )\\n        \`)\\n        .eq('competition_id', competitionId)\\n        .order('entry_number');\\n      \\n      if (entriesError) throw entriesError;\\n      \\n      entries = entriesData || [];\\n      filterAndSortEntries();\\n    } catch (err) {\\n      console.error('Error loading data:', err);\\n      alert('Failed to load competition entries');\\n      goto('/officers/manage-competitions');\\n    } finally {\\n      isLoading = false;\\n    }\\n  }\\n\\n  // Filter and sort entries\\n  function filterAndSortEntries() {\\n    let filtered = [...entries];\\n    \\n    // Apply search filter\\n    if (searchQuery.trim()) {\\n      const query = searchQuery.toLowerCase();\\n      filtered = filtered.filter(entry => \\n        entry.entry_number?.toLowerCase().includes(query) ||\\n        entry.beer_name?.toLowerCase().includes(query) ||\\n        entry.members?.name?.toLowerCase().includes(query) ||\\n        entry.members?.email?.toLowerCase().includes(query) ||\\n        entry.bjcp_category?.category_name?.toLowerCase().includes(query) ||\\n        \`\${entry.bjcp_category?.category_number}\${entry.bjcp_category?.subcategory_letter}\`.toLowerCase().includes(query) ||\\n        entry.special_ingredients?.toLowerCase().includes(query) ||\\n        entry.notes?.toLowerCase().includes(query)\\n      );\\n    }\\n    \\n    // Apply sorting\\n    filtered.sort((a, b) => {\\n      let aVal, bVal;\\n      \\n      switch (sortColumn) {\\n        case 'entry_number':\\n          aVal = a.entry_number || '';\\n          bVal = b.entry_number || '';\\n          break;\\n        case 'member_name':\\n          aVal = a.members?.name || '';\\n          bVal = b.members?.name || '';\\n          break;\\n        case 'beer_name':\\n          aVal = a.beer_name || '';\\n          bVal = b.beer_name || '';\\n          break;\\n        case 'category':\\n          aVal = \`\${a.bjcp_category?.category_number || ''}\${a.bjcp_category?.subcategory_letter || ''}\`;\\n          bVal = \`\${b.bjcp_category?.category_number || ''}\${b.bjcp_category?.subcategory_letter || ''}\`;\\n          break;\\n        case 'paid':\\n          aVal = a.is_paid ? 1 : 0;\\n          bVal = b.is_paid ? 1 : 0;\\n          break;\\n        case 'submitted_at':\\n          // Handle space-separated datetime format for sorting\\n          const parseDateTime = (dateString) => {\\n            if (!dateString) return new Date(0);\\n            let isoString = dateString;\\n            if (dateString.includes(' ') && !dateString.includes('T')) {\\n              // Replace space with 'T'\\n              isoString = dateString.replace(' ', 'T');\\n              \\n              // Truncate microseconds to milliseconds if present (6 digits to 3)\\n              if (isoString.includes('.')) {\\n                const [datePart, fractionalPart] = isoString.split('.');\\n                const milliseconds = fractionalPart.substring(0, 3);\\n                isoString = \`\${datePart}.\${milliseconds}\`;\\n              }\\n              \\n              // Add timezone if missing\\n              if (!isoString.includes('+') && !isoString.includes('Z')) {\\n                isoString += 'Z';\\n              }\\n            }\\n            return new Date(isoString);\\n          };\\n          aVal = parseDateTime(a.submitted_at);\\n          bVal = parseDateTime(b.submitted_at);\\n          break;\\n        default:\\n          aVal = a[sortColumn] || '';\\n          bVal = b[sortColumn] || '';\\n      }\\n      \\n      if (sortDirection === 'asc') {\\n        return aVal > bVal ? 1 : aVal < bVal ? -1 : 0;\\n      } else {\\n        return aVal < bVal ? 1 : aVal > bVal ? -1 : 0;\\n      }\\n    });\\n    \\n    filteredEntries = filtered;\\n  }\\n\\n  // Handle column sort\\n  function handleSort(column) {\\n    if (sortColumn === column) {\\n      sortDirection = sortDirection === 'asc' ? 'desc' : 'asc';\\n    } else {\\n      sortColumn = column;\\n      sortDirection = 'asc';\\n    }\\n    filterAndSortEntries();\\n  }\\n\\n  // Toggle entry selection\\n  function toggleSelection(entryId) {\\n    if (selectedEntries.has(entryId)) {\\n      selectedEntries.delete(entryId);\\n    } else {\\n      selectedEntries.add(entryId);\\n    }\\n    selectedEntries = new Set(selectedEntries);\\n  }\\n\\n  // Toggle select all\\n  function toggleSelectAll() {\\n    if (selectAll) {\\n      selectedEntries.clear();\\n    } else {\\n      filteredEntries.forEach(entry => selectedEntries.add(entry.id));\\n    }\\n    selectedEntries = new Set(selectedEntries);\\n    selectAll = !selectAll;\\n  }\\n\\n  // Update payment status\\n  async function updatePaymentStatus(entryId, isPaid) {\\n    try {\\n      const { error } = await supabase\\n        .from('competition_entries')\\n        .update({ \\n          is_paid: isPaid,\\n          payment_date: isPaid ? new Date().toISOString() : null\\n        })\\n        .eq('id', entryId);\\n      \\n      if (error) throw error;\\n      \\n      // Update local data\\n      const entryIndex = entries.findIndex(e => e.id === entryId);\\n      if (entryIndex !== -1) {\\n        entries[entryIndex].is_paid = isPaid;\\n        entries[entryIndex].payment_date = isPaid ? new Date().toISOString() : null;\\n        filterAndSortEntries();\\n      }\\n    } catch (err) {\\n      console.error('Error updating payment status:', err);\\n      alert('Failed to update payment status');\\n    }\\n  }\\n\\n// Fixed print labels function for competition entries\\nfunction printLabels() {\\n  const entriesToPrint = selectedEntries.size > 0 \\n    ? filteredEntries.filter(e => selectedEntries.has(e.id))\\n    : filteredEntries;\\n  \\n  if (entriesToPrint.length === 0) {\\n    alert('No entries selected for printing');\\n    return;\\n  }\\n\\n  // Create print window\\n  const printWindow = window.open('', '_blank');\\n  \\n  // Generate label HTML - create 3 copies of each label (for 3 bottles per entry)\\n  const labelsHtml = entriesToPrint.flatMap(entry => {\\n    const labelTemplate = \`\\n      <div class=\\"label\\">\\n        <div class=\\"label-header\\">\\n          <strong>\${competition?.name || 'Competition'}</strong>\\n        </div>\\n        <div class=\\"entry-number\\">\\n          Entry #: <span>\${entry.entry_number}</span>\\n        </div>\\n        <div class=\\"beer-style\\">\\n          Style: <span>\${entry.bjcp_category?.category_number || ''}\${entry.bjcp_category?.subcategory_letter || ''}</span> - \${entry.bjcp_category?.category_name || ''}\\n          \${entry.bjcp_category?.subcategory_name ? \`<br><small>\${entry.bjcp_category.subcategory_name}</small>\` : ''}\\n          \${entry.beer_notes ? \`<br><small>Special: \${entry.beer_notes}</small>\` : ''}\\n        </div>\\n        \${entry.notes ? \`\\n          <div class=\\"notes\\">\\n            Notes: \${entry.notes}\\n          </div>\\n        \` : ''}\\n      </div>\\n    \`;\\n    // Return 3 copies of each label\\n    return [labelTemplate, labelTemplate, labelTemplate];\\n  }).join('');\\n\\n  // Write print document with updated CSS for 3.375\\" x 2.125\\" labels\\n  printWindow.document.write(\`\\n    <!DOCTYPE html>\\n    <html>\\n    <head>\\n      <title>Competition Entry Labels</title>\\n      <style>\\n        @page {\\n          size: 8.5in 11in;\\n          margin: 0.5in;\\n        }\\n        body {\\n          margin: 0;\\n          padding: 0;\\n          font-family: Arial, sans-serif;\\n        }\\n        .labels-container {\\n          display: flex;\\n          flex-wrap: wrap;\\n          gap: 0.1875in;\\n          justify-content: flex-start;\\n        }\\n        .label {\\n          width: 2.25in;\\n          height: 2.25in;\\n          padding: 0.125in;\\n          box-sizing: border-box;\\n          border: 1px solid #000;\\n          display: flex;\\n          flex-direction: column;\\n          justify-content: space-between;\\n          margin-bottom: 0.1875in;\\n          break-inside: avoid;\\n        }\\n        .label-header {\\n          font-size: 10pt;\\n          text-align: center;\\n          margin-bottom: 0.1in;\\n          border-bottom: 1px solid #000;\\n          padding-bottom: 0.05in;\\n        }\\n        .entry-number {\\n          font-size: 14pt;\\n          font-weight: bold;\\n          margin-bottom: 0.1in;\\n        }\\n        .entry-number span {\\n          font-size: 18pt;\\n          color: #ff3e00;\\n        }\\n        .beer-style {\\n          font-size: 10pt;\\n          margin-bottom: 0.1in;\\n        }\\n        .beer-style span {\\n          font-weight: bold;\\n          font-size: 12pt;\\n        }\\n        .beer-style small {\\n          font-size: 9pt;\\n        }\\n        .special, .notes {\\n          font-size: 9pt;\\n          margin-top: 0.05in;\\n          padding-top: 0.05in;\\n          border-top: 1px solid #ccc;\\n        }\\n        @media print {\\n          .label {\\n            border: 1px solid #000 !important;\\n          }\\n          body {\\n            -webkit-print-color-adjust: exact;\\n            print-color-adjust: exact;\\n          }\\n        }\\n      </style>\\n    </head>\\n    <body>\\n      <div class=\\"labels-container\\">\\n        \${labelsHtml}\\n      </div>\\n    </body>\\n    </html>\\n  \`);\\n\\n  printWindow.document.close();\\n  printWindow.focus();\\n  \\n  // Trigger print after a short delay\\n  setTimeout(() => {\\n    printWindow.print();\\n    printWindow.close();\\n  }, 250);\\n}\\n\\n  // Format date\\n  function formatDate(dateString) {\\n    if (!dateString || dateString === null || dateString === undefined) {\\n      return 'No date';\\n    }\\n    \\n    try {\\n      // Convert to string in case it's not already\\n      const dateStr = String(dateString).trim();\\n      \\n      // Handle PostgreSQL timestamp format: \\"2025-08-29 03:43:21.894974\\"\\n      let isoString = dateStr;\\n      \\n      // Convert space-separated format to ISO format\\n      if (dateStr.includes(' ') && !dateStr.includes('T')) {\\n        // Replace space with 'T'\\n        isoString = dateStr.replace(' ', 'T');\\n        \\n        // Truncate microseconds to milliseconds if present (6 digits to 3)\\n        if (isoString.includes('.')) {\\n          const [datePart, fractionalPart] = isoString.split('.');\\n          const milliseconds = fractionalPart.substring(0, 3);\\n          isoString = \`\${datePart}.\${milliseconds}\`;\\n        }\\n        \\n        // Add timezone if missing\\n        if (!isoString.includes('+') && !isoString.includes('Z')) {\\n          isoString += 'Z';\\n        }\\n      }\\n\\n      const date = new Date(isoString);\\n      \\n      // Check if date is valid\\n      if (isNaN(date.getTime())) {\\n        console.warn('Invalid date after parsing:', dateStr, '->', isoString);\\n        return 'Invalid Date';\\n      }\\n\\n      return date.toLocaleDateString('en-US', {\\n        month: 'short',\\n        day: 'numeric',\\n        year: 'numeric',\\n        hour: '2-digit',\\n        minute: '2-digit'\\n      });\\n    } catch (error) {\\n      console.warn('Error formatting date:', dateString, error);\\n      return 'Invalid Date';\\n    }\\n  }\\n\\n  // Navigate back\\n  function navigateBack() {\\n    goto('/officers/manage-competitions');\\n  }\\n\\n  // Export entries to CSV\\n  function exportToCSV() {\\n    // Use filtered entries if search is active, otherwise use selected entries or all entries\\n    const entriesToExport = selectedEntries.size > 0 \\n      ? filteredEntries.filter(entry => selectedEntries.has(entry.id))\\n      : filteredEntries;\\n    \\n    if (entriesToExport.length === 0) {\\n      alert('No entries to export');\\n      return;\\n    }\\n\\n    // CSV headers\\n    const headers = [\\n      'Entry Number',\\n      'Member Name', \\n      'Beer Name',\\n      'Category Number',\\n      'Category Name',\\n      'Subcategory Name',\\n      'Paid',\\n      'Submitted Date'\\n    ];\\n\\n    // Convert entries to CSV format\\n    const csvRows = [\\n      headers.join(','), // Header row\\n      ...entriesToExport.map(entry => [\\n        entry.entry_number || '',\\n        \`\\"\${entry.members?.name || ''}\\"\`, // Quoted for names with commas\\n        \`\\"\${entry.beer_name || ''}\\"\`, // Quoted for beer names with commas\\n        \`\${entry.bjcp_category?.category_number || ''}\${entry.bjcp_category?.subcategory_letter || ''}\`,\\n        \`\\"\${entry.bjcp_category?.category_name || ''}\\"\`,\\n        \`\\"\${entry.bjcp_category?.subcategory_name || ''}\\"\`,\\n        entry.is_paid ? 'Yes' : 'No',\\n        formatDate(entry.submitted_at)\\n      ].join(','))\\n    ];\\n\\n    // Create and download CSV file\\n    const csvContent = csvRows.join('\\\\n');\\n    const blob = new Blob([csvContent], { type: 'text/csv' });\\n    const url = window.URL.createObjectURL(blob);\\n    \\n    const a = document.createElement('a');\\n    a.href = url;\\n    a.download = \`\${competition?.name || 'competition'}_entries_\${new Date().toISOString().split('T')[0]}.csv\`;\\n    document.body.appendChild(a);\\n    a.click();\\n    document.body.removeChild(a);\\n    window.URL.revokeObjectURL(url);\\n  }\\n\\n  // Print judging sheets for internal competition\\n  function printJudgingSheets() {\\n    const entriesToPrint = selectedEntries.size > 0 \\n      ? filteredEntries.filter(entry => selectedEntries.has(entry.id))\\n      : filteredEntries;\\n    \\n    if (entriesToPrint.length === 0) {\\n      alert('No entries to print judging sheets for');\\n      return;\\n    }\\n\\n    // Create a new window for printing\\n    const printWindow = window.open('', '_blank');\\n    \\n    // Generate the judging sheet HTML\\n    const judgingSheetHtml = generateJudgingSheetHtml(entriesToPrint);\\n    \\n    printWindow.document.write(judgingSheetHtml);\\n    printWindow.document.close();\\n    \\n    // Wait for content to load then print\\n    printWindow.onload = () => {\\n      printWindow.print();\\n      printWindow.close();\\n    };\\n  }\\n\\n  // Generate HTML for judging sheets\\n  function generateJudgingSheetHtml(entries) {\\n    const competitionName = competition?.name || 'Competition';\\n    const currentDate = new Date().toLocaleDateString();\\n    \\n    return \`\\n      <!DOCTYPE html>\\n      <html>\\n        <head>\\n          <title>Judging Sheet - \${competitionName}</title>\\n          <style>\\n            @media print {\\n              body { margin: 0; }\\n              .page-break { page-break-before: always; }\\n            }\\n            \\n            body {\\n              font-family: Arial, sans-serif;\\n              font-size: 12px;\\n              line-height: 1.4;\\n              margin: 20px;\\n            }\\n            \\n            .header {\\n              text-align: center;\\n              margin-bottom: 30px;\\n              border-bottom: 2px solid #333;\\n              padding-bottom: 15px;\\n            }\\n            \\n            .competition-title {\\n              font-size: 18px;\\n              font-weight: bold;\\n              margin-bottom: 5px;\\n            }\\n            \\n            .judge-info {\\n              margin: 20px 0;\\n              border: 1px solid #666;\\n              padding: 15px;\\n            }\\n            \\n            .judge-line {\\n              display: inline-block;\\n              border-bottom: 1px solid #333;\\n              width: 200px;\\n              height: 20px;\\n              margin: 0 10px;\\n            }\\n            \\n            .entries-section {\\n              margin: 20px 0;\\n            }\\n            \\n            .entry-item {\\n              border: 1px solid #ccc;\\n              margin-bottom: 15px;\\n              padding: 10px;\\n              background-color: #fafafa;\\n            }\\n            \\n            .entry-header {\\n              font-weight: bold;\\n              margin-bottom: 8px;\\n              display: flex;\\n              justify-content: space-between;\\n            }\\n            \\n            .entry-number {\\n              font-size: 14px;\\n              color: #000;\\n            }\\n            \\n            .beer-style {\\n              color: #666;\\n              font-size: 11px;\\n            }\\n            \\n            .tasting-notes {\\n              margin-top: 10px;\\n            }\\n            \\n            .notes-label {\\n              font-weight: bold;\\n              margin-bottom: 5px;\\n            }\\n            \\n            .notes-lines {\\n              border-bottom: 1px solid #ccc;\\n              height: 80px;\\n              margin-bottom: 10px;\\n            }\\n            \\n            .top-picks {\\n              margin-top: 40px;\\n              border: 2px solid #333;\\n              padding: 20px;\\n              background-color: #f0f0f0;\\n              page-break-inside: avoid;\\n              break-inside: avoid;\\n            }\\n            \\n            .top-picks-title {\\n              font-size: 16px;\\n              font-weight: bold;\\n              text-align: center;\\n              margin-bottom: 20px;\\n            }\\n            \\n            .pick-line {\\n              margin: 15px 0;\\n              font-size: 14px;\\n            }\\n            \\n            .pick-number {\\n              display: inline-block;\\n              border-bottom: 2px solid #333;\\n              width: 100px;\\n              height: 25px;\\n              margin-left: 20px;\\n            }\\n          </style>\\n        </head>\\n        <body>\\n          <div class=\\"header\\">\\n            <div class=\\"competition-title\\">\${competitionName} - Judging Sheet</div>\\n            <div>Date: \${currentDate}</div>\\n          </div>\\n          \\n          <div class=\\"judge-info\\">\\n            <strong>Judge Name:</strong> <span class=\\"judge-line\\"></span>\\n            <strong style=\\"margin-left: 40px;\\">Signature:</strong> <span class=\\"judge-line\\"></span>\\n          </div>\\n          \\n          <div class=\\"entries-section\\">\\n            \${entries.map(entry => \`\\n              <div class=\\"entry-item\\">\\n                <div class=\\"entry-header\\">\\n                  <div class=\\"entry-number\\">Entry #\${entry.entry_number}</div>\\n                  <div class=\\"beer-style\\">\\n                    \${entry.bjcp_category?.category_number || ''}\${entry.bjcp_category?.subcategory_letter || ''} - \\n                    \${entry.bjcp_category?.category_name || 'Unknown Category'}\${entry.bjcp_category?.subcategory_name ? \` - \${entry.bjcp_category.subcategory_name}\` : ''}\\n                  </div>\\n                </div>\\n                \${entry.beer_notes ? \`<div><strong>Additional Notes:</strong> \${entry.beer_notes}</div>\` : ''}\\n                <div class=\\"tasting-notes\\">\\n                  <div class=\\"notes-label\\">Tasting Notes:</div>\\n                  <div class=\\"notes-lines\\"></div>\\n                </div>\\n              </div>\\n            \`).join('')}\\n          </div>\\n          \\n          <div class=\\"top-picks\\">\\n            <div class=\\"top-picks-title\\">Your Top 3 Picks</div>\\n            <div class=\\"pick-line\\">\\n              <strong>1st Place Entry #:</strong> <span class=\\"pick-number\\"></span>\\n            </div>\\n            <div class=\\"pick-line\\">\\n              <strong>2nd Place Entry #:</strong> <span class=\\"pick-number\\"></span>\\n            </div>\\n            <div class=\\"pick-line\\">\\n              <strong>3rd Place Entry #:</strong> <span class=\\"pick-number\\"></span>\\n            </div>\\n          </div>\\n        </body>\\n      </html>\\n    \`;\\n  }\\n\\n  // Reactive statements\\n  $: filterAndSortEntries(), searchQuery, sortColumn, sortDirection;\\n  $: selectAll = selectedEntries.size === filteredEntries.length && filteredEntries.length > 0;\\n<\/script>\\n\\n<style>\\n  .container {\\n    max-width: 1400px;\\n    margin: 0 auto;\\n    padding: 1rem;\\n  }\\n\\n  .hero {\\n    text-align: center;\\n    margin-bottom: 3rem;\\n  }\\n\\n  .hero h1 {\\n    color: #ff3e00;\\n    text-transform: uppercase;\\n    font-size: 4rem;\\n    font-weight: 100;\\n    margin: 0 0 0.25em;\\n    line-height: 1.1;\\n    display: flex;\\n    align-items: center;\\n    justify-content: center;\\n    gap: 1rem;\\n  }\\n\\n  .hero h1 .emoji {\\n    font-size: 1em;\\n  }\\n\\n  .hero .subtitle {\\n    font-size: 1.2rem;\\n    color: #333;\\n    font-weight: 500;\\n  }\\n\\n  .competition-info {\\n    background: white;\\n    padding: 1.5rem;\\n    border-radius: 6px;\\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\\n    border-left: 4px solid #ff3e00;\\n    margin-bottom: 2rem;\\n  }\\n\\n  .competition-info h2 {\\n    margin: 0 0 1rem 0;\\n    color: #333;\\n  }\\n\\n  .info-grid {\\n    display: grid;\\n    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\\n    gap: 1rem;\\n  }\\n\\n  .info-item {\\n    display: flex;\\n    flex-direction: column;\\n  }\\n\\n  .info-label {\\n    font-size: 0.875rem;\\n    color: #666;\\n    margin-bottom: 0.25rem;\\n  }\\n\\n  .info-value {\\n    font-size: 1.1rem;\\n    font-weight: 600;\\n    color: #333;\\n  }\\n\\n  .controls {\\n    display: flex;\\n    gap: 1rem;\\n    margin-bottom: 2rem;\\n    flex-wrap: wrap;\\n    align-items: center;\\n  }\\n\\n  .search-input {\\n    flex: 1;\\n    min-width: 250px;\\n    padding: 0.75rem;\\n    border: 1px solid #ddd;\\n    border-radius: 6px;\\n    font-size: 1rem;\\n  }\\n\\n  .btn {\\n    padding: 0.75rem 1.5rem;\\n    border: none;\\n    border-radius: 6px;\\n    font-size: 1rem;\\n    cursor: pointer;\\n    transition: all 0.3s ease;\\n  }\\n\\n  .btn-primary {\\n    background: #ff3e00;\\n    color: white;\\n  }\\n\\n  .btn-primary:hover {\\n    background: #e63600;\\n  }\\n\\n  .btn-primary:disabled {\\n    background: #ccc;\\n    cursor: not-allowed;\\n  }\\n\\n  .btn-secondary {\\n    background: #6b7280;\\n    color: white;\\n  }\\n\\n  .btn-secondary:hover {\\n    background: #4b5563;\\n  }\\n\\n  .selected-count {\\n    padding: 0.5rem 1rem;\\n    background: #fef3c7;\\n    border-radius: 6px;\\n    color: #92400e;\\n    font-weight: 500;\\n  }\\n\\n  .entries-table {\\n    background: white;\\n    border-radius: 6px;\\n    overflow: hidden;\\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\\n  }\\n\\n  table {\\n    width: 100%;\\n    border-collapse: collapse;\\n  }\\n\\n  th {\\n    background: #f5f5f5;\\n    padding: 1rem;\\n    text-align: left;\\n    font-weight: 600;\\n    color: #333;\\n    border-bottom: 2px solid #ddd;\\n    cursor: pointer;\\n    user-select: none;\\n    position: relative;\\n  }\\n\\n  th:hover {\\n    background: #ebebeb;\\n  }\\n\\n  .sort-indicator {\\n    position: absolute;\\n    right: 0.5rem;\\n    top: 50%;\\n    transform: translateY(-50%);\\n    color: #ff3e00;\\n  }\\n\\n  td {\\n    padding: 1rem;\\n    border-bottom: 1px solid #eee;\\n  }\\n\\n  tr:hover {\\n    background: #f9f9f9;\\n  }\\n\\n  .checkbox-cell {\\n    width: 50px;\\n  }\\n\\n  .entry-number {\\n    font-weight: 600;\\n    color: #ff3e00;\\n  }\\n\\n  .category-badge {\\n    display: inline-block;\\n    padding: 0.25rem 0.5rem;\\n    background: #e5e7eb;\\n    border-radius: 4px;\\n    font-size: 0.875rem;\\n    font-weight: 500;\\n  }\\n\\n  .payment-toggle {\\n    display: flex;\\n    align-items: center;\\n    gap: 0.5rem;\\n  }\\n\\n  .toggle-switch {\\n    position: relative;\\n    width: 48px;\\n    height: 24px;\\n    background: #ddd;\\n    border-radius: 12px;\\n    cursor: pointer;\\n    transition: background 0.3s;\\n  }\\n\\n  .toggle-switch.active {\\n    background: #059669;\\n  }\\n\\n  .toggle-switch::after {\\n    content: '';\\n    position: absolute;\\n    top: 2px;\\n    left: 2px;\\n    width: 20px;\\n    height: 20px;\\n    background: white;\\n    border-radius: 50%;\\n    transition: transform 0.3s;\\n  }\\n\\n  .toggle-switch.active::after {\\n    transform: translateX(24px);\\n  }\\n\\n  .empty-state {\\n    text-align: center;\\n    padding: 3rem;\\n    color: #666;\\n  }\\n\\n  .loading {\\n    text-align: center;\\n    padding: 3rem;\\n  }\\n\\n  .spinner {\\n    display: inline-block;\\n    width: 40px;\\n    height: 40px;\\n    border: 4px solid #f3f3f3;\\n    border-top: 4px solid #ff3e00;\\n    border-radius: 50%;\\n    animation: spin 1s linear infinite;\\n  }\\n\\n  @keyframes spin {\\n    0% { transform: rotate(0deg); }\\n    100% { transform: rotate(360deg); }\\n  }\\n\\n  /* Mobile styles */\\n  @media (max-width: 768px) {\\n    .hero h1 {\\n      font-size: 2.5rem;\\n    }\\n\\n    .controls {\\n      flex-direction: column;\\n      align-items: stretch;\\n    }\\n\\n    .search-input {\\n      width: 100%;\\n    }\\n\\n    .entries-table {\\n      overflow-x: auto;\\n    }\\n\\n    table {\\n      min-width: 800px;\\n    }\\n\\n    .info-grid {\\n      grid-template-columns: 1fr;\\n    }\\n  }\\n</style>\\n\\n<div class=\\"container\\">\\n  <!-- Hero Section -->\\n  <div class=\\"hero\\">\\n    <h1><span class=\\"emoji\\">📋</span> Competition Entries</h1>\\n    <p class=\\"subtitle\\">Manage entries and print labels</p>\\n  </div>\\n\\n  {#if isLoading}\\n    <div class=\\"loading\\">\\n      <div class=\\"spinner\\"></div>\\n      <p>Loading entries...</p>\\n    </div>\\n  {:else if competition}\\n    <!-- Competition Info -->\\n    <div class=\\"competition-info\\">\\n      <h2>{competition.name}</h2>\\n      <div class=\\"info-grid\\">\\n        <div class=\\"info-item\\">\\n          <span class=\\"info-label\\">Total Entries</span>\\n          <span class=\\"info-value\\">{entries.length}</span>\\n        </div>\\n        <div class=\\"info-item\\">\\n          <span class=\\"info-label\\">Paid Entries</span>\\n          <span class=\\"info-value\\">{entries.filter(e => e.is_paid).length}</span>\\n        </div>\\n        <div class=\\"info-item\\">\\n          <span class=\\"info-label\\">Entry Fee</span>\\n          <span class=\\"info-value\\">\${competition.entry_fee || 0}</span>\\n        </div>\\n        <div class=\\"info-item\\">\\n          <span class=\\"info-label\\">Total Fees</span>\\n          <span class=\\"info-value\\">\${entries.filter(e => e.is_paid).length * (competition.entry_fee || 0)}</span>\\n        </div>\\n      </div>\\n    </div>\\n\\n    <!-- Controls -->\\n    <div class=\\"controls\\">\\n      <input\\n        type=\\"text\\"\\n        class=\\"search-input\\"\\n        placeholder=\\"Search entries...\\"\\n        bind:value={searchQuery}\\n      />\\n      {#if selectedEntries.size > 0}\\n        <span class=\\"selected-count\\">{selectedEntries.size} selected</span>\\n      {/if}\\n      <button \\n        class=\\"btn btn-primary\\"\\n        on:click={printLabels}\\n        disabled={filteredEntries.length === 0}\\n      >\\n        🖨️ Print Labels {selectedEntries.size > 0 ? \`(\${selectedEntries.size})\` : '(All)'}\\n      </button>\\n      <button \\n        class=\\"btn btn-success\\"\\n        on:click={exportToCSV}\\n        disabled={filteredEntries.length === 0}\\n      >\\n        📊 Export CSV {selectedEntries.size > 0 ? \`(\${selectedEntries.size})\` : '(All)'}\\n      </button>\\n      <button \\n        class=\\"btn btn-info\\"\\n        on:click={printJudgingSheets}\\n        disabled={filteredEntries.length === 0}\\n      >\\n        📝 Print Judging Sheets {selectedEntries.size > 0 ? \`(\${selectedEntries.size})\` : '(All)'}\\n      </button>\\n      <button class=\\"btn btn-secondary\\" on:click={navigateBack}>\\n        ← Back\\n      </button>\\n    </div>\\n\\n    {#if filteredEntries.length === 0}\\n      <div class=\\"empty-state\\">\\n        <h3>No entries found</h3>\\n        <p>\\n          {#if searchQuery}\\n            Try adjusting your search\\n          {:else}\\n            No entries have been submitted yet\\n          {/if}\\n        </p>\\n      </div>\\n    {:else}\\n      <!-- Entries Table -->\\n      <div class=\\"entries-table\\">\\n        <table>\\n          <thead>\\n            <tr>\\n              <th class=\\"checkbox-cell\\">\\n                <input \\n                  type=\\"checkbox\\" \\n                  checked={selectAll}\\n                  on:change={toggleSelectAll}\\n                />\\n              </th>\\n              <th on:click={() => handleSort('entry_number')}>\\n                Entry #\\n                {#if sortColumn === 'entry_number'}\\n                  <span class=\\"sort-indicator\\">{sortDirection === 'asc' ? '↑' : '↓'}</span>\\n                {/if}\\n              </th>\\n              <th on:click={() => handleSort('member_name')}>\\n                Member\\n                {#if sortColumn === 'member_name'}\\n                  <span class=\\"sort-indicator\\">{sortDirection === 'asc' ? '↑' : '↓'}</span>\\n                {/if}\\n              </th>\\n              <th on:click={() => handleSort('beer_name')}>\\n                Beer Name\\n                {#if sortColumn === 'beer_name'}\\n                  <span class=\\"sort-indicator\\">{sortDirection === 'asc' ? '↑' : '↓'}</span>\\n                {/if}\\n              </th>\\n              <th on:click={() => handleSort('category')}>\\n                Category\\n                {#if sortColumn === 'category'}\\n                  <span class=\\"sort-indicator\\">{sortDirection === 'asc' ? '↑' : '↓'}</span>\\n                {/if}\\n              </th>\\n              <th on:click={() => handleSort('paid')}>\\n                Paid\\n                {#if sortColumn === 'paid'}\\n                  <span class=\\"sort-indicator\\">{sortDirection === 'asc' ? '↑' : '↓'}</span>\\n                {/if}\\n              </th>\\n              <th on:click={() => handleSort('submitted_at')}>\\n                Submitted\\n                {#if sortColumn === 'submitted_at'}\\n                  <span class=\\"sort-indicator\\">{sortDirection === 'asc' ? '↑' : '↓'}</span>\\n                {/if}\\n              </th>\\n            </tr>\\n          </thead>\\n          <tbody>\\n            {#each filteredEntries as entry}\\n              <tr>\\n                <td class=\\"checkbox-cell\\">\\n                  <input \\n                    type=\\"checkbox\\"\\n                    checked={selectedEntries.has(entry.id)}\\n                    on:change={() => toggleSelection(entry.id)}\\n                  />\\n                </td>\\n                <td>\\n                  <span class=\\"entry-number\\">{entry.entry_number}</span>\\n                </td>\\n                <td>\\n                  <div>{entry.members?.name}</div>\\n                  <small>{entry.members?.email}</small>\\n                </td>\\n                <td>{entry.beer_name || '-'}</td>\\n                <td>\\n                  <span class=\\"category-badge\\">\\n                    {entry.bjcp_category?.category_number || ''}{entry.bjcp_category?.subcategory_letter || ''}\\n                  </span>\\n                  {#if entry.bjcp_category?.category_name}\\n                    <br><small>{entry.bjcp_category.category_name}</small>\\n                  {/if}\\n                </td>\\n                <td>\\n                  <div class=\\"payment-toggle\\">\\n                    <div \\n                      class=\\"toggle-switch {entry.is_paid ? 'active' : ''}\\"\\n                      on:click={() => updatePaymentStatus(entry.id, !entry.is_paid)}\\n                    ></div>\\n                    <span>{entry.is_paid ? 'Paid' : 'Unpaid'}</span>\\n                  </div>\\n                </td>\\n                <td>{formatDate(entry.submitted_at)}</td>\\n              </tr>\\n            {/each}\\n          </tbody>\\n        </table>\\n      </div>\\n    {/if}\\n  {/if}\\n</div>"],"names":[],"mappings":"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"}`
};
const Page = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $page, $$unsubscribe_page;
  let $userProfile, $$unsubscribe_userProfile;
  $$unsubscribe_page = subscribe(page, (value) => $page = value);
  $$unsubscribe_userProfile = subscribe(userProfile, (value) => $userProfile = value);
  let entries = [];
  let filteredEntries = [];
  let searchQuery = "";
  let sortColumn = "entry_number";
  let selectedEntries = /* @__PURE__ */ new Set();
  onDestroy(() => {
  });
  function filterAndSortEntries() {
    let filtered = [...entries];
    if (searchQuery.trim()) {
      const query = searchQuery.toLowerCase();
      filtered = filtered.filter((entry) => entry.entry_number?.toLowerCase().includes(query) || entry.beer_name?.toLowerCase().includes(query) || entry.members?.name?.toLowerCase().includes(query) || entry.members?.email?.toLowerCase().includes(query) || entry.bjcp_category?.category_name?.toLowerCase().includes(query) || `${entry.bjcp_category?.category_number}${entry.bjcp_category?.subcategory_letter}`.toLowerCase().includes(query) || entry.special_ingredients?.toLowerCase().includes(query) || entry.notes?.toLowerCase().includes(query));
    }
    filtered.sort((a, b) => {
      let aVal, bVal;
      switch (sortColumn) {
        case "entry_number":
          aVal = a.entry_number || "";
          bVal = b.entry_number || "";
          break;
        case "member_name":
          aVal = a.members?.name || "";
          bVal = b.members?.name || "";
          break;
        case "beer_name":
          aVal = a.beer_name || "";
          bVal = b.beer_name || "";
          break;
        case "category":
          aVal = `${a.bjcp_category?.category_number || ""}${a.bjcp_category?.subcategory_letter || ""}`;
          bVal = `${b.bjcp_category?.category_number || ""}${b.bjcp_category?.subcategory_letter || ""}`;
          break;
        case "paid":
          aVal = a.is_paid ? 1 : 0;
          bVal = b.is_paid ? 1 : 0;
          break;
        case "submitted_at":
          const parseDateTime = (dateString) => {
            if (!dateString) return /* @__PURE__ */ new Date(0);
            let isoString = dateString;
            if (dateString.includes(" ") && !dateString.includes("T")) {
              isoString = dateString.replace(" ", "T");
              if (isoString.includes(".")) {
                const [datePart, fractionalPart] = isoString.split(".");
                const milliseconds = fractionalPart.substring(0, 3);
                isoString = `${datePart}.${milliseconds}`;
              }
              if (!isoString.includes("+") && !isoString.includes("Z")) {
                isoString += "Z";
              }
            }
            return new Date(isoString);
          };
          aVal = parseDateTime(a.submitted_at);
          bVal = parseDateTime(b.submitted_at);
          break;
        default:
          aVal = a[sortColumn] || "";
          bVal = b[sortColumn] || "";
      }
      {
        return aVal > bVal ? 1 : aVal < bVal ? -1 : 0;
      }
    });
    filteredEntries = filtered;
  }
  $$result.css.add(css);
  {
    if ($userProfile && !$userProfile.is_officer) {
      goto();
    }
  }
  $page.params.id;
  {
    filterAndSortEntries();
  }
  selectedEntries.size === filteredEntries.length && filteredEntries.length > 0;
  $$unsubscribe_page();
  $$unsubscribe_userProfile();
  return `   <div class="container svelte-1yscyhl"> <div class="hero svelte-1yscyhl" data-svelte-h="svelte-7nznvx"><h1 class="svelte-1yscyhl"><span class="emoji svelte-1yscyhl">📋</span> Competition Entries</h1> <p class="subtitle svelte-1yscyhl">Manage entries and print labels</p></div> ${`<div class="loading svelte-1yscyhl" data-svelte-h="svelte-e96xyd"><div class="spinner svelte-1yscyhl"></div> <p>Loading entries...</p></div>`}</div>`;
});

export { Page as default };
//# sourceMappingURL=_page.svelte-cS4mMl8P.js.map

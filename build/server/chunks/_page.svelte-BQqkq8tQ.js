import { c as create_ssr_component, a as subscribe, v as validate_component } from './ssr-CFMHIens.js';
import { g as goto } from './client-C3KLrhj1.js';
import { p as page } from './stores-C-uFbAzB.js';
import { u as userProfile } from './userProfile-BAUZwBX2.js';
import { j as judgeList, d as isLoadingJudges, e as judgeError } from './competitionJudgingStore-Bi9TZcPs.js';
import './supabaseClient-D_8i9Ohq.js';
import { H as Hero } from './Hero-Dg21uuqy.js';
import { C as Container } from './Container-BafdMVU8.js';
import { L as LoadingSpinner } from './LoadingSpinner-BXBS6p7s.js';
import './exports-DKuYoYKl.js';
import './index-Ct3aIOD7.js';
import './false-CRHihH2U.js';
import '@supabase/supabase-js';

/* empty css                                                                */
/* empty css                                                               */
const css = {
  code: ".competition-info.svelte-1bifhvp.svelte-1bifhvp{background:white;padding:1.5rem;border-radius:6px;box-shadow:0 2px 4px rgba(0, 0, 0, 0.1);border-left:4px solid #ff3e00;margin-bottom:2rem}.competition-info.svelte-1bifhvp h2.svelte-1bifhvp{margin:0 0 1rem 0;color:#333;font-size:1.5rem}.status-badge.svelte-1bifhvp.svelte-1bifhvp{display:inline-block;padding:0.25rem 0.75rem;border-radius:12px;font-size:0.875rem;font-weight:500}.status-completed.svelte-1bifhvp.svelte-1bifhvp{background:#dcfce7;color:#166534}.status-judging.svelte-1bifhvp.svelte-1bifhvp{background:#fef3c7;color:#92400e}.status-open.svelte-1bifhvp.svelte-1bifhvp{background:#dbeafe;color:#1d4ed8}.controls.svelte-1bifhvp.svelte-1bifhvp{display:flex;gap:1rem;margin-bottom:2rem;align-items:center;flex-wrap:wrap}.judges-section.svelte-1bifhvp.svelte-1bifhvp{background:white;border-radius:6px;box-shadow:0 2px 4px rgba(0, 0, 0, 0.1);overflow:hidden}.section-header.svelte-1bifhvp.svelte-1bifhvp{padding:1.5rem;border-bottom:1px solid #eee;display:flex;justify-content:space-between;align-items:center}.judges-list.svelte-1bifhvp.svelte-1bifhvp{padding:1rem}.judge-card.svelte-1bifhvp.svelte-1bifhvp{background:#f9f9f9;border-radius:6px;padding:1rem;margin-bottom:1rem;display:flex;justify-content:space-between;align-items:center}.judge-info.svelte-1bifhvp h4.svelte-1bifhvp{margin:0 0 0.25rem 0;color:#333}.judge-info.svelte-1bifhvp p.svelte-1bifhvp{margin:0;color:#666;font-size:0.9rem}.role-badge.svelte-1bifhvp.svelte-1bifhvp{display:inline-block;padding:0.25rem 0.5rem;background:#e5e7eb;border-radius:4px;font-size:0.8rem;font-weight:500;margin-top:0.5rem}.add-judge-form.svelte-1bifhvp.svelte-1bifhvp{background:#f9f9f9;padding:1.5rem;border-top:1px solid #eee}.form-group.svelte-1bifhvp.svelte-1bifhvp{margin-bottom:1rem}.form-group.svelte-1bifhvp label.svelte-1bifhvp{display:block;margin-bottom:0.5rem;font-weight:500;color:#333}.form-control.svelte-1bifhvp.svelte-1bifhvp{width:100%;padding:0.75rem;border:1px solid #ddd;border-radius:4px;font-size:1rem}.form-actions.svelte-1bifhvp.svelte-1bifhvp{display:flex;gap:0.5rem;flex-wrap:wrap}@media(max-width: 768px){.controls.svelte-1bifhvp.svelte-1bifhvp{flex-direction:column;align-items:stretch}.judge-card.svelte-1bifhvp.svelte-1bifhvp{flex-direction:column;align-items:start;gap:1rem}.form-actions.svelte-1bifhvp.svelte-1bifhvp{justify-content:stretch}.btn.svelte-1bifhvp.svelte-1bifhvp{flex:1}}",
  map: `{"version":3,"file":"+page.svelte","sources":["+page.svelte"],"sourcesContent":["<!-- Competition Judge Assignment Page -->\\r\\n<script>\\r\\n  import { onMount } from 'svelte';\\r\\n  import { goto } from '$app/navigation';\\r\\n  import { page } from '$app/stores';\\r\\n  import { userProfile } from '$lib/stores/userProfile';\\r\\n  import {\\r\\n    competitionJudgingStore,\\r\\n    judgeList,\\r\\n    isLoadingJudges,\\r\\n    judgeError,\\r\\n    JUDGE_ROLES\\r\\n  } from '$lib/stores/competitionJudgingStore';\\r\\n  import { supabase } from '$lib/supabaseClient';\\r\\n  import Hero from \\"$lib/components/ui/Hero.svelte\\";\\r\\n  import Container from \\"$lib/components/ui/Container.svelte\\";\\r\\n  import LoadingSpinner from \\"$lib/components/ui/LoadingSpinner.svelte\\";\\r\\n  import EmptyState from \\"$lib/components/ui/EmptyState.svelte\\";\\r\\n  import Button from \\"$lib/components/ui/Button.svelte\\";\\r\\n\\r\\n  // Check officer status\\r\\n  $: if ($userProfile && !$userProfile.is_officer) {\\r\\n    goto('/');\\r\\n  }\\r\\n\\r\\n  // Get competition ID from URL\\r\\n  $: competitionId = $page.params.id;\\r\\n\\r\\n  let competition = null;\\r\\n  let availableJudges = [];\\r\\n  let isLoading = true;\\r\\n  let isSaving = false;\\r\\n  let isRefreshing = false;\\r\\n  let showAddForm = false;\\r\\n\\r\\n  // Form data for adding judges\\r\\n  let newJudgeForm = {\\r\\n    judge_id: '',\\r\\n    judge_role: JUDGE_ROLES.CLUB_JUDGE,\\r\\n    assignment_notes: ''\\r\\n  };\\r\\n\\r\\n  onMount(() => {\\r\\n    loadData();\\r\\n  });\\r\\n\\r\\n  async function loadData() {\\r\\n    isLoading = true;\\r\\n    \\r\\n    try {\\r\\n      // Load competition details\\r\\n      const { data: compData, error: compError } = await supabase\\r\\n        .from('competitions')\\r\\n        .select('*')\\r\\n        .eq('id', competitionId)\\r\\n        .single();\\r\\n      \\r\\n      if (compError) throw compError;\\r\\n      competition = compData;\\r\\n\\r\\n      // Load existing judges\\r\\n      await competitionJudgingStore.loadJudges(competitionId);\\r\\n\\r\\n      // Load available judges (all members)\\r\\n      const { data: membersData, error: membersError } = await supabase\\r\\n        .from('members')\\r\\n        .select('id, name, email, phone')\\r\\n        .order('name');\\r\\n\\r\\n      if (membersError) throw membersError;\\r\\n      \\r\\n      // Filter out already assigned judges\\r\\n      const assignedJudgeIds = new Set($judgeList.map(j => j.judge_id));\\r\\n      availableJudges = membersData.filter(member => !assignedJudgeIds.has(member.id));\\r\\n\\r\\n    } catch (err) {\\r\\n      console.error('Error loading data:', err);\\r\\n      alert('Failed to load competition data');\\r\\n      goto('/officers/manage-competitions');\\r\\n    } finally {\\r\\n      isLoading = false;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  async function addJudge() {\\r\\n    if (!newJudgeForm.judge_id) {\\r\\n      alert('Please select a judge');\\r\\n      return;\\r\\n    }\\r\\n\\r\\n    try {\\r\\n      isSaving = true;\\r\\n\\r\\n      await competitionJudgingStore.assignJudge(competitionId, {\\r\\n        ...newJudgeForm,\\r\\n        assigned_by: $userProfile.id\\r\\n      });\\r\\n\\r\\n      // Reset form and refresh available judges\\r\\n      newJudgeForm = {\\r\\n        judge_id: '',\\r\\n        judge_role: JUDGE_ROLES.CLUB_JUDGE,\\r\\n        assignment_notes: ''\\r\\n      };\\r\\n      showAddForm = false;\\r\\n\\r\\n      // Refresh available judges list\\r\\n      const assignedJudgeIds = new Set($judgeList.map(j => j.judge_id));\\r\\n      availableJudges = availableJudges.filter(member => !assignedJudgeIds.has(member.id));\\r\\n\\r\\n      showToast('Judge assigned successfully', 'success');\\r\\n\\r\\n    } catch (err) {\\r\\n      console.error('Error adding judge:', err);\\r\\n      alert('Failed to assign judge');\\r\\n    } finally {\\r\\n      isSaving = false;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  async function removeJudge(assignmentId) {\\r\\n    if (!confirm('Are you sure you want to remove this judge assignment?')) {\\r\\n      return;\\r\\n    }\\r\\n\\r\\n    try {\\r\\n      await competitionJudgingStore.removeJudge(assignmentId);\\r\\n\\r\\n      // Refresh available judges\\r\\n      await loadData();\\r\\n\\r\\n      showToast('Judge removed successfully', 'success');\\r\\n\\r\\n    } catch (err) {\\r\\n      console.error('Error removing judge:', err);\\r\\n      alert('Failed to remove judge');\\r\\n    }\\r\\n  }\\r\\n\\r\\n  async function assignAllMembers() {\\r\\n    if (!confirm(\`Are you sure you want to assign all \${availableJudges.length} available members as club judges for this intraclub competition?\`)) {\\r\\n      return;\\r\\n    }\\r\\n\\r\\n    try {\\r\\n      isSaving = true;\\r\\n\\r\\n      // Assign all available judges\\r\\n      for (const member of availableJudges) {\\r\\n        await competitionJudgingStore.assignJudge(competitionId, {\\r\\n          judge_id: member.id,\\r\\n          judge_role: JUDGE_ROLES.CLUB_JUDGE,\\r\\n          assignment_notes: 'Auto-assigned for intraclub competition',\\r\\n          assigned_by: $userProfile.id\\r\\n        });\\r\\n      }\\r\\n\\r\\n      // Refresh the data\\r\\n      await loadData();\\r\\n\\r\\n      showToast(\`Successfully assigned \${availableJudges.length} judges\`, 'success');\\r\\n\\r\\n    } catch (err) {\\r\\n      console.error('Error assigning all judges:', err);\\r\\n      alert('Failed to assign all judges');\\r\\n    } finally {\\r\\n      isSaving = false;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  async function refreshJudges() {\\r\\n    try {\\r\\n      isRefreshing = true;\\r\\n\\r\\n      // Reload available judges (all members)\\r\\n      const { data: membersData, error: membersError } = await supabase\\r\\n        .from('members')\\r\\n        .select('id, name, email, phone')\\r\\n        .order('name');\\r\\n\\r\\n      if (membersError) throw membersError;\\r\\n\\r\\n      // Filter out already assigned judges\\r\\n      const assignedJudgeIds = new Set($judgeList.map(j => j.judge_id));\\r\\n      availableJudges = membersData.filter(member => !assignedJudgeIds.has(member.id));\\r\\n\\r\\n      showToast(\`Refreshed judges list - \${availableJudges.length} available\`, 'success');\\r\\n\\r\\n    } catch (err) {\\r\\n      console.error('Error refreshing judges:', err);\\r\\n      alert('Failed to refresh judges list');\\r\\n    } finally {\\r\\n      isRefreshing = false;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function getRoleDisplayName(role) {\\r\\n    switch (role) {\\r\\n      case JUDGE_ROLES.BJCP_JUDGE:\\r\\n        return 'BJCP Certified Judge';\\r\\n      case JUDGE_ROLES.CLUB_JUDGE:\\r\\n        return 'Club Judge';\\r\\n      case JUDGE_ROLES.GUEST_JUDGE:\\r\\n        return 'Guest Judge';\\r\\n      default:\\r\\n        return role;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function getStatusBadgeClass(competition) {\\r\\n    const now = new Date();\\r\\n    const deadline = new Date(competition.entry_deadline);\\r\\n    const judgingDate = new Date(competition.judging_date);\\r\\n\\r\\n    if (competition.results_published) {\\r\\n      return 'status-completed';\\r\\n    } else if (now > deadline && now <= judgingDate) {\\r\\n      return 'status-judging';\\r\\n    } else if (now <= deadline) {\\r\\n      return 'status-open';\\r\\n    } else {\\r\\n      return 'status-judging';\\r\\n    }\\r\\n  }\\r\\n\\r\\n  // Simple toast notification\\r\\n  function showToast(message, type = 'info') {\\r\\n    const toast = document.createElement('div');\\r\\n    toast.textContent = message;\\r\\n    toast.style.cssText = \`\\r\\n      position: fixed;\\r\\n      top: 20px;\\r\\n      right: 20px;\\r\\n      padding: 1rem 1.5rem;\\r\\n      border-radius: 6px;\\r\\n      color: white;\\r\\n      font-weight: 500;\\r\\n      z-index: 1000;\\r\\n      background: \${type === 'success' ? '#059669' : type === 'error' ? '#dc2626' : '#6b7280'};\\r\\n      box-shadow: 0 4px 12px rgba(0,0,0,0.15);\\r\\n    \`;\\r\\n\\r\\n    document.body.appendChild(toast);\\r\\n    setTimeout(() => document.body.removeChild(toast), 3000);\\r\\n  }\\r\\n<\/script>\\r\\n\\r\\n<style>\\r\\n\\r\\n  .competition-info {\\r\\n    background: white;\\r\\n    padding: 1.5rem;\\r\\n    border-radius: 6px;\\r\\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\\r\\n    border-left: 4px solid #ff3e00;\\r\\n    margin-bottom: 2rem;\\r\\n  }\\r\\n\\r\\n  .competition-info h2 {\\r\\n    margin: 0 0 1rem 0;\\r\\n    color: #333;\\r\\n    font-size: 1.5rem;\\r\\n  }\\r\\n\\r\\n  .status-badge {\\r\\n    display: inline-block;\\r\\n    padding: 0.25rem 0.75rem;\\r\\n    border-radius: 12px;\\r\\n    font-size: 0.875rem;\\r\\n    font-weight: 500;\\r\\n  }\\r\\n\\r\\n  .status-completed { background: #dcfce7; color: #166534; }\\r\\n  .status-judging { background: #fef3c7; color: #92400e; }\\r\\n  .status-open { background: #dbeafe; color: #1d4ed8; }\\r\\n\\r\\n  .controls {\\r\\n    display: flex;\\r\\n    gap: 1rem;\\r\\n    margin-bottom: 2rem;\\r\\n    align-items: center;\\r\\n    flex-wrap: wrap;\\r\\n  }\\r\\n\\r\\n\\r\\n  .judges-section {\\r\\n    background: white;\\r\\n    border-radius: 6px;\\r\\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\\r\\n    overflow: hidden;\\r\\n  }\\r\\n\\r\\n  .section-header {\\r\\n    padding: 1.5rem;\\r\\n    border-bottom: 1px solid #eee;\\r\\n    display: flex;\\r\\n    justify-content: space-between;\\r\\n    align-items: center;\\r\\n  }\\r\\n\\r\\n  .judges-list {\\r\\n    padding: 1rem;\\r\\n  }\\r\\n\\r\\n  .judge-card {\\r\\n    background: #f9f9f9;\\r\\n    border-radius: 6px;\\r\\n    padding: 1rem;\\r\\n    margin-bottom: 1rem;\\r\\n    display: flex;\\r\\n    justify-content: space-between;\\r\\n    align-items: center;\\r\\n  }\\r\\n\\r\\n  .judge-info h4 {\\r\\n    margin: 0 0 0.25rem 0;\\r\\n    color: #333;\\r\\n  }\\r\\n\\r\\n  .judge-info p {\\r\\n    margin: 0;\\r\\n    color: #666;\\r\\n    font-size: 0.9rem;\\r\\n  }\\r\\n\\r\\n  .role-badge {\\r\\n    display: inline-block;\\r\\n    padding: 0.25rem 0.5rem;\\r\\n    background: #e5e7eb;\\r\\n    border-radius: 4px;\\r\\n    font-size: 0.8rem;\\r\\n    font-weight: 500;\\r\\n    margin-top: 0.5rem;\\r\\n  }\\r\\n\\r\\n  .add-judge-form {\\r\\n    background: #f9f9f9;\\r\\n    padding: 1.5rem;\\r\\n    border-top: 1px solid #eee;\\r\\n  }\\r\\n\\r\\n  .form-group {\\r\\n    margin-bottom: 1rem;\\r\\n  }\\r\\n\\r\\n  .form-group label {\\r\\n    display: block;\\r\\n    margin-bottom: 0.5rem;\\r\\n    font-weight: 500;\\r\\n    color: #333;\\r\\n  }\\r\\n\\r\\n  .form-control {\\r\\n    width: 100%;\\r\\n    padding: 0.75rem;\\r\\n    border: 1px solid #ddd;\\r\\n    border-radius: 4px;\\r\\n    font-size: 1rem;\\r\\n  }\\r\\n\\r\\n  .form-actions {\\r\\n    display: flex;\\r\\n    gap: 0.5rem;\\r\\n    flex-wrap: wrap;\\r\\n  }\\r\\n\\r\\n\\r\\n  @media (max-width: 768px) {\\r\\n    .controls {\\r\\n      flex-direction: column;\\r\\n      align-items: stretch;\\r\\n    }\\r\\n\\r\\n    .judge-card {\\r\\n      flex-direction: column;\\r\\n      align-items: start;\\r\\n      gap: 1rem;\\r\\n    }\\r\\n\\r\\n    .form-actions {\\r\\n      justify-content: stretch;\\r\\n    }\\r\\n\\r\\n    .btn {\\r\\n      flex: 1;\\r\\n    }\\r\\n  }\\r\\n</style>\\r\\n\\r\\n<Container size=\\"lg\\">\\r\\n  <Hero title=\\"Manage Judges\\" subtitle=\\"Assign judges to competition\\" icon=\\"👩‍⚖️\\" center={true} />\\r\\n\\r\\n  {#if isLoading}\\r\\n    <LoadingSpinner message=\\"Loading competition data...\\" />\\r\\n  {:else if competition}\\r\\n    <!-- Competition Info -->\\r\\n    <div class=\\"competition-info\\">\\r\\n      <h2>{competition.name}</h2>\\r\\n      <p>\\r\\n        <span class=\\"status-badge {getStatusBadgeClass(competition)}\\">\\r\\n          {competition.results_published ? 'Results Published' : \\r\\n           new Date() > new Date(competition.entry_deadline) ? 'Judging Phase' : 'Entry Phase'}\\r\\n        </span>\\r\\n      </p>\\r\\n    </div>\\r\\n\\r\\n    <!-- Controls -->\\r\\n    <div class=\\"controls\\">\\r\\n      <Button\\r\\n        variant=\\"success\\"\\r\\n        on:click={() => showAddForm = !showAddForm}\\r\\n        disabled={availableJudges.length === 0}\\r\\n      >\\r\\n        {showAddForm ? 'Cancel' : 'Add Judge'}\\r\\n      </Button>\\r\\n      {#if competition.competition_type === 'intraclub' && availableJudges.length > 0}\\r\\n        <Button\\r\\n          variant=\\"primary\\"\\r\\n          on:click={assignAllMembers}\\r\\n          disabled={isSaving}\\r\\n        >\\r\\n          {isSaving ? 'Assigning...' : \`Assign All Members (\${availableJudges.length})\`}\\r\\n        </Button>\\r\\n      {/if}\\r\\n      <Button\\r\\n        variant=\\"secondary\\"\\r\\n        on:click={refreshJudges}\\r\\n        disabled={isRefreshing}\\r\\n        title=\\"Refresh the list of available judges\\"\\r\\n      >\\r\\n        {isRefreshing ? 'Refreshing...' : 'Refresh Judges'}\\r\\n      </Button>\\r\\n      <Button variant=\\"secondary\\" on:click={() => goto('/officers/manage-competitions')}>\\r\\n        Back to Competitions\\r\\n      </Button>\\r\\n    </div>\\r\\n\\r\\n    <!-- Judges Section -->\\r\\n    <div class=\\"judges-section\\">\\r\\n      <div class=\\"section-header\\">\\r\\n        <h3>Assigned Judges ({$judgeList.length})</h3>\\r\\n      </div>\\r\\n\\r\\n      {#if $isLoadingJudges}\\r\\n        <LoadingSpinner message=\\"Loading judges...\\" />\\r\\n      {:else if $judgeList.length === 0}\\r\\n        <EmptyState\\r\\n          icon=\\"👩‍⚖️\\"\\r\\n          title=\\"No judges assigned yet\\"\\r\\n          message=\\"Add judges to start the judging process\\"\\r\\n        />\\r\\n      {:else}\\r\\n        <div class=\\"judges-list\\">\\r\\n          {#each $judgeList as judgeAssignment}\\r\\n            <div class=\\"judge-card\\">\\r\\n              <div class=\\"judge-info\\">\\r\\n                <h4>{judgeAssignment.judge?.name || 'Unknown Judge'}</h4>\\r\\n                <p>{judgeAssignment.judge?.email}</p>\\r\\n                <span class=\\"role-badge\\">{getRoleDisplayName(judgeAssignment.judge_role)}</span>\\r\\n                {#if judgeAssignment.assignment_notes}\\r\\n                  <p style=\\"margin-top: 0.5rem; font-style: italic;\\">{judgeAssignment.assignment_notes}</p>\\r\\n                {/if}\\r\\n              </div>\\r\\n              <button \\r\\n                class=\\"btn btn-secondary\\"\\r\\n                style=\\"padding: 0.5rem 1rem;\\"\\r\\n                on:click={() => removeJudge(judgeAssignment.id)}\\r\\n              >\\r\\n                Remove\\r\\n              </button>\\r\\n            </div>\\r\\n          {/each}\\r\\n        </div>\\r\\n      {/if}\\r\\n\\r\\n      <!-- Add Judge Form -->\\r\\n      {#if showAddForm}\\r\\n        <div class=\\"add-judge-form\\">\\r\\n          <h4>Add New Judge</h4>\\r\\n          \\r\\n          {#if availableJudges.length === 0}\\r\\n            <p>All members are already assigned as judges for this competition.</p>\\r\\n          {:else}\\r\\n            <div class=\\"form-group\\">\\r\\n              <label for=\\"judge-select\\">Select Judge</label>\\r\\n              <select \\r\\n                id=\\"judge-select\\"\\r\\n                class=\\"form-control\\" \\r\\n                bind:value={newJudgeForm.judge_id}\\r\\n              >\\r\\n                <option value=\\"\\">Choose a judge...</option>\\r\\n                {#each availableJudges as judge}\\r\\n                  <option value={judge.id}>{judge.name} ({judge.email})</option>\\r\\n                {/each}\\r\\n              </select>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\"form-group\\">\\r\\n              <label for=\\"judge-role\\">Judge Role</label>\\r\\n              <select \\r\\n                id=\\"judge-role\\"\\r\\n                class=\\"form-control\\" \\r\\n                bind:value={newJudgeForm.judge_role}\\r\\n              >\\r\\n                <option value={JUDGE_ROLES.CLUB_JUDGE}>Club Judge</option>\\r\\n                <option value={JUDGE_ROLES.BJCP_JUDGE}>BJCP Certified Judge</option>\\r\\n                <option value={JUDGE_ROLES.GUEST_JUDGE}>Guest Judge</option>\\r\\n              </select>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\"form-group\\">\\r\\n              <label for=\\"assignment-notes\\">Assignment Notes (Optional)</label>\\r\\n              <textarea \\r\\n                id=\\"assignment-notes\\"\\r\\n                class=\\"form-control\\"\\r\\n                rows=\\"2\\"\\r\\n                placeholder=\\"Any special instructions or notes for this judge assignment...\\"\\r\\n                bind:value={newJudgeForm.assignment_notes}\\r\\n              ></textarea>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\"form-actions\\">\\r\\n              <Button\\r\\n                variant=\\"success\\"\\r\\n                on:click={addJudge}\\r\\n                disabled={isSaving || !newJudgeForm.judge_id}\\r\\n              >\\r\\n                {isSaving ? 'Adding...' : 'Add Judge'}\\r\\n              </Button>\\r\\n              <Button\\r\\n                variant=\\"secondary\\"\\r\\n                on:click={() => showAddForm = false}\\r\\n                disabled={isSaving}\\r\\n              >\\r\\n                Cancel\\r\\n              </Button>\\r\\n            </div>\\r\\n          {/if}\\r\\n        </div>\\r\\n      {/if}\\r\\n    </div>\\r\\n\\r\\n    {#if $judgeError}\\r\\n      <div style=\\"background: #fecaca; color: #dc2626; padding: 1rem; border-radius: 4px; margin-top: 1rem;\\">\\r\\n        Error: {$judgeError}\\r\\n      </div>\\r\\n    {/if}\\r\\n  {/if}\\r\\n</Container>"],"names":[],"mappings":"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"}`
};
const Page = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $$unsubscribe_judgeList;
  let $userProfile, $$unsubscribe_userProfile;
  let $page, $$unsubscribe_page;
  let $$unsubscribe_isLoadingJudges;
  let $$unsubscribe_judgeError;
  $$unsubscribe_judgeList = subscribe(judgeList, (value) => value);
  $$unsubscribe_userProfile = subscribe(userProfile, (value) => $userProfile = value);
  $$unsubscribe_page = subscribe(page, (value) => $page = value);
  $$unsubscribe_isLoadingJudges = subscribe(isLoadingJudges, (value) => value);
  $$unsubscribe_judgeError = subscribe(judgeError, (value) => value);
  $$result.css.add(css);
  {
    if ($userProfile && !$userProfile.is_officer) {
      goto();
    }
  }
  $page.params.id;
  $$unsubscribe_judgeList();
  $$unsubscribe_userProfile();
  $$unsubscribe_page();
  $$unsubscribe_isLoadingJudges();
  $$unsubscribe_judgeError();
  return `   ${validate_component(Container, "Container").$$render($$result, { size: "lg" }, {}, {
    default: () => {
      return `${validate_component(Hero, "Hero").$$render(
        $$result,
        {
          title: "Manage Judges",
          subtitle: "Assign judges to competition",
          icon: "👩‍⚖️",
          center: true
        },
        {},
        {}
      )} ${`${validate_component(LoadingSpinner, "LoadingSpinner").$$render($$result, { message: "Loading competition data..." }, {}, {})}`}`;
    }
  })}`;
});

export { Page as default };
//# sourceMappingURL=_page.svelte-BQqkq8tQ.js.map

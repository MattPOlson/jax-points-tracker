{"version":3,"file":"_page.svelte-tQ3PzsSH.js","sources":["../../../.svelte-kit/adapter-node/entries/pages/officers/manage-competitions/results/_id_/_page.svelte.js"],"sourcesContent":["import { c as create_ssr_component, h as subscribe, o as onDestroy } from \"../../../../../../chunks/ssr.js\";\nimport { g as goto } from \"../../../../../../chunks/client.js\";\nimport { p as page } from \"../../../../../../chunks/stores.js\";\nimport { u as userProfile } from \"../../../../../../chunks/userProfile.js\";\nimport \"../../../../../../chunks/supabaseClient.js\";\nconst css = {\n  code: \".container.svelte-h1okl1.svelte-h1okl1{max-width:1400px;margin:0 auto;padding:1rem}.hero.svelte-h1okl1.svelte-h1okl1{text-align:center;margin-bottom:3rem}.hero.svelte-h1okl1 h1.svelte-h1okl1{color:#ff3e00;text-transform:uppercase;font-size:4rem;font-weight:100;margin:0 0 0.25em;line-height:1.1}.hero.svelte-h1okl1 .subtitle.svelte-h1okl1{font-size:1.2rem;color:#333;font-weight:500}.competition-info.svelte-h1okl1.svelte-h1okl1{background:white;padding:1.5rem;border-radius:6px;box-shadow:0 2px 4px rgba(0, 0, 0, 0.1);border-left:4px solid #ff3e00;margin-bottom:2rem}.competition-info.svelte-h1okl1 h2.svelte-h1okl1{margin:0 0 1rem 0;color:#333;text-transform:none;font-size:1.5rem;font-weight:600}.info-grid.svelte-h1okl1.svelte-h1okl1{display:grid;grid-template-columns:repeat(auto-fit, minmax(200px, 1fr));gap:1rem}.info-item.svelte-h1okl1.svelte-h1okl1{display:flex;flex-direction:column}.info-label.svelte-h1okl1.svelte-h1okl1{font-size:0.875rem;color:#666;margin-bottom:0.25rem}.info-value.svelte-h1okl1.svelte-h1okl1{font-size:1.1rem;font-weight:600;color:#333}.status-badge.svelte-h1okl1.svelte-h1okl1{display:inline-block;padding:0.25rem 0.75rem;border-radius:12px;font-size:0.875rem;font-weight:500}.status-completed.svelte-h1okl1.svelte-h1okl1{background:#dcfce7;color:#166534}.status-judging.svelte-h1okl1.svelte-h1okl1{background:#fef3c7;color:#92400e}.controls.svelte-h1okl1.svelte-h1okl1{display:flex;gap:1rem;margin-bottom:2rem;flex-wrap:wrap;align-items:center}.search-input.svelte-h1okl1.svelte-h1okl1,.filter-select.svelte-h1okl1.svelte-h1okl1{padding:0.75rem;border:1px solid #ddd;border-radius:6px;font-size:1rem;background:white}.search-input.svelte-h1okl1.svelte-h1okl1{flex:1;min-width:250px}.filter-select.svelte-h1okl1.svelte-h1okl1{min-width:150px}.btn.svelte-h1okl1.svelte-h1okl1{padding:0.75rem 1.5rem;border:none;border-radius:6px;font-size:1rem;cursor:pointer;transition:all 0.3s ease;text-decoration:none;display:inline-block}.btn.svelte-h1okl1.svelte-h1okl1:disabled{opacity:0.6;cursor:not-allowed}.btn-primary.svelte-h1okl1.svelte-h1okl1{background:#ff3e00;color:white}.btn-primary.svelte-h1okl1.svelte-h1okl1:hover:not(:disabled){background:#e63600}.btn-secondary.svelte-h1okl1.svelte-h1okl1{background:#6b7280;color:white}.btn-secondary.svelte-h1okl1.svelte-h1okl1:hover:not(:disabled){background:#4b5563}.btn-success.svelte-h1okl1.svelte-h1okl1{background:#059669;color:white}.btn-success.svelte-h1okl1.svelte-h1okl1:hover:not(:disabled){background:#047857}.results-table.svelte-h1okl1.svelte-h1okl1{background:white;border-radius:6px;overflow:hidden;box-shadow:0 2px 4px rgba(0, 0, 0, 0.1)}table.svelte-h1okl1.svelte-h1okl1{width:100%;border-collapse:collapse}th.svelte-h1okl1.svelte-h1okl1{background:#f5f5f5;padding:1rem;text-align:left;font-weight:600;color:#333;border-bottom:2px solid #ddd}td.svelte-h1okl1.svelte-h1okl1{padding:1rem;border-bottom:1px solid #eee;vertical-align:top}tr.svelte-h1okl1.svelte-h1okl1:hover{background:#f9f9f9}.entry-number.svelte-h1okl1.svelte-h1okl1{font-weight:600;color:#ff3e00}.category-badge.svelte-h1okl1.svelte-h1okl1{display:inline-block;padding:0.25rem 0.5rem;background:#e5e7eb;border-radius:4px;font-size:0.875rem;font-weight:500}.score-input.svelte-h1okl1.svelte-h1okl1{padding:0.5rem;border:1px solid #ddd;border-radius:4px;font-size:0.9rem;width:80px}.placement-select.svelte-h1okl1.svelte-h1okl1{padding:0.5rem;border:1px solid #ddd;border-radius:4px;font-size:0.9rem;background:white;width:120px}.notes-input.svelte-h1okl1.svelte-h1okl1{width:100%;min-height:60px;padding:0.5rem;border:1px solid #ddd;border-radius:4px;font-size:0.9rem;resize:vertical;font-family:inherit}.status-complete.svelte-h1okl1.svelte-h1okl1{color:#059669}.status-pending.svelte-h1okl1.svelte-h1okl1{color:#dc2626}.unsaved-indicator.svelte-h1okl1.svelte-h1okl1{color:#dc2626;font-size:0.75rem;margin-left:0.5rem}.loading.svelte-h1okl1.svelte-h1okl1,.empty-state.svelte-h1okl1.svelte-h1okl1{text-align:center;padding:3rem;color:#666}.spinner.svelte-h1okl1.svelte-h1okl1{display:inline-block;width:40px;height:40px;border:4px solid #f3f3f3;border-top:4px solid #ff3e00;border-radius:50%;animation:svelte-h1okl1-spin 1s linear infinite;margin-bottom:1rem}@keyframes svelte-h1okl1-spin{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}.entry-cards.svelte-h1okl1.svelte-h1okl1{display:none}.entry-card.svelte-h1okl1.svelte-h1okl1{background:white;border-radius:6px;padding:1.5rem;margin-bottom:1rem;box-shadow:0 2px 4px rgba(0, 0, 0, 0.1);border-left:4px solid #ff3e00}.entry-header.svelte-h1okl1.svelte-h1okl1{display:flex;justify-content:space-between;align-items:center;margin-bottom:1rem}.results-inputs.svelte-h1okl1.svelte-h1okl1{display:grid;grid-template-columns:1fr 1fr;gap:0.75rem;margin-top:0.75rem}@media(max-width: 768px){.hero.svelte-h1okl1 h1.svelte-h1okl1{font-size:2.5rem}.controls.svelte-h1okl1.svelte-h1okl1{flex-direction:column;align-items:stretch}.search-input.svelte-h1okl1.svelte-h1okl1,.filter-select.svelte-h1okl1.svelte-h1okl1{width:100%}.results-table.svelte-h1okl1.svelte-h1okl1{display:none}.entry-cards.svelte-h1okl1.svelte-h1okl1{display:block}.results-inputs.svelte-h1okl1.svelte-h1okl1{grid-template-columns:1fr}.info-grid.svelte-h1okl1.svelte-h1okl1{grid-template-columns:1fr}}@media(max-width: 480px){.container.svelte-h1okl1.svelte-h1okl1{padding:0.5rem}.hero.svelte-h1okl1 h1.svelte-h1okl1{font-size:2rem}}\",\n  map: `{\"version\":3,\"file\":\"+page.svelte\",\"sources\":[\"+page.svelte\"],\"sourcesContent\":[\"<!-- src/routes/officers/manage-competitions/results/[id]/+page.svelte -->\\\\n<script>\\\\n  import { onMount, onDestroy } from 'svelte';\\\\n  import { goto } from '$app/navigation';\\\\n  import { page } from '$app/stores';\\\\n  import { userProfile } from '$lib/stores/userProfile';\\\\n  import { supabase } from '$lib/supabaseClient';\\\\n  \\\\n  // Check officer status\\\\n  $: if ($userProfile && !$userProfile.is_officer) {\\\\n    goto('/');\\\\n  }\\\\n\\\\n  // Get competition ID from URL\\\\n  $: competitionId = $page.params.id;\\\\n\\\\n  let competition = null;\\\\n  let entries = [];\\\\n  let filteredEntries = [];\\\\n  let categories = [];\\\\n  let isLoading = true;\\\\n  let isSaving = false;\\\\n  let searchQuery = '';\\\\n  let categoryFilter = 'all';\\\\n  let statusFilter = 'all';\\\\n  let unsavedChanges = new Set();\\\\n\\\\n  // Results tracking\\\\n  let resultsData = new Map();\\\\n\\\\n  onMount(() => {\\\\n    loadCompetitionAndEntries();\\\\n    setupEventHandlers();\\\\n  });\\\\n\\\\n  // Removed tab switching reload - causes issues with Supabase tab switching\\\\n  function setupEventHandlers() {\\\\n    // Tab visibility handling removed for better Supabase compatibility\\\\n    return () => {\\\\n      // No cleanup needed now\\\\n    };\\\\n  }\\\\n\\\\n  onDestroy(() => {\\\\n    // Cleanup handled by setupEventHandlers return\\\\n  });\\\\n\\\\n  // Load competition and entries data\\\\n  async function loadCompetitionAndEntries() {\\\\n    isLoading = true;\\\\n    \\\\n    try {\\\\n      // Load competition details\\\\n      const { data: compData, error: compError } = await supabase\\\\n        .from('competitions')\\\\n        .select('*')\\\\n        .eq('id', competitionId)\\\\n        .single();\\\\n      \\\\n      if (compError) throw compError;\\\\n      competition = compData;\\\\n\\\\n      // Load entries with separate queries to avoid schema cache issues\\\\n      const { data: entriesData, error: entriesError } = await supabase\\\\n        .from('competition_entries')\\\\n        .select('*')\\\\n        .eq('competition_id', competitionId)\\\\n        .order('entry_number');\\\\n      \\\\n      if (entriesError) throw entriesError;\\\\n\\\\n      if (!entriesData || entriesData.length === 0) {\\\\n        entries = [];\\\\n        filteredEntries = [];\\\\n        isLoading = false;\\\\n        return;\\\\n      }\\\\n\\\\n      // Get member data\\\\n      const memberIds = [...new Set(entriesData.map(entry => entry.member_id))];\\\\n      const { data: membersData } = await supabase\\\\n        .from('members')\\\\n        .select('id, name, email')\\\\n        .in('id', memberIds);\\\\n\\\\n      // Get category data  \\\\n      const categoryIds = [...new Set(entriesData.map(entry => entry.bjcp_category_id).filter(Boolean))];\\\\n      const { data: categoriesData } = await supabase\\\\n        .from('bjcp_categories')\\\\n        .select('id, category_name, category_number, subcategory_letter, subcategory_name')\\\\n        .in('id', categoryIds);\\\\n\\\\n      // Get existing results\\\\n      const { data: resultsData, error: resultsError } = await supabase\\\\n        .from('competition_results')\\\\n        .select('*')\\\\n        .eq('competition_id', competitionId);\\\\n\\\\n      if (resultsError) {\\\\n        console.warn('No existing results found:', resultsError);\\\\n      }\\\\n\\\\n      // Combine all data manually\\\\n      entries = entriesData.map(entry => {\\\\n        const member = membersData?.find(m => m.id === entry.member_id);\\\\n        const category = categoriesData?.find(c => c.id === entry.bjcp_category_id);\\\\n        const result = resultsData?.find(r => r.entry_id === entry.id);\\\\n\\\\n        return {\\\\n          ...entry,\\\\n          member_name: member?.name || 'Unknown',\\\\n          member_email: member?.email || '',\\\\n          category_name: category?.category_name || 'Unknown Category',\\\\n          category_number: category?.category_number || '',\\\\n          subcategory_letter: category?.subcategory_letter || '',\\\\n          subcategory_name: category?.subcategory_name || '',\\\\n          category_display: category \\\\n            ? \\`\\${category.category_number}\\${category.subcategory_letter || ''} - \\${category.category_name}\\`\\\\n            : 'Unknown Category',\\\\n          // Results data\\\\n          score: result?.score || '',\\\\n          placement: result?.placement || '',\\\\n          judge_notes: result?.judge_notes || '',\\\\n          has_results: !!result\\\\n        };\\\\n      });\\\\n\\\\n      // Extract unique categories for filter\\\\n      categories = [...new Set(entries.map(e => ({\\\\n        value: \\`\\${e.category_number}\\${e.subcategory_letter}\\`,\\\\n        label: e.category_display\\\\n      }))).values()].sort((a, b) => a.value.localeCompare(b.value));\\\\n\\\\n      filterEntries();\\\\n      \\\\n    } catch (err) {\\\\n      console.error('Error loading data:', err);\\\\n      alert('Failed to load competition entries');\\\\n      goto('/officers/manage-competitions');\\\\n    } finally {\\\\n      isLoading = false;\\\\n    }\\\\n  }\\\\n\\\\n  // Filter entries based on search and filters\\\\n  function filterEntries() {\\\\n    let filtered = [...entries];\\\\n    \\\\n    // Apply search filter\\\\n    if (searchQuery.trim()) {\\\\n      const query = searchQuery.toLowerCase();\\\\n      filtered = filtered.filter(entry => \\\\n        entry.entry_number?.toLowerCase().includes(query) ||\\\\n        entry.beer_name?.toLowerCase().includes(query) ||\\\\n        entry.member_name?.toLowerCase().includes(query) ||\\\\n        entry.member_email?.toLowerCase().includes(query) ||\\\\n        entry.category_display?.toLowerCase().includes(query)\\\\n      );\\\\n    }\\\\n    \\\\n    // Apply category filter\\\\n    if (categoryFilter !== 'all') {\\\\n      filtered = filtered.filter(entry => \\\\n        \\`\\${entry.category_number}\\${entry.subcategory_letter}\\` === categoryFilter\\\\n      );\\\\n    }\\\\n\\\\n    // Apply status filter\\\\n    if (statusFilter !== 'all') {\\\\n      if (statusFilter === 'complete') {\\\\n        filtered = filtered.filter(entry => entry.has_results && entry.score);\\\\n      } else if (statusFilter === 'pending') {\\\\n        filtered = filtered.filter(entry => !entry.has_results || !entry.score);\\\\n      }\\\\n    }\\\\n    \\\\n    filteredEntries = filtered;\\\\n  }\\\\n\\\\n  // Update entry results\\\\n  function updateEntryResults(entryId, field, value) {\\\\n    const entry = entries.find(e => e.id === entryId);\\\\n    if (entry) {\\\\n      entry[field] = value;\\\\n      unsavedChanges.add(entryId);\\\\n      // Trigger Svelte reactivity for Set\\\\n      unsavedChanges = unsavedChanges;\\\\n      \\\\n      // Update has_results status\\\\n      entry.has_results = entry.score && entry.score > 0;\\\\n      \\\\n      // Re-filter to update status indicators\\\\n      filterEntries();\\\\n    }\\\\n  }\\\\n\\\\n  // Save individual entry results\\\\n  async function saveEntryResults(entryId, skipToast = false) {\\\\n    const entry = entries.find(e => e.id === entryId);\\\\n    if (!entry) {\\\\n      throw new Error(\\`Entry with ID \\${entryId} not found\\`);\\\\n    }\\\\n\\\\n    const wasCalledFromSaveAll = skipToast;\\\\n    if (!wasCalledFromSaveAll) {\\\\n      isSaving = true;\\\\n    }\\\\n\\\\n    try {\\\\n      const resultData = {\\\\n        competition_id: competitionId,\\\\n        entry_id: entryId,\\\\n        score: entry.score || null,\\\\n        placement: entry.placement || null,\\\\n        judge_notes: entry.judge_notes || null,\\\\n        updated_at: new Date().toISOString()\\\\n      };\\\\n\\\\n      // Check if result exists\\\\n      const { data: existingResult } = await supabase\\\\n        .from('competition_results')\\\\n        .select('id')\\\\n        .eq('competition_id', competitionId)\\\\n        .eq('entry_id', entryId)\\\\n        .single();\\\\n\\\\n      let error;\\\\n      if (existingResult) {\\\\n        // Update existing result\\\\n        const result = await supabase\\\\n          .from('competition_results')\\\\n          .update(resultData)\\\\n          .eq('id', existingResult.id);\\\\n        error = result.error;\\\\n      } else {\\\\n        // Insert new result\\\\n        const result = await supabase\\\\n          .from('competition_results')\\\\n          .insert([resultData]);\\\\n        error = result.error;\\\\n      }\\\\n\\\\n      if (error) throw error;\\\\n\\\\n      unsavedChanges.delete(entryId);\\\\n      // Trigger Svelte reactivity for Set\\\\n      unsavedChanges = unsavedChanges;\\\\n      entry.has_results = true;\\\\n      \\\\n      // Show success feedback only for individual saves\\\\n      if (!skipToast) {\\\\n        showToast('Results saved successfully', 'success');\\\\n      }\\\\n\\\\n    } catch (err) {\\\\n      console.error('Error saving results:', err);\\\\n      if (!skipToast) {\\\\n        alert('Failed to save results');\\\\n      }\\\\n      throw err; // Re-throw for saveAllResults to handle\\\\n    } finally {\\\\n      if (!wasCalledFromSaveAll) {\\\\n        isSaving = false;\\\\n      }\\\\n    }\\\\n  }\\\\n\\\\n  // Save all results\\\\n  async function saveAllResults() {\\\\n    if (unsavedChanges.size === 0) {\\\\n      alert('No unsaved changes to save');\\\\n      return;\\\\n    }\\\\n\\\\n    try {\\\\n      isSaving = true;\\\\n      let successCount = 0;\\\\n      let errorCount = 0;\\\\n      \\\\n      // Process each entry sequentially to avoid race conditions\\\\n      for (const entryId of Array.from(unsavedChanges)) {\\\\n        try {\\\\n          await saveEntryResults(entryId, true);\\\\n          successCount++;\\\\n        } catch (err) {\\\\n          console.error(\\`Error saving entry \\${entryId}:\\`, err);\\\\n          errorCount++;\\\\n        }\\\\n      }\\\\n      \\\\n      if (errorCount === 0) {\\\\n        showToast(\\`All \\${successCount} results saved successfully\\`, 'success');\\\\n      } else {\\\\n        showToast(\\`\\${successCount} results saved, \\${errorCount} failed\\`, errorCount > successCount ? 'error' : 'success');\\\\n      }\\\\n    } catch (err) {\\\\n      console.error('Error saving all results:', err);\\\\n      alert('Failed to save all results');\\\\n    } finally {\\\\n      isSaving = false;\\\\n    }\\\\n  }\\\\n\\\\n  // Publish results (make them visible to public)\\\\n  async function publishResults() {\\\\n    if (!confirm('Are you sure you want to publish these results? This will make them visible to all members.')) {\\\\n      return;\\\\n    }\\\\n\\\\n    try {\\\\n      isSaving = true;\\\\n\\\\n      const { error } = await supabase\\\\n        .from('competitions')\\\\n        .update({ \\\\n          results_published: true,\\\\n          updated_at: new Date().toISOString()\\\\n        })\\\\n        .eq('id', competitionId);\\\\n\\\\n      if (error) throw error;\\\\n\\\\n      competition.results_published = true;\\\\n      showToast('Results published successfully', 'success');\\\\n\\\\n    } catch (err) {\\\\n      console.error('Error publishing results:', err);\\\\n      alert('Failed to publish results');\\\\n    } finally {\\\\n      isSaving = false;\\\\n    }\\\\n  }\\\\n\\\\n  // Simple toast notification\\\\n  function showToast(message, type = 'info') {\\\\n    // Create toast element\\\\n    const toast = document.createElement('div');\\\\n    toast.textContent = message;\\\\n    toast.style.cssText = \\`\\\\n      position: fixed;\\\\n      top: 20px;\\\\n      right: 20px;\\\\n      padding: 1rem 1.5rem;\\\\n      border-radius: 6px;\\\\n      color: white;\\\\n      font-weight: 500;\\\\n      z-index: 1000;\\\\n      background: \\${type === 'success' ? '#059669' : type === 'error' ? '#dc2626' : '#6b7280'};\\\\n      box-shadow: 0 4px 12px rgba(0,0,0,0.15);\\\\n    \\`;\\\\n\\\\n    document.body.appendChild(toast);\\\\n\\\\n    // Remove after 3 seconds\\\\n    setTimeout(() => {\\\\n      document.body.removeChild(toast);\\\\n    }, 3000);\\\\n  }\\\\n\\\\n  // Get completion stats\\\\n  $: completionStats = {\\\\n    total: entries.length,\\\\n    completed: entries.filter(e => e.has_results && e.score).length,\\\\n    get percentage() {\\\\n      return this.total > 0 ? Math.round((this.completed / this.total) * 100) : 0;\\\\n    }\\\\n  };\\\\n\\\\n  // Reactive statements\\\\n  $: filterEntries(), searchQuery, categoryFilter, statusFilter;\\\\n<\\/script>\\\\n\\\\n<style>\\\\n  .container {\\\\n    max-width: 1400px;\\\\n    margin: 0 auto;\\\\n    padding: 1rem;\\\\n  }\\\\n\\\\n  .hero {\\\\n    text-align: center;\\\\n    margin-bottom: 3rem;\\\\n  }\\\\n\\\\n  .hero h1 {\\\\n    color: #ff3e00;\\\\n    text-transform: uppercase;\\\\n    font-size: 4rem;\\\\n    font-weight: 100;\\\\n    margin: 0 0 0.25em;\\\\n    line-height: 1.1;\\\\n  }\\\\n\\\\n  .hero .subtitle {\\\\n    font-size: 1.2rem;\\\\n    color: #333;\\\\n    font-weight: 500;\\\\n  }\\\\n\\\\n  .competition-info {\\\\n    background: white;\\\\n    padding: 1.5rem;\\\\n    border-radius: 6px;\\\\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\\\\n    border-left: 4px solid #ff3e00;\\\\n    margin-bottom: 2rem;\\\\n  }\\\\n\\\\n  .competition-info h2 {\\\\n    margin: 0 0 1rem 0;\\\\n    color: #333;\\\\n    text-transform: none;\\\\n    font-size: 1.5rem;\\\\n    font-weight: 600;\\\\n  }\\\\n\\\\n  .info-grid {\\\\n    display: grid;\\\\n    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\\\\n    gap: 1rem;\\\\n  }\\\\n\\\\n  .info-item {\\\\n    display: flex;\\\\n    flex-direction: column;\\\\n  }\\\\n\\\\n  .info-label {\\\\n    font-size: 0.875rem;\\\\n    color: #666;\\\\n    margin-bottom: 0.25rem;\\\\n  }\\\\n\\\\n  .info-value {\\\\n    font-size: 1.1rem;\\\\n    font-weight: 600;\\\\n    color: #333;\\\\n  }\\\\n\\\\n  .status-badge {\\\\n    display: inline-block;\\\\n    padding: 0.25rem 0.75rem;\\\\n    border-radius: 12px;\\\\n    font-size: 0.875rem;\\\\n    font-weight: 500;\\\\n  }\\\\n\\\\n  .status-completed {\\\\n    background: #dcfce7;\\\\n    color: #166534;\\\\n  }\\\\n\\\\n  .status-judging {\\\\n    background: #fef3c7;\\\\n    color: #92400e;\\\\n  }\\\\n\\\\n  .status-open {\\\\n    background: #dbeafe;\\\\n    color: #1d4ed8;\\\\n  }\\\\n\\\\n  .controls {\\\\n    display: flex;\\\\n    gap: 1rem;\\\\n    margin-bottom: 2rem;\\\\n    flex-wrap: wrap;\\\\n    align-items: center;\\\\n  }\\\\n\\\\n  .search-input, .filter-select {\\\\n    padding: 0.75rem;\\\\n    border: 1px solid #ddd;\\\\n    border-radius: 6px;\\\\n    font-size: 1rem;\\\\n    background: white;\\\\n  }\\\\n\\\\n  .search-input {\\\\n    flex: 1;\\\\n    min-width: 250px;\\\\n  }\\\\n\\\\n  .filter-select {\\\\n    min-width: 150px;\\\\n  }\\\\n\\\\n  .btn {\\\\n    padding: 0.75rem 1.5rem;\\\\n    border: none;\\\\n    border-radius: 6px;\\\\n    font-size: 1rem;\\\\n    cursor: pointer;\\\\n    transition: all 0.3s ease;\\\\n    text-decoration: none;\\\\n    display: inline-block;\\\\n  }\\\\n\\\\n  .btn:disabled {\\\\n    opacity: 0.6;\\\\n    cursor: not-allowed;\\\\n  }\\\\n\\\\n  .btn-primary {\\\\n    background: #ff3e00;\\\\n    color: white;\\\\n  }\\\\n\\\\n  .btn-primary:hover:not(:disabled) {\\\\n    background: #e63600;\\\\n  }\\\\n\\\\n  .btn-secondary {\\\\n    background: #6b7280;\\\\n    color: white;\\\\n  }\\\\n\\\\n  .btn-secondary:hover:not(:disabled) {\\\\n    background: #4b5563;\\\\n  }\\\\n\\\\n  .btn-success {\\\\n    background: #059669;\\\\n    color: white;\\\\n  }\\\\n\\\\n  .btn-success:hover:not(:disabled) {\\\\n    background: #047857;\\\\n  }\\\\n\\\\n  .results-table {\\\\n    background: white;\\\\n    border-radius: 6px;\\\\n    overflow: hidden;\\\\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\\\\n  }\\\\n\\\\n  table {\\\\n    width: 100%;\\\\n    border-collapse: collapse;\\\\n  }\\\\n\\\\n  th {\\\\n    background: #f5f5f5;\\\\n    padding: 1rem;\\\\n    text-align: left;\\\\n    font-weight: 600;\\\\n    color: #333;\\\\n    border-bottom: 2px solid #ddd;\\\\n  }\\\\n\\\\n  td {\\\\n    padding: 1rem;\\\\n    border-bottom: 1px solid #eee;\\\\n    vertical-align: top;\\\\n  }\\\\n\\\\n  tr:hover {\\\\n    background: #f9f9f9;\\\\n  }\\\\n\\\\n  .entry-number {\\\\n    font-weight: 600;\\\\n    color: #ff3e00;\\\\n  }\\\\n\\\\n  .category-badge {\\\\n    display: inline-block;\\\\n    padding: 0.25rem 0.5rem;\\\\n    background: #e5e7eb;\\\\n    border-radius: 4px;\\\\n    font-size: 0.875rem;\\\\n    font-weight: 500;\\\\n  }\\\\n\\\\n  .score-input {\\\\n    padding: 0.5rem;\\\\n    border: 1px solid #ddd;\\\\n    border-radius: 4px;\\\\n    font-size: 0.9rem;\\\\n    width: 80px;\\\\n  }\\\\n\\\\n  .placement-select {\\\\n    padding: 0.5rem;\\\\n    border: 1px solid #ddd;\\\\n    border-radius: 4px;\\\\n    font-size: 0.9rem;\\\\n    background: white;\\\\n    width: 120px;\\\\n  }\\\\n\\\\n  .notes-input {\\\\n    width: 100%;\\\\n    min-height: 60px;\\\\n    padding: 0.5rem;\\\\n    border: 1px solid #ddd;\\\\n    border-radius: 4px;\\\\n    font-size: 0.9rem;\\\\n    resize: vertical;\\\\n    font-family: inherit;\\\\n  }\\\\n\\\\n  .status-complete {\\\\n    color: #059669;\\\\n  }\\\\n\\\\n  .status-pending {\\\\n    color: #dc2626;\\\\n  }\\\\n\\\\n  .unsaved-indicator {\\\\n    color: #dc2626;\\\\n    font-size: 0.75rem;\\\\n    margin-left: 0.5rem;\\\\n  }\\\\n\\\\n  .loading, .empty-state {\\\\n    text-align: center;\\\\n    padding: 3rem;\\\\n    color: #666;\\\\n  }\\\\n\\\\n  .spinner {\\\\n    display: inline-block;\\\\n    width: 40px;\\\\n    height: 40px;\\\\n    border: 4px solid #f3f3f3;\\\\n    border-top: 4px solid #ff3e00;\\\\n    border-radius: 50%;\\\\n    animation: spin 1s linear infinite;\\\\n    margin-bottom: 1rem;\\\\n  }\\\\n\\\\n  @keyframes spin {\\\\n    0% { transform: rotate(0deg); }\\\\n    100% { transform: rotate(360deg); }\\\\n  }\\\\n\\\\n  /* Entry cards for mobile */\\\\n  .entry-cards {\\\\n    display: none;\\\\n  }\\\\n\\\\n  .entry-card {\\\\n    background: white;\\\\n    border-radius: 6px;\\\\n    padding: 1.5rem;\\\\n    margin-bottom: 1rem;\\\\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\\\\n    border-left: 4px solid #ff3e00;\\\\n  }\\\\n\\\\n  .entry-header {\\\\n    display: flex;\\\\n    justify-content: space-between;\\\\n    align-items: center;\\\\n    margin-bottom: 1rem;\\\\n  }\\\\n\\\\n  .results-inputs {\\\\n    display: grid;\\\\n    grid-template-columns: 1fr 1fr;\\\\n    gap: 0.75rem;\\\\n    margin-top: 0.75rem;\\\\n  }\\\\n\\\\n  /* Mobile responsiveness */\\\\n  @media (max-width: 768px) {\\\\n    .hero h1 {\\\\n      font-size: 2.5rem;\\\\n    }\\\\n\\\\n    .controls {\\\\n      flex-direction: column;\\\\n      align-items: stretch;\\\\n    }\\\\n\\\\n    .search-input, .filter-select {\\\\n      width: 100%;\\\\n    }\\\\n\\\\n    .results-table {\\\\n      display: none;\\\\n    }\\\\n\\\\n    .entry-cards {\\\\n      display: block;\\\\n    }\\\\n\\\\n    .results-inputs {\\\\n      grid-template-columns: 1fr;\\\\n    }\\\\n\\\\n    .info-grid {\\\\n      grid-template-columns: 1fr;\\\\n    }\\\\n  }\\\\n\\\\n  @media (max-width: 480px) {\\\\n    .container {\\\\n      padding: 0.5rem;\\\\n    }\\\\n\\\\n    .hero h1 {\\\\n      font-size: 2rem;\\\\n    }\\\\n  }\\\\n</style>\\\\n\\\\n<div class=\\\\\"container\\\\\">\\\\n  <!-- Hero Section -->\\\\n  <div class=\\\\\"hero\\\\\">\\\\n    <h1>Enter Results</h1>\\\\n    <p class=\\\\\"subtitle\\\\\">Record judging scores and placements</p>\\\\n  </div>\\\\n\\\\n  {#if isLoading}\\\\n    <div class=\\\\\"loading\\\\\">\\\\n      <div class=\\\\\"spinner\\\\\"></div>\\\\n      <p>Loading competition entries...</p>\\\\n    </div>\\\\n  {:else if competition}\\\\n    <!-- Competition Info -->\\\\n    <div class=\\\\\"competition-info\\\\\">\\\\n      <h2>{competition.name}</h2>\\\\n      <div class=\\\\\"info-grid\\\\\">\\\\n        <div class=\\\\\"info-item\\\\\">\\\\n          <span class=\\\\\"info-label\\\\\">Status</span>\\\\n          <span class=\\\\\"info-value\\\\\">\\\\n            <span class=\\\\\"status-badge {competition.results_published ? 'status-completed' : 'status-judging'}\\\\\">\\\\n              {competition.results_published ? 'Results Published' : 'Judging In Progress'}\\\\n            </span>\\\\n          </span>\\\\n        </div>\\\\n        <div class=\\\\\"info-item\\\\\">\\\\n          <span class=\\\\\"info-label\\\\\">Total Entries</span>\\\\n          <span class=\\\\\"info-value\\\\\">{completionStats.total}</span>\\\\n        </div>\\\\n        <div class=\\\\\"info-item\\\\\">\\\\n          <span class=\\\\\"info-label\\\\\">Results Entered</span>\\\\n          <span class=\\\\\"info-value\\\\\">{completionStats.completed} of {completionStats.total} ({completionStats.percentage}%)</span>\\\\n        </div>\\\\n        <div class=\\\\\"info-item\\\\\">\\\\n          <span class=\\\\\"info-label\\\\\">Unsaved Changes</span>\\\\n          <span class=\\\\\"info-value {unsavedChanges.size > 0 ? 'status-pending' : 'status-complete'}\\\\\">{unsavedChanges.size}</span>\\\\n        </div>\\\\n      </div>\\\\n    </div>\\\\n\\\\n    <!-- Controls -->\\\\n    <div class=\\\\\"controls\\\\\">\\\\n      <input\\\\n        type=\\\\\"text\\\\\"\\\\n        class=\\\\\"search-input\\\\\"\\\\n        placeholder=\\\\\"Search by entry number, member, or beer name...\\\\\"\\\\n        bind:value={searchQuery}\\\\n      />\\\\n      <select class=\\\\\"filter-select\\\\\" bind:value={categoryFilter}>\\\\n        <option value=\\\\\"all\\\\\">All Categories</option>\\\\n        {#each categories as category}\\\\n          <option value={category.value}>{category.label}</option>\\\\n        {/each}\\\\n      </select>\\\\n      <select class=\\\\\"filter-select\\\\\" bind:value={statusFilter}>\\\\n        <option value=\\\\\"all\\\\\">All Status</option>\\\\n        <option value=\\\\\"pending\\\\\">Results Pending</option>\\\\n        <option value=\\\\\"complete\\\\\">Results Complete</option>\\\\n      </select>\\\\n      <button \\\\n        class=\\\\\"btn btn-success\\\\\" \\\\n        on:click={saveAllResults}\\\\n        disabled={isSaving || unsavedChanges.size === 0}\\\\n      >\\\\n        {isSaving ? 'Saving...' : \\`Save All Results \\${unsavedChanges.size > 0 ? \\`(\\${unsavedChanges.size})\\` : ''}\\`}\\\\n      </button>\\\\n      <button \\\\n        class=\\\\\"btn btn-primary\\\\\" \\\\n        on:click={publishResults}\\\\n        disabled={isSaving || competition.results_published}\\\\n      >\\\\n        {competition.results_published ? 'Results Published' : 'Publish Results'}\\\\n      </button>\\\\n      <button class=\\\\\"btn btn-secondary\\\\\" on:click={() => goto('/officers/manage-competitions')}>\\\\n        Back\\\\n      </button>\\\\n    </div>\\\\n\\\\n    {#if filteredEntries.length === 0}\\\\n      <div class=\\\\\"empty-state\\\\\">\\\\n        <h3>No entries found</h3>\\\\n        <p>\\\\n          {#if searchQuery || categoryFilter !== 'all' || statusFilter !== 'all'}\\\\n            Try adjusting your search or filters\\\\n          {:else}\\\\n            No entries have been submitted yet\\\\n          {/if}\\\\n        </p>\\\\n      </div>\\\\n    {:else}\\\\n      <!-- Desktop Table View -->\\\\n      <div class=\\\\\"results-table\\\\\">\\\\n        <table>\\\\n          <thead>\\\\n            <tr>\\\\n              <th>Entry #</th>\\\\n              <th>Member</th>\\\\n              <th>Beer Name</th>\\\\n              <th>Category</th>\\\\n              <th>Score</th>\\\\n              <th>Placement</th>\\\\n              <th>Status</th>\\\\n              <th>Actions</th>\\\\n            </tr>\\\\n          </thead>\\\\n          <tbody>\\\\n            {#each filteredEntries as entry}\\\\n              <tr>\\\\n                <td><span class=\\\\\"entry-number\\\\\">{entry.entry_number}</span></td>\\\\n                <td>\\\\n                  <div>{entry.member_name}</div>\\\\n                  <small>{entry.member_email}</small>\\\\n                </td>\\\\n                <td>{entry.beer_name || '-'}</td>\\\\n                <td><span class=\\\\\"category-badge\\\\\">{entry.category_display}</span></td>\\\\n                <td>\\\\n                  <input\\\\n                    type=\\\\\"number\\\\\"\\\\n                    class=\\\\\"score-input\\\\\"\\\\n                    placeholder=\\\\\"0-50\\\\\"\\\\n                    min=\\\\\"0\\\\\"\\\\n                    max=\\\\\"50\\\\\"\\\\n                    bind:value={entry.score}\\\\n                    on:input={() => updateEntryResults(entry.id, 'score', entry.score)}\\\\n                  />\\\\n                </td>\\\\n                <td>\\\\n                  <select \\\\n                    class=\\\\\"placement-select\\\\\"\\\\n                    bind:value={entry.placement}\\\\n                    on:change={() => updateEntryResults(entry.id, 'placement', entry.placement)}\\\\n                  >\\\\n                    <option value=\\\\\"\\\\\">No Placement</option>\\\\n                    <option value=\\\\\"1\\\\\">1st Place</option>\\\\n                    <option value=\\\\\"2\\\\\">2nd Place</option>\\\\n                    <option value=\\\\\"3\\\\\">3rd Place</option>\\\\n                    <option value=\\\\\"HM\\\\\">Honorable Mention</option>\\\\n                  </select>\\\\n                </td>\\\\n                <td>\\\\n                  <span class=\\\\\"{entry.has_results && entry.score ? 'status-complete' : 'status-pending'}\\\\\">\\\\n                    {entry.has_results && entry.score ? '✅ Complete' : '❌ Pending'}\\\\n                  </span>\\\\n                  {#if unsavedChanges.has(entry.id)}\\\\n                    <span class=\\\\\"unsaved-indicator\\\\\">*</span>\\\\n                  {/if}\\\\n                </td>\\\\n                <td>\\\\n                  <button \\\\n                    class=\\\\\"btn btn-primary\\\\\" \\\\n                    style=\\\\\"padding: 0.4rem 0.8rem; font-size: 0.85rem;\\\\\"\\\\n                    on:click={() => saveEntryResults(entry.id)}\\\\n                    disabled={isSaving}\\\\n                  >\\\\n                    {isSaving ? 'Saving...' : 'Save'}\\\\n                  </button>\\\\n                </td>\\\\n              </tr>\\\\n            {/each}\\\\n          </tbody>\\\\n        </table>\\\\n      </div>\\\\n\\\\n      <!-- Mobile Card View -->\\\\n      <div class=\\\\\"entry-cards\\\\\">\\\\n        {#each filteredEntries as entry}\\\\n          <div class=\\\\\"entry-card\\\\\">\\\\n            <div class=\\\\\"entry-header\\\\\">\\\\n              <span class=\\\\\"entry-number\\\\\">Entry #{entry.entry_number}</span>\\\\n              <span class=\\\\\"{entry.has_results && entry.score ? 'status-complete' : 'status-pending'}\\\\\">\\\\n                {entry.has_results && entry.score ? '✅ Complete' : '❌ Pending'}\\\\n                {#if unsavedChanges.has(entry.id)}\\\\n                  <span class=\\\\\"unsaved-indicator\\\\\">*</span>\\\\n                {/if}\\\\n              </span>\\\\n            </div>\\\\n            <div style=\\\\\"margin-bottom: 1rem;\\\\\">\\\\n              <div><strong>{entry.member_name}</strong></div>\\\\n              <div>{entry.beer_name || 'No beer name'}</div>\\\\n              <span class=\\\\\"category-badge\\\\\">{entry.category_display}</span>\\\\n            </div>\\\\n            <div class=\\\\\"results-inputs\\\\\">\\\\n              <div>\\\\n                <label style=\\\\\"display: block; font-size: 0.875rem; margin-bottom: 0.25rem; color: #666;\\\\\">Score (0-50)</label>\\\\n                <input\\\\n                  type=\\\\\"number\\\\\"\\\\n                  class=\\\\\"score-input\\\\\"\\\\n                  placeholder=\\\\\"Enter score\\\\\"\\\\n                  min=\\\\\"0\\\\\"\\\\n                  max=\\\\\"50\\\\\"\\\\n                  style=\\\\\"width: 100%;\\\\\"\\\\n                  bind:value={entry.score}\\\\n                  on:input={() => updateEntryResults(entry.id, 'score', entry.score)}\\\\n                />\\\\n              </div>\\\\n              <div>\\\\n                <label style=\\\\\"display: block; font-size: 0.875rem; margin-bottom: 0.25rem; color: #666;\\\\\">Placement</label>\\\\n                <select \\\\n                  class=\\\\\"placement-select\\\\\" \\\\n                  style=\\\\\"width: 100%;\\\\\"\\\\n                  bind:value={entry.placement}\\\\n                  on:change={() => updateEntryResults(entry.id, 'placement', entry.placement)}\\\\n                >\\\\n                  <option value=\\\\\"\\\\\">No Placement</option>\\\\n                  <option value=\\\\\"1\\\\\">1st Place</option>\\\\n                  <option value=\\\\\"2\\\\\">2nd Place</option>\\\\n                  <option value=\\\\\"3\\\\\">3rd Place</option>\\\\n                  <option value=\\\\\"HM\\\\\">Honorable Mention</option>\\\\n                </select>\\\\n              </div>\\\\n            </div>\\\\n            <div style=\\\\\"margin-top: 1rem;\\\\\">\\\\n              <label style=\\\\\"display: block; font-size: 0.875rem; margin-bottom: 0.25rem; color: #666;\\\\\">Judge Notes</label>\\\\n              <textarea\\\\n                class=\\\\\"notes-input\\\\\"\\\\n                placeholder=\\\\\"Optional judging notes...\\\\\"\\\\n                bind:value={entry.judge_notes}\\\\n                on:input={() => updateEntryResults(entry.id, 'judge_notes', entry.judge_notes)}\\\\n              ></textarea>\\\\n            </div>\\\\n            <button \\\\n              class=\\\\\"btn btn-primary\\\\\" \\\\n              style=\\\\\"margin-top: 1rem; width: 100%;\\\\\"\\\\n              on:click={() => saveEntryResults(entry.id)}\\\\n              disabled={isSaving}\\\\n            >\\\\n              {isSaving ? 'Saving Results...' : 'Save Results'}\\\\n            </button>\\\\n          </div>\\\\n        {/each}\\\\n      </div>\\\\n    {/if}\\\\n  {/if}\\\\n</div>\"],\"names\":[],\"mappings\":\"AAqXE,sCAAW,CACT,SAAS,CAAE,MAAM,CACjB,MAAM,CAAE,CAAC,CAAC,IAAI,CACd,OAAO,CAAE,IACX,CAEA,iCAAM,CACJ,UAAU,CAAE,MAAM,CAClB,aAAa,CAAE,IACjB,CAEA,mBAAK,CAAC,gBAAG,CACP,KAAK,CAAE,OAAO,CACd,cAAc,CAAE,SAAS,CACzB,SAAS,CAAE,IAAI,CACf,WAAW,CAAE,GAAG,CAChB,MAAM,CAAE,CAAC,CAAC,CAAC,CAAC,MAAM,CAClB,WAAW,CAAE,GACf,CAEA,mBAAK,CAAC,uBAAU,CACd,SAAS,CAAE,MAAM,CACjB,KAAK,CAAE,IAAI,CACX,WAAW,CAAE,GACf,CAEA,6CAAkB,CAChB,UAAU,CAAE,KAAK,CACjB,OAAO,CAAE,MAAM,CACf,aAAa,CAAE,GAAG,CAClB,UAAU,CAAE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CACxC,WAAW,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,CAC9B,aAAa,CAAE,IACjB,CAEA,+BAAiB,CAAC,gBAAG,CACnB,MAAM,CAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAClB,KAAK,CAAE,IAAI,CACX,cAAc,CAAE,IAAI,CACpB,SAAS,CAAE,MAAM,CACjB,WAAW,CAAE,GACf,CAEA,sCAAW,CACT,OAAO,CAAE,IAAI,CACb,qBAAqB,CAAE,OAAO,QAAQ,CAAC,CAAC,OAAO,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAC3D,GAAG,CAAE,IACP,CAEA,sCAAW,CACT,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAClB,CAEA,uCAAY,CACV,SAAS,CAAE,QAAQ,CACnB,KAAK,CAAE,IAAI,CACX,aAAa,CAAE,OACjB,CAEA,uCAAY,CACV,SAAS,CAAE,MAAM,CACjB,WAAW,CAAE,GAAG,CAChB,KAAK,CAAE,IACT,CAEA,yCAAc,CACZ,OAAO,CAAE,YAAY,CACrB,OAAO,CAAE,OAAO,CAAC,OAAO,CACxB,aAAa,CAAE,IAAI,CACnB,SAAS,CAAE,QAAQ,CACnB,WAAW,CAAE,GACf,CAEA,6CAAkB,CAChB,UAAU,CAAE,OAAO,CACnB,KAAK,CAAE,OACT,CAEA,2CAAgB,CACd,UAAU,CAAE,OAAO,CACnB,KAAK,CAAE,OACT,CAOA,qCAAU,CACR,OAAO,CAAE,IAAI,CACb,GAAG,CAAE,IAAI,CACT,aAAa,CAAE,IAAI,CACnB,SAAS,CAAE,IAAI,CACf,WAAW,CAAE,MACf,CAEA,yCAAa,CAAE,0CAAe,CAC5B,OAAO,CAAE,OAAO,CAChB,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,CACtB,aAAa,CAAE,GAAG,CAClB,SAAS,CAAE,IAAI,CACf,UAAU,CAAE,KACd,CAEA,yCAAc,CACZ,IAAI,CAAE,CAAC,CACP,SAAS,CAAE,KACb,CAEA,0CAAe,CACb,SAAS,CAAE,KACb,CAEA,gCAAK,CACH,OAAO,CAAE,OAAO,CAAC,MAAM,CACvB,MAAM,CAAE,IAAI,CACZ,aAAa,CAAE,GAAG,CAClB,SAAS,CAAE,IAAI,CACf,MAAM,CAAE,OAAO,CACf,UAAU,CAAE,GAAG,CAAC,IAAI,CAAC,IAAI,CACzB,eAAe,CAAE,IAAI,CACrB,OAAO,CAAE,YACX,CAEA,gCAAI,SAAU,CACZ,OAAO,CAAE,GAAG,CACZ,MAAM,CAAE,WACV,CAEA,wCAAa,CACX,UAAU,CAAE,OAAO,CACnB,KAAK,CAAE,KACT,CAEA,wCAAY,MAAM,KAAK,SAAS,CAAE,CAChC,UAAU,CAAE,OACd,CAEA,0CAAe,CACb,UAAU,CAAE,OAAO,CACnB,KAAK,CAAE,KACT,CAEA,0CAAc,MAAM,KAAK,SAAS,CAAE,CAClC,UAAU,CAAE,OACd,CAEA,wCAAa,CACX,UAAU,CAAE,OAAO,CACnB,KAAK,CAAE,KACT,CAEA,wCAAY,MAAM,KAAK,SAAS,CAAE,CAChC,UAAU,CAAE,OACd,CAEA,0CAAe,CACb,UAAU,CAAE,KAAK,CACjB,aAAa,CAAE,GAAG,CAClB,QAAQ,CAAE,MAAM,CAChB,UAAU,CAAE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CACzC,CAEA,iCAAM,CACJ,KAAK,CAAE,IAAI,CACX,eAAe,CAAE,QACnB,CAEA,8BAAG,CACD,UAAU,CAAE,OAAO,CACnB,OAAO,CAAE,IAAI,CACb,UAAU,CAAE,IAAI,CAChB,WAAW,CAAE,GAAG,CAChB,KAAK,CAAE,IAAI,CACX,aAAa,CAAE,GAAG,CAAC,KAAK,CAAC,IAC3B,CAEA,8BAAG,CACD,OAAO,CAAE,IAAI,CACb,aAAa,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,CAC7B,cAAc,CAAE,GAClB,CAEA,8BAAE,MAAO,CACP,UAAU,CAAE,OACd,CAEA,yCAAc,CACZ,WAAW,CAAE,GAAG,CAChB,KAAK,CAAE,OACT,CAEA,2CAAgB,CACd,OAAO,CAAE,YAAY,CACrB,OAAO,CAAE,OAAO,CAAC,MAAM,CACvB,UAAU,CAAE,OAAO,CACnB,aAAa,CAAE,GAAG,CAClB,SAAS,CAAE,QAAQ,CACnB,WAAW,CAAE,GACf,CAEA,wCAAa,CACX,OAAO,CAAE,MAAM,CACf,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,CACtB,aAAa,CAAE,GAAG,CAClB,SAAS,CAAE,MAAM,CACjB,KAAK,CAAE,IACT,CAEA,6CAAkB,CAChB,OAAO,CAAE,MAAM,CACf,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,CACtB,aAAa,CAAE,GAAG,CAClB,SAAS,CAAE,MAAM,CACjB,UAAU,CAAE,KAAK,CACjB,KAAK,CAAE,KACT,CAEA,wCAAa,CACX,KAAK,CAAE,IAAI,CACX,UAAU,CAAE,IAAI,CAChB,OAAO,CAAE,MAAM,CACf,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,CACtB,aAAa,CAAE,GAAG,CAClB,SAAS,CAAE,MAAM,CACjB,MAAM,CAAE,QAAQ,CAChB,WAAW,CAAE,OACf,CAEA,4CAAiB,CACf,KAAK,CAAE,OACT,CAEA,2CAAgB,CACd,KAAK,CAAE,OACT,CAEA,8CAAmB,CACjB,KAAK,CAAE,OAAO,CACd,SAAS,CAAE,OAAO,CAClB,WAAW,CAAE,MACf,CAEA,oCAAQ,CAAE,wCAAa,CACrB,UAAU,CAAE,MAAM,CAClB,OAAO,CAAE,IAAI,CACb,KAAK,CAAE,IACT,CAEA,oCAAS,CACP,OAAO,CAAE,YAAY,CACrB,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,CACzB,UAAU,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,CAC7B,aAAa,CAAE,GAAG,CAClB,SAAS,CAAE,kBAAI,CAAC,EAAE,CAAC,MAAM,CAAC,QAAQ,CAClC,aAAa,CAAE,IACjB,CAEA,WAAW,kBAAK,CACd,EAAG,CAAE,SAAS,CAAE,OAAO,IAAI,CAAG,CAC9B,IAAK,CAAE,SAAS,CAAE,OAAO,MAAM,CAAG,CACpC,CAGA,wCAAa,CACX,OAAO,CAAE,IACX,CAEA,uCAAY,CACV,UAAU,CAAE,KAAK,CACjB,aAAa,CAAE,GAAG,CAClB,OAAO,CAAE,MAAM,CACf,aAAa,CAAE,IAAI,CACnB,UAAU,CAAE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CACxC,WAAW,CAAE,GAAG,CAAC,KAAK,CAAC,OACzB,CAEA,yCAAc,CACZ,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,aAAa,CAC9B,WAAW,CAAE,MAAM,CACnB,aAAa,CAAE,IACjB,CAEA,2CAAgB,CACd,OAAO,CAAE,IAAI,CACb,qBAAqB,CAAE,GAAG,CAAC,GAAG,CAC9B,GAAG,CAAE,OAAO,CACZ,UAAU,CAAE,OACd,CAGA,MAAO,YAAY,KAAK,CAAE,CACxB,mBAAK,CAAC,gBAAG,CACP,SAAS,CAAE,MACb,CAEA,qCAAU,CACR,cAAc,CAAE,MAAM,CACtB,WAAW,CAAE,OACf,CAEA,yCAAa,CAAE,0CAAe,CAC5B,KAAK,CAAE,IACT,CAEA,0CAAe,CACb,OAAO,CAAE,IACX,CAEA,wCAAa,CACX,OAAO,CAAE,KACX,CAEA,2CAAgB,CACd,qBAAqB,CAAE,GACzB,CAEA,sCAAW,CACT,qBAAqB,CAAE,GACzB,CACF,CAEA,MAAO,YAAY,KAAK,CAAE,CACxB,sCAAW,CACT,OAAO,CAAE,MACX,CAEA,mBAAK,CAAC,gBAAG,CACP,SAAS,CAAE,IACb,CACF\"}`\n};\nconst Page = create_ssr_component(($$result, $$props, $$bindings, slots) => {\n  let $page, $$unsubscribe_page;\n  let $userProfile, $$unsubscribe_userProfile;\n  $$unsubscribe_page = subscribe(page, (value) => $page = value);\n  $$unsubscribe_userProfile = subscribe(userProfile, (value) => $userProfile = value);\n  let entries = [];\n  let searchQuery = \"\";\n  onDestroy(() => {\n  });\n  function filterEntries() {\n    let filtered = [...entries];\n    if (searchQuery.trim()) {\n      const query = searchQuery.toLowerCase();\n      filtered = filtered.filter((entry) => entry.entry_number?.toLowerCase().includes(query) || entry.beer_name?.toLowerCase().includes(query) || entry.member_name?.toLowerCase().includes(query) || entry.member_email?.toLowerCase().includes(query) || entry.category_display?.toLowerCase().includes(query));\n    }\n  }\n  $$result.css.add(css);\n  {\n    if ($userProfile && !$userProfile.is_officer) {\n      goto();\n    }\n  }\n  $page.params.id;\n  ({\n    total: entries.length,\n    completed: entries.filter((e) => e.has_results && e.score).length,\n    get percentage() {\n      return this.total > 0 ? Math.round(this.completed / this.total * 100) : 0;\n    }\n  });\n  {\n    filterEntries();\n  }\n  $$unsubscribe_page();\n  $$unsubscribe_userProfile();\n  return `   <div class=\"container svelte-h1okl1\"> <div class=\"hero svelte-h1okl1\" data-svelte-h=\"svelte-a8m6p5\"><h1 class=\"svelte-h1okl1\">Enter Results</h1> <p class=\"subtitle svelte-h1okl1\">Record judging scores and placements</p></div> ${`<div class=\"loading svelte-h1okl1\" data-svelte-h=\"svelte-ylvmdq\"><div class=\"spinner svelte-h1okl1\"></div> <p>Loading competition entries...</p></div>`}</div>`;\n});\nexport {\n  Page as default\n};\n"],"names":[],"mappings":";;;;;;;;;;AAKA,MAAM,GAAG,GAAG;AACZ,EAAE,IAAI,EAAE,qyKAAqyK;AAC7yK,EAAE,GAAG,EAAE,CAAC,iogCAAiogC;AACzogC,CAAC;AACI,MAAC,IAAI,GAAG,oBAAoB,CAAC,CAAC,QAAQ,EAAE,OAAO,EAAE,UAAU,EAAE,KAAK,KAAK;AAC5E,EAAE,IAAI,KAAK,EAAE,kBAAkB;AAC/B,EAAE,IAAI,YAAY,EAAE,yBAAyB;AAC7C,EAAE,kBAAkB,GAAG,SAAS,CAAC,IAAI,EAAE,CAAC,KAAK,KAAK,KAAK,GAAG,KAAK,CAAC;AAChE,EAAE,yBAAyB,GAAG,SAAS,CAAC,WAAW,EAAE,CAAC,KAAK,KAAK,YAAY,GAAG,KAAK,CAAC;AACrF,EAAE,IAAI,OAAO,GAAG,EAAE;AAClB,EAAE,IAAI,WAAW,GAAG,EAAE;AACtB,EAAE,SAAS,CAAC,MAAM;AAClB,GAAG,CAAC;AACJ,EAAE,SAAS,aAAa,GAAG;AAC3B,IAAI,IAAI,QAAQ,GAAG,CAAC,GAAG,OAAO,CAAC;AAC/B,IAAI,IAAI,WAAW,CAAC,IAAI,EAAE,EAAE;AAC5B,MAAM,MAAM,KAAK,GAAG,WAAW,CAAC,WAAW,EAAE;AAC7C,MAAM,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,KAAK,KAAK,KAAK,CAAC,YAAY,EAAE,WAAW,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,SAAS,EAAE,WAAW,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,WAAW,EAAE,WAAW,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,YAAY,EAAE,WAAW,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,gBAAgB,EAAE,WAAW,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AAClT;AACA;AACA,EAAE,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC;AACvB,EAAE;AACF,IAAI,IAAI,YAAY,IAAI,CAAC,YAAY,CAAC,UAAU,EAAE;AAClD,MAAM,IAAI,EAAE;AACZ;AACA;AACA,EAAE,KAAK,CAAC,MAAM,CAAC,EAAE;AACjB,EAAE,CAAC;AACH,IACI,SAAS,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,WAAW,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC,MAI7D,CAAC;AACH,EAAE;AACF,IAAI,aAAa,EAAE;AACnB;AACA,EAAE,kBAAkB,EAAE;AACtB,EAAE,yBAAyB,EAAE;AAC7B,EAAE,OAAO,CAAC,qOAAqO,EAAE,CAAC,sJAAsJ,CAAC,CAAC,MAAM,CAAC;AACjZ,CAAC;;;;"}
import { c as create_ssr_component, a as subscribe, o as onDestroy, v as validate_component } from './ssr-CFMHIens.js';
import { g as goto } from './client-C3KLrhj1.js';
import { p as page } from './stores-C-uFbAzB.js';
import { u as userProfile } from './userProfile-BAUZwBX2.js';
import './competitionManagementStore-CIPoqnzm.js';
import './bjcpCategoryStore-PCT2-_IN.js';
import './supabaseClient-D_8i9Ohq.js';
import { H as Hero } from './Hero-Dg21uuqy.js';
import { C as Container } from './Container-BafdMVU8.js';
import { L as LoadingSpinner } from './LoadingSpinner-BXBS6p7s.js';
import './exports-DKuYoYKl.js';
import './index-Ct3aIOD7.js';
import './false-CRHihH2U.js';
import '@supabase/supabase-js';

/* empty css                                                               */
const css = {
  code: `.form-card.svelte-iee1hr.svelte-iee1hr{background:white;padding:2rem;border-radius:6px;box-shadow:0 2px 4px rgba(0, 0, 0, 0.1);border-left:4px solid #ff3e00}.warning-banner.svelte-iee1hr.svelte-iee1hr{background:#fef3c7;border:1px solid #f59e0b;border-radius:6px;padding:1rem;margin-bottom:1.5rem;color:#92400e}.warning-banner.svelte-iee1hr strong.svelte-iee1hr{display:block;margin-bottom:0.25rem}.form-group.svelte-iee1hr.svelte-iee1hr{margin-bottom:1.5rem}.form-group.svelte-iee1hr label.svelte-iee1hr{display:block;margin-bottom:0.5rem;font-weight:600;color:#333}.required.svelte-iee1hr.svelte-iee1hr::after{content:' *';color:#dc2626}.form-control.svelte-iee1hr.svelte-iee1hr{width:100%;padding:0.75rem;border:1px solid #ddd;border-radius:6px;font-size:1rem;transition:border-color 0.3s ease}.form-control.svelte-iee1hr.svelte-iee1hr:focus{outline:none;border-color:#ff3e00;box-shadow:0 0 0 3px rgba(255, 62, 0, 0.1)}.form-control.error.svelte-iee1hr.svelte-iee1hr{border-color:#dc2626}.form-control.svelte-iee1hr.svelte-iee1hr:disabled{background:#f5f5f5;cursor:not-allowed}textarea.form-control.svelte-iee1hr.svelte-iee1hr{resize:vertical;min-height:100px}.error-message.svelte-iee1hr.svelte-iee1hr{color:#dc2626;font-size:0.875rem;margin-top:0.25rem}.form-row.svelte-iee1hr.svelte-iee1hr{display:grid;grid-template-columns:1fr 1fr;gap:1rem}.datetime-inputs.svelte-iee1hr.svelte-iee1hr{display:flex;gap:0.5rem}.datetime-inputs.svelte-iee1hr .form-control.svelte-iee1hr{width:100%}.time-input.svelte-iee1hr.svelte-iee1hr{flex:0 0 120px}.checkbox-group.svelte-iee1hr.svelte-iee1hr{display:flex;align-items:center;gap:0.5rem;margin-top:0.5rem}.checkbox-group.svelte-iee1hr input[type="checkbox"].svelte-iee1hr{width:20px;height:20px;cursor:pointer}.checkbox-group.svelte-iee1hr label.svelte-iee1hr{margin-bottom:0;cursor:pointer;user-select:none}.help-text.svelte-iee1hr.svelte-iee1hr{color:#666;font-size:0.875rem;margin-top:0.25rem}.form-actions.svelte-iee1hr.svelte-iee1hr{display:flex;gap:1rem;justify-content:flex-end;margin-top:2rem;padding-top:2rem;border-top:1px solid #eee}.section-title.svelte-iee1hr.svelte-iee1hr{font-size:1.25rem;font-weight:600;color:#333;margin-bottom:1rem;padding-bottom:0.5rem;border-bottom:2px solid #ff3e00}.entry-stats.svelte-iee1hr.svelte-iee1hr{background:#f9fafb;padding:1rem;border-radius:6px;margin-bottom:1.5rem;display:flex;align-items:center;gap:2rem}.stat.svelte-iee1hr.svelte-iee1hr{display:flex;flex-direction:column}.stat-label.svelte-iee1hr.svelte-iee1hr{font-size:0.875rem;color:#666}.stat-value.svelte-iee1hr.svelte-iee1hr{font-size:1.5rem;font-weight:bold;color:#ff3e00}@media(max-width: 480px){.form-card.svelte-iee1hr.svelte-iee1hr{padding:1.5rem}.form-row.svelte-iee1hr.svelte-iee1hr{grid-template-columns:1fr}.datetime-inputs.svelte-iee1hr.svelte-iee1hr{flex-direction:column}.time-input.svelte-iee1hr.svelte-iee1hr{flex:1}.form-actions.svelte-iee1hr.svelte-iee1hr{flex-direction:column-reverse}.entry-stats.svelte-iee1hr.svelte-iee1hr{flex-direction:column;align-items:flex-start;gap:1rem}}@media(max-width: 768px){.form-card.svelte-iee1hr.svelte-iee1hr{padding:1.5rem}.form-row.svelte-iee1hr.svelte-iee1hr{grid-template-columns:1fr}.form-actions.svelte-iee1hr.svelte-iee1hr{flex-direction:column-reverse}.entry-stats.svelte-iee1hr.svelte-iee1hr{flex-direction:column;align-items:flex-start;gap:1rem}.custom-category-section.svelte-iee1hr.svelte-iee1hr{padding:1rem}}.radio-group.svelte-iee1hr.svelte-iee1hr{display:flex;flex-direction:column;gap:1rem}.radio-option.svelte-iee1hr.svelte-iee1hr{display:flex;align-items:flex-start;gap:0.75rem;padding:1rem;border:1px solid #e2e8f0;border-radius:8px;cursor:pointer;transition:all 0.2s ease}.radio-option.svelte-iee1hr.svelte-iee1hr:hover{border-color:#cbd5e1;background:#f8fafc}.radio-option.svelte-iee1hr.svelte-iee1hr:has(input:checked){border-color:#ff3e00;background:#fff5f5}.radio-label.svelte-iee1hr.svelte-iee1hr{flex:1}.radio-description.svelte-iee1hr.svelte-iee1hr{font-size:0.875rem;color:#666;margin-top:0.25rem}.custom-category-section.svelte-iee1hr.svelte-iee1hr{margin-top:1.5rem;padding:1.5rem;border:1px solid #e5e7eb;border-radius:8px;background:#f9fafb}`,
  map: `{"version":3,"file":"+page.svelte","sources":["+page.svelte"],"sourcesContent":["<!-- src/routes/officers/manage-competitions/edit/[id]/+page.svelte -->\\n<script>\\n  import { onMount, onDestroy } from 'svelte';\\n  import { goto } from '$app/navigation';\\n  import { page } from '$app/stores';\\n  import { userProfile } from '$lib/stores/userProfile';\\n  import { competitionManagementStore, updateCompetition } from '$lib/stores/competitionManagementStore';\\n  import { bjcpCategories, categoriesByNumber, loadBjcpCategories } from '$lib/stores/bjcpCategoryStore';\\n  import CategorySelector from '$lib/components/CategorySelector.svelte';\\n  import RankingGroupManager from '$lib/components/RankingGroupManager.svelte';\\n  import { supabase } from '$lib/supabaseClient';\\n  import Hero from \\"$lib/components/ui/Hero.svelte\\";\\n  import Container from \\"$lib/components/ui/Container.svelte\\";\\n  import LoadingSpinner from \\"$lib/components/ui/LoadingSpinner.svelte\\";\\n  import Button from \\"$lib/components/ui/Button.svelte\\";\\n  \\n  // Check officer status\\n  $: if ($userProfile && !$userProfile.is_officer) {\\n    goto('/');\\n  }\\n\\n  // Get competition ID from URL\\n  $: competitionId = $page.params.id;\\n\\n  // Form fields\\n  let name = '';\\n  let description = '';\\n  let entryDeadline = '';\\n  let entryDeadlineTime = '00:00';\\n  let judgingDate = '';\\n  let judgingDateTime = '00:00';\\n  let entryFee = 5;\\n  let maxEntriesPerMember = 5;\\n  let isActive = true;\\n  let hideJudgingDate = false;\\n  \\n  // Category system settings\\n  let categorySystem = 'default'; // 'default' or 'custom'\\n  let selectedCategories = []; // Array of selected category IDs for custom system\\n  let rankingGroups = []; // Array of ranking groups for custom system\\n  \\n  let isLoading = true;\\n  let isSubmitting = false;\\n  let validationErrors = {};\\n  let competition = null;\\n\\n  onMount(async () => {\\n    // Load BJCP categories for category selection\\n    await loadBjcpCategories();\\n    \\n    loadCompetition();\\n    setupEventHandlers();\\n  });\\n\\n  // Removed tab switching reload - causes issues with Supabase tab switching\\n  function setupEventHandlers() {\\n    // Tab visibility handling removed for better Supabase compatibility\\n    return () => {\\n      // No cleanup needed now\\n    };\\n  }\\n\\n  onDestroy(() => {\\n    // Cleanup handled by setupEventHandlers return\\n  });\\n\\n  // Load competition data\\n  async function loadCompetition() {\\n    isLoading = true;\\n    \\n    try {\\n      const { data, error } = await supabase\\n        .from('competitions')\\n        .select(\`\\n          *,\\n          competition_ranking_groups (\\n            id,\\n            group_name,\\n            group_description,\\n            bjcp_category_ids,\\n            group_order\\n          )\\n        \`)\\n        .eq('id', competitionId)\\n        .single();\\n      \\n      if (error) throw error;\\n      \\n      if (data) {\\n        competition = data;\\n        name = data.name || '';\\n        description = data.description || '';\\n        \\n        const entryDeadlineDate = new Date(data.entry_deadline);\\n        entryDeadline = formatDateForInput(entryDeadlineDate);\\n        entryDeadlineTime = formatTimeForInput(entryDeadlineDate);\\n        \\n        const judgingDateDate = new Date(data.judging_date);\\n        judgingDate = formatDateForInput(judgingDateDate);\\n        judgingDateTime = formatTimeForInput(judgingDateDate);\\n        \\n        entryFee = data.entry_fee || 0;\\n        maxEntriesPerMember = data.max_entries_per_member || 5;\\n        isActive = data.active ?? true;\\n        hideJudgingDate = data.hide_judging_date ?? false;\\n        \\n        // Load category system settings\\n        categorySystem = data.category_system || 'default';\\n        \\n        if (categorySystem === 'custom' && data.category_restrictions) {\\n          selectedCategories = Array.isArray(data.category_restrictions) \\n            ? data.category_restrictions \\n            : JSON.parse(data.category_restrictions);\\n          \\n          if (data.competition_ranking_groups && data.competition_ranking_groups.length > 0) {\\n            rankingGroups = data.competition_ranking_groups.map(rg => ({\\n              id: rg.id,\\n              name: rg.group_name,\\n              description: rg.group_description || '',\\n              categories: Array.isArray(rg.bjcp_category_ids) \\n                ? rg.bjcp_category_ids \\n                : JSON.parse(rg.bjcp_category_ids)\\n            }));\\n          }\\n        } else {\\n          selectedCategories = [];\\n          rankingGroups = [];\\n        }\\n      }\\n    } catch (err) {\\n      console.error('Error loading competition:', err);\\n      alert('Failed to load competition');\\n      goto('/officers/manage-competitions');\\n    } finally {\\n      isLoading = false;\\n    }\\n  }\\n\\n  // Format date for form input\\n  function formatDateForInput(date) {\\n    const year = date.getFullYear();\\n    const month = String(date.getMonth() + 1).padStart(2, '0');\\n    const day = String(date.getDate()).padStart(2, '0');\\n    return \`\${year}-\${month}-\${day}\`;\\n  }\\n\\n  // Format time for form input\\n  function formatTimeForInput(date) {\\n    const hours = String(date.getHours()).padStart(2, '0');\\n    const minutes = String(date.getMinutes()).padStart(2, '0');\\n    return \`\${hours}:\${minutes}\`;\\n  }\\n\\n  // Validate form\\n  function validateForm() {\\n    const errors = {};\\n    \\n    if (!name.trim()) {\\n      errors.name = 'Competition name is required';\\n    } else if (name.length > 100) {\\n      errors.name = 'Name must be 100 characters or less';\\n    }\\n    \\n    if (description && description.length > 500) {\\n      errors.description = 'Description must be 500 characters or less';\\n    }\\n    \\n    if (!entryDeadline) {\\n      errors.entryDeadline = 'Entry deadline is required';\\n    }\\n    \\n    if (!judgingDate) {\\n      errors.judgingDate = 'Judging date is required';\\n    } else {\\n      const judging = new Date(\`\${judgingDate}T\${judgingDateTime}:00\`);\\n      const deadline = new Date(\`\${entryDeadline}T\${entryDeadlineTime}:00\`);\\n      \\n      if (judging <= deadline) {\\n        errors.judgingDate = 'Judging date and time must be after entry deadline';\\n      }\\n    }\\n    \\n    if (entryFee < 0 || entryFee > 100) {\\n      errors.entryFee = 'Entry fee must be between $0 and $100';\\n    }\\n    \\n    if (maxEntriesPerMember < 1 || maxEntriesPerMember > 20) {\\n      errors.maxEntriesPerMember = 'Max entries must be between 1 and 20';\\n    }\\n    \\n    validationErrors = errors;\\n    return Object.keys(errors).length === 0;\\n  }\\n\\n  // Handle form submission\\n  async function handleSubmit() {\\n    if (!validateForm()) return;\\n    \\n    isSubmitting = true;\\n    \\n    try {\\n      // Update basic competition data including category system\\n      const basicUpdates = {\\n        name: name.trim(),\\n        description: description.trim() || null,\\n        entry_deadline: \`\${entryDeadline}T\${entryDeadlineTime}:00\`,\\n        judging_date: \`\${judgingDate}T\${judgingDateTime}:00\`,\\n        entry_fee: entryFee,\\n        max_entries_per_member: maxEntriesPerMember,\\n        active: isActive,\\n        hide_judging_date: hideJudgingDate,\\n        category_system: categorySystem,\\n        category_restrictions: categorySystem === 'custom' && selectedCategories.length > 0 \\n          ? selectedCategories \\n          : null\\n      };\\n      \\n      await updateCompetition(competitionId, basicUpdates);\\n      \\n      // Handle ranking group updates if not disabled due to existing entries\\n      if (!hasEntries) {\\n        // Remove existing ranking groups\\n        await supabase\\n          .from('competition_ranking_groups')\\n          .delete()\\n          .eq('competition_id', competitionId);\\n        \\n        // Add new ranking groups for custom system\\n        if (categorySystem === 'custom' && rankingGroups.length > 0) {\\n          const groupData = rankingGroups.map((group, index) => ({\\n            competition_id: competitionId,\\n            group_name: group.name,\\n            group_description: group.description || null,\\n            bjcp_category_ids: group.categories,\\n            group_order: index + 1\\n          }));\\n          \\n          const { error: groupError } = await supabase\\n            .from('competition_ranking_groups')\\n            .insert(groupData);\\n            \\n          if (groupError) throw groupError;\\n        }\\n      }\\n      \\n      goto('/officers/manage-competitions');\\n    } catch (error) {\\n      console.error('Error updating competition:', error);\\n      alert(\`Error updating competition: \${error.message}\`);\\n      isSubmitting = false;\\n    }\\n  }\\n\\n  // Cancel and go back\\n  function handleCancel() {\\n    goto('/officers/manage-competitions');\\n  }\\n\\n  // Check if competition has entries (affects what can be edited)\\n  $: hasEntries = competition?.entry_count > 0;\\n<\/script>\\n\\n<style>\\n\\n  .form-card {\\n    background: white;\\n    padding: 2rem;\\n    border-radius: 6px;\\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\\n    border-left: 4px solid #ff3e00;\\n  }\\n\\n  .warning-banner {\\n    background: #fef3c7;\\n    border: 1px solid #f59e0b;\\n    border-radius: 6px;\\n    padding: 1rem;\\n    margin-bottom: 1.5rem;\\n    color: #92400e;\\n  }\\n\\n  .warning-banner strong {\\n    display: block;\\n    margin-bottom: 0.25rem;\\n  }\\n\\n  .form-group {\\n    margin-bottom: 1.5rem;\\n  }\\n\\n  .form-group label {\\n    display: block;\\n    margin-bottom: 0.5rem;\\n    font-weight: 600;\\n    color: #333;\\n  }\\n\\n  .required::after {\\n    content: ' *';\\n    color: #dc2626;\\n  }\\n\\n  .form-control {\\n    width: 100%;\\n    padding: 0.75rem;\\n    border: 1px solid #ddd;\\n    border-radius: 6px;\\n    font-size: 1rem;\\n    transition: border-color 0.3s ease;\\n  }\\n\\n  .form-control:focus {\\n    outline: none;\\n    border-color: #ff3e00;\\n    box-shadow: 0 0 0 3px rgba(255, 62, 0, 0.1);\\n  }\\n\\n  .form-control.error {\\n    border-color: #dc2626;\\n  }\\n\\n  .form-control:disabled {\\n    background: #f5f5f5;\\n    cursor: not-allowed;\\n  }\\n\\n  textarea.form-control {\\n    resize: vertical;\\n    min-height: 100px;\\n  }\\n\\n  .error-message {\\n    color: #dc2626;\\n    font-size: 0.875rem;\\n    margin-top: 0.25rem;\\n  }\\n\\n  .form-row {\\n    display: grid;\\n    grid-template-columns: 1fr 1fr;\\n    gap: 1rem;\\n  }\\n\\n  .datetime-inputs {\\n    display: flex;\\n    gap: 0.5rem;\\n  }\\n\\n  .datetime-inputs .form-control {\\n    width: 100%;\\n  }\\n\\n  .time-input {\\n    flex: 0 0 120px;\\n  }\\n\\n  .checkbox-group {\\n    display: flex;\\n    align-items: center;\\n    gap: 0.5rem;\\n    margin-top: 0.5rem;\\n  }\\n\\n  .checkbox-group input[type=\\"checkbox\\"] {\\n    width: 20px;\\n    height: 20px;\\n    cursor: pointer;\\n  }\\n\\n  .checkbox-group label {\\n    margin-bottom: 0;\\n    cursor: pointer;\\n    user-select: none;\\n  }\\n\\n  .help-text {\\n    color: #666;\\n    font-size: 0.875rem;\\n    margin-top: 0.25rem;\\n  }\\n\\n  .form-actions {\\n    display: flex;\\n    gap: 1rem;\\n    justify-content: flex-end;\\n    margin-top: 2rem;\\n    padding-top: 2rem;\\n    border-top: 1px solid #eee;\\n  }\\n\\n\\n  .section-title {\\n    font-size: 1.25rem;\\n    font-weight: 600;\\n    color: #333;\\n    margin-bottom: 1rem;\\n    padding-bottom: 0.5rem;\\n    border-bottom: 2px solid #ff3e00;\\n  }\\n\\n  .entry-stats {\\n    background: #f9fafb;\\n    padding: 1rem;\\n    border-radius: 6px;\\n    margin-bottom: 1.5rem;\\n    display: flex;\\n    align-items: center;\\n    gap: 2rem;\\n  }\\n\\n  .stat {\\n    display: flex;\\n    flex-direction: column;\\n  }\\n\\n  .stat-label {\\n    font-size: 0.875rem;\\n    color: #666;\\n  }\\n\\n  .stat-value {\\n    font-size: 1.5rem;\\n    font-weight: bold;\\n    color: #ff3e00;\\n  }\\n\\n  /* Mobile styles */\\n  @media (max-width: 480px) {\\n    .form-card {\\n      padding: 1.5rem;\\n    }\\n\\n    .form-row {\\n      grid-template-columns: 1fr;\\n    }\\n\\n    .datetime-inputs {\\n      flex-direction: column;\\n    }\\n\\n    .time-input {\\n      flex: 1;\\n    }\\n\\n    .form-actions {\\n      flex-direction: column-reverse;\\n    }\\n\\n    .btn {\\n      width: 100%;\\n    }\\n\\n    .entry-stats {\\n      flex-direction: column;\\n      align-items: flex-start;\\n      gap: 1rem;\\n    }\\n  }\\n\\n  /* Tablet styles */\\n  @media (max-width: 768px) {\\n    .form-card {\\n      padding: 1.5rem;\\n    }\\n\\n    .form-row {\\n      grid-template-columns: 1fr;\\n    }\\n\\n    .form-actions {\\n      flex-direction: column-reverse;\\n    }\\n\\n    .btn {\\n      width: 100%;\\n    }\\n\\n    .entry-stats {\\n      flex-direction: column;\\n      align-items: flex-start;\\n      gap: 1rem;\\n    }\\n    \\n    .custom-category-section {\\n      padding: 1rem;\\n    }\\n  }\\n  \\n  /* Radio Group Styles */\\n  .radio-group {\\n    display: flex;\\n    flex-direction: column;\\n    gap: 1rem;\\n  }\\n  \\n  .radio-option {\\n    display: flex;\\n    align-items: flex-start;\\n    gap: 0.75rem;\\n    padding: 1rem;\\n    border: 1px solid #e2e8f0;\\n    border-radius: 8px;\\n    cursor: pointer;\\n    transition: all 0.2s ease;\\n  }\\n  \\n  .radio-option:hover {\\n    border-color: #cbd5e1;\\n    background: #f8fafc;\\n  }\\n  \\n  .radio-option:has(input:checked) {\\n    border-color: #ff3e00;\\n    background: #fff5f5;\\n  }\\n  \\n  .radio-label {\\n    flex: 1;\\n  }\\n  \\n  .radio-description {\\n    font-size: 0.875rem;\\n    color: #666;\\n    margin-top: 0.25rem;\\n  }\\n  \\n  .custom-category-section {\\n    margin-top: 1.5rem;\\n    padding: 1.5rem;\\n    border: 1px solid #e5e7eb;\\n    border-radius: 8px;\\n    background: #f9fafb;\\n  }\\n</style>\\n\\n<Container size=\\"md\\">\\n  <Hero title=\\"Edit Competition\\" subtitle=\\"Update competition details\\" icon=\\"✏️\\" center={true} />\\n\\n  {#if isLoading}\\n    <LoadingSpinner message=\\"Loading competition...\\" />\\n  {:else if competition}\\n    <!-- Form Card -->\\n    <div class=\\"form-card\\">\\n      {#if hasEntries}\\n        <div class=\\"warning-banner\\">\\n          <strong>⚠️ This competition has entries</strong>\\n          Some fields cannot be modified after entries have been submitted.\\n        </div>\\n        \\n        <div class=\\"entry-stats\\">\\n          <div class=\\"stat\\">\\n            <span class=\\"stat-label\\">Total Entries</span>\\n            <span class=\\"stat-value\\">{competition.entry_count || 0}</span>\\n          </div>\\n        </div>\\n      {/if}\\n\\n      <form on:submit|preventDefault={handleSubmit}>\\n        <!-- Basic Information -->\\n        <div class=\\"section-title\\">Basic Information</div>\\n        \\n        <div class=\\"form-group\\">\\n          <label for=\\"name\\" class=\\"required\\">Competition Name</label>\\n          <input\\n            type=\\"text\\"\\n            id=\\"name\\"\\n            class=\\"form-control {validationErrors.name ? 'error' : ''}\\"\\n            bind:value={name}\\n            placeholder=\\"e.g., Spring 2025 Homebrew Competition\\"\\n            maxlength=\\"100\\"\\n            disabled={isSubmitting}\\n          />\\n          {#if validationErrors.name}\\n            <div class=\\"error-message\\">{validationErrors.name}</div>\\n          {/if}\\n        </div>\\n\\n        <div class=\\"form-group\\">\\n          <label for=\\"description\\">Description</label>\\n          <textarea\\n            id=\\"description\\"\\n            class=\\"form-control {validationErrors.description ? 'error' : ''}\\"\\n            bind:value={description}\\n            placeholder=\\"Optional description or special instructions\\"\\n            maxlength=\\"500\\"\\n            disabled={isSubmitting}\\n          />\\n          {#if validationErrors.description}\\n            <div class=\\"error-message\\">{validationErrors.description}</div>\\n          {/if}\\n          <div class=\\"help-text\\">Provide any additional details about the competition</div>\\n        </div>\\n\\n        <!-- Dates -->\\n        <div class=\\"section-title\\">Important Dates</div>\\n        \\n        <div class=\\"form-row\\">\\n          <div class=\\"form-group\\">\\n            <label for=\\"entryDeadline\\" class=\\"required\\">Entry Deadline</label>\\n            <div class=\\"datetime-inputs\\">\\n              <input\\n                type=\\"date\\"\\n                id=\\"entryDeadline\\"\\n                class=\\"form-control {validationErrors.entryDeadline ? 'error' : ''}\\"\\n                bind:value={entryDeadline}\\n                disabled={isSubmitting || hasEntries}\\n              />\\n              <input\\n                type=\\"time\\"\\n                id=\\"entryDeadlineTime\\"\\n                class=\\"form-control time-input\\"\\n                bind:value={entryDeadlineTime}\\n                disabled={isSubmitting || hasEntries}\\n              />\\n            </div>\\n            {#if validationErrors.entryDeadline}\\n              <div class=\\"error-message\\">{validationErrors.entryDeadline}</div>\\n            {/if}\\n            <div class=\\"help-text\\">\\n              {hasEntries ? 'Cannot change after entries submitted' : 'Date and time when entries close'}\\n            </div>\\n          </div>\\n\\n          <div class=\\"form-group\\">\\n            <label for=\\"judgingDate\\" class=\\"required\\">Judging Date</label>\\n            <div class=\\"datetime-inputs\\">\\n              <input\\n                type=\\"date\\"\\n                id=\\"judgingDate\\"\\n                class=\\"form-control {validationErrors.judgingDate ? 'error' : ''}\\"\\n                bind:value={judgingDate}\\n                disabled={isSubmitting}\\n              />\\n              <input\\n                type=\\"time\\"\\n                id=\\"judgingDateTime\\"\\n                class=\\"form-control time-input\\"\\n                bind:value={judgingDateTime}\\n                disabled={isSubmitting}\\n              />\\n            </div>\\n            {#if validationErrors.judgingDate}\\n              <div class=\\"error-message\\">{validationErrors.judgingDate}</div>\\n            {/if}\\n            <div class=\\"help-text\\">Date and time when judging will take place</div>\\n          </div>\\n        </div>\\n\\n        <div class=\\"checkbox-group\\">\\n          <input\\n            type=\\"checkbox\\"\\n            id=\\"hideJudgingDate\\"\\n            bind:checked={hideJudgingDate}\\n            disabled={isSubmitting}\\n          />\\n          <label for=\\"hideJudgingDate\\">\\n            Keep judging date private until after entry deadline\\n          </label>\\n        </div>\\n\\n        <!-- Entry Settings -->\\n        <div class=\\"section-title\\">Entry Settings</div>\\n        \\n        <div class=\\"form-row\\">\\n          <div class=\\"form-group\\">\\n            <label for=\\"entryFee\\">Entry Fee ($)</label>\\n            <input\\n              type=\\"number\\"\\n              id=\\"entryFee\\"\\n              class=\\"form-control {validationErrors.entryFee ? 'error' : ''}\\"\\n              bind:value={entryFee}\\n              min=\\"0\\"\\n              max=\\"100\\"\\n              step=\\"1\\"\\n              disabled={isSubmitting || hasEntries}\\n            />\\n            {#if validationErrors.entryFee}\\n              <div class=\\"error-message\\">{validationErrors.entryFee}</div>\\n            {/if}\\n            <div class=\\"help-text\\">\\n              {hasEntries ? 'Cannot change after entries submitted' : 'Fee per entry (0 for free)'}\\n            </div>\\n          </div>\\n\\n          <div class=\\"form-group\\">\\n            <label for=\\"maxEntries\\">Max Entries Per Member</label>\\n            <input\\n              type=\\"number\\"\\n              id=\\"maxEntries\\"\\n              class=\\"form-control {validationErrors.maxEntriesPerMember ? 'error' : ''}\\"\\n              bind:value={maxEntriesPerMember}\\n              min=\\"1\\"\\n              max=\\"20\\"\\n              disabled={isSubmitting || hasEntries}\\n            />\\n            {#if validationErrors.maxEntriesPerMember}\\n              <div class=\\"error-message\\">{validationErrors.maxEntriesPerMember}</div>\\n            {/if}\\n            <div class=\\"help-text\\">\\n              {hasEntries ? 'Cannot change after entries submitted' : 'Maximum entries allowed per member'}\\n            </div>\\n          </div>\\n        </div>\\n\\n        <!-- Category System -->\\n        <div class=\\"section-title\\">Category System</div>\\n        \\n        <div class=\\"form-group\\">\\n          <label>Ranking System</label>\\n          <div class=\\"radio-group\\">\\n            <label class=\\"radio-option\\">\\n              <input\\n                type=\\"radio\\"\\n                bind:group={categorySystem}\\n                value=\\"default\\"\\n                disabled={isSubmitting || hasEntries}\\n              />\\n              <span class=\\"radio-label\\">\\n                <strong>Default BJCP System</strong>\\n                <div class=\\"radio-description\\">\\n                  Allow all BJCP categories, rank each category individually\\n                </div>\\n              </span>\\n            </label>\\n            \\n            <label class=\\"radio-option\\">\\n              <input\\n                type=\\"radio\\"\\n                bind:group={categorySystem}\\n                value=\\"custom\\"\\n                disabled={isSubmitting || hasEntries}\\n              />\\n              <span class=\\"radio-label\\">\\n                <strong>Custom Category System</strong>\\n                <div class=\\"radio-description\\">\\n                  Select specific categories and create custom ranking groups\\n                </div>\\n              </span>\\n            </label>\\n          </div>\\n          {#if hasEntries}\\n            <div class=\\"help-text\\">Cannot change after entries submitted</div>\\n          {/if}\\n        </div>\\n        \\n        {#if categorySystem === 'custom'}\\n          <div class=\\"custom-category-section\\">\\n            <CategorySelector\\n              bind:selectedCategories\\n              disabled={hasEntries}\\n              on:change={() => {\\n                // Reset ranking groups when categories change\\n                if (!hasEntries) {\\n                  rankingGroups = [];\\n                }\\n              }}\\n            />\\n            \\n            {#if selectedCategories.length > 0}\\n              <div style=\\"margin-top: 1.5rem;\\">\\n                <RankingGroupManager\\n                  bind:rankingGroups\\n                  {selectedCategories}\\n                  disabled={hasEntries}\\n                  on:change={() => {}}\\n                />\\n              </div>\\n            {/if}\\n          </div>\\n        {/if}\\n\\n        <!-- Status -->\\n        <div class=\\"section-title\\">Status</div>\\n        \\n        <div class=\\"checkbox-group\\">\\n          <input\\n            type=\\"checkbox\\"\\n            id=\\"isActive\\"\\n            bind:checked={isActive}\\n            disabled={isSubmitting}\\n          />\\n          <label for=\\"isActive\\">\\n            Competition is active and accepting entries\\n          </label>\\n        </div>\\n        <div class=\\"help-text\\">\\n          Uncheck to close competition to new entries\\n        </div>\\n\\n        <!-- Form Actions -->\\n        <div class=\\"form-actions\\">\\n          <Button\\n            variant=\\"secondary\\"\\n            on:click={handleCancel}\\n            disabled={isSubmitting}\\n          >\\n            Cancel\\n          </Button>\\n          <Button\\n            variant=\\"primary\\"\\n            type=\\"submit\\"\\n            disabled={isSubmitting}\\n          >\\n            {isSubmitting ? 'Saving...' : 'Save Changes'}\\n          </Button>\\n        </div>\\n      </form>\\n    </div>\\n  {/if}\\n</Container>"],"names":[],"mappings":"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"}`
};
const Page = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $page, $$unsubscribe_page;
  let $userProfile, $$unsubscribe_userProfile;
  $$unsubscribe_page = subscribe(page, (value) => $page = value);
  $$unsubscribe_userProfile = subscribe(userProfile, (value) => $userProfile = value);
  onDestroy(() => {
  });
  $$result.css.add(css);
  let $$settled;
  let $$rendered;
  let previous_head = $$result.head;
  do {
    $$settled = true;
    $$result.head = previous_head;
    {
      if ($userProfile && !$userProfile.is_officer) {
        goto();
      }
    }
    $page.params.id;
    $$rendered = `   ${validate_component(Container, "Container").$$render($$result, { size: "md" }, {}, {
      default: () => {
        return `${validate_component(Hero, "Hero").$$render(
          $$result,
          {
            title: "Edit Competition",
            subtitle: "Update competition details",
            icon: "✏️",
            center: true
          },
          {},
          {}
        )} ${`${validate_component(LoadingSpinner, "LoadingSpinner").$$render($$result, { message: "Loading competition..." }, {}, {})}`}`;
      }
    })}`;
  } while (!$$settled);
  $$unsubscribe_page();
  $$unsubscribe_userProfile();
  return $$rendered;
});

export { Page as default };
//# sourceMappingURL=_page.svelte-DvBP8K-V.js.map

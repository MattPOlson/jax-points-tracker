import { c as create_ssr_component, a as subscribe, o as onDestroy, v as validate_component, d as escape, e as each } from './ssr-CFMHIens.js';
import { u as user } from './user-DxtT6N6z.js';
import { u as userProfile } from './userProfile-BAUZwBX2.js';
import { w as writable } from './index-Ct3aIOD7.js';
import { s as supabase } from './supabaseClient-D_8i9Ohq.js';
import { p as page } from './stores-C-uFbAzB.js';
import { f as formatDate, a as formatSubmissionTime } from './dateUtils-D_vm5-qZ.js';
import { B as Button } from './Button-DfG06A7O.js';
import { H as Hero } from './Hero-B5bq0fDE.js';
import { L as LoadingSpinner } from './LoadingSpinner-DyPK4ei8.js';
import { E as EmptyState } from './EmptyState-OwOXOni3.js';
import { C as Container } from './Container-C5rGKtUK.js';
import './false-CRHihH2U.js';
import '@supabase/supabase-js';
import './client-C3KLrhj1.js';
import './exports-DKuYoYKl.js';

const allSubmissions = writable([]);
const message = writable("");
const loading = writable(false);
let lastLoaded = 0;
const CACHE_MS = 1e4;
async function loadAllSubmissions(force = false) {
  if (!force && Date.now() - lastLoaded < CACHE_MS) return;
  loading.set(true);
  const { data, error } = await supabase.from("point_submissions").select(`id, category, description, points, event_date, submitted_at, approved, rejection_reason, members(name)`).order("event_date", { ascending: false });
  lastLoaded = Date.now();
  if (!error) {
    console.log("[viewAll] Supabase returned:", data);
    allSubmissions.set(data);
    message.set("");
  } else {
    console.error("Error loading submissions:", error);
    allSubmissions.set([]);
    message.set("Failed to load all submissions.");
  }
  loading.set(false);
}
const css = {
  code: '.controls-section.svelte-13zpm2r.svelte-13zpm2r{background:white;border-radius:6px;box-shadow:0 4px 6px rgba(0, 0, 0, 0.1);margin-bottom:2rem;overflow:hidden}.controls-header.svelte-13zpm2r.svelte-13zpm2r{display:flex;justify-content:space-between;align-items:center;padding:1rem 1.5rem;border-bottom:1px solid #e5e7eb}.filter-toggle.svelte-13zpm2r.svelte-13zpm2r{background-color:#6b7280;color:white;border:none;border-radius:6px;padding:0.75rem 1.5rem;font-size:1rem;font-weight:500;cursor:pointer;transition:all 0.2s ease}.filter-toggle.svelte-13zpm2r.svelte-13zpm2r:hover{background-color:#4b5563}.filter-toggle.active.svelte-13zpm2r.svelte-13zpm2r{background-color:#ff3e00}.filter-toggle.active.svelte-13zpm2r.svelte-13zpm2r:hover{background-color:#e63600}.stats-summary.svelte-13zpm2r.svelte-13zpm2r{display:flex;gap:1rem}.stat.svelte-13zpm2r.svelte-13zpm2r{font-weight:500;color:#666}.stat.filtered.svelte-13zpm2r.svelte-13zpm2r{color:#ff3e00;font-weight:600}.filters-grid.svelte-13zpm2r.svelte-13zpm2r{display:grid;grid-template-columns:repeat(auto-fit, minmax(200px, 1fr));gap:1rem;padding:1.5rem;text-align:left}.filter-group.svelte-13zpm2r.svelte-13zpm2r{display:flex;flex-direction:column}.filter-group.svelte-13zpm2r label.svelte-13zpm2r{font-weight:500;color:#333;margin-bottom:0.5rem}.filter-group.svelte-13zpm2r input.svelte-13zpm2r,.filter-group.svelte-13zpm2r select.svelte-13zpm2r{padding:0.75rem;border:1px solid #d1d5db;border-radius:6px;font-size:1rem;transition:border-color 0.2s}.filter-group.svelte-13zpm2r input.svelte-13zpm2r:focus,.filter-group.svelte-13zpm2r select.svelte-13zpm2r:focus{outline:none;border-color:#ff3e00;box-shadow:0 0 0 1px #ff3e00}.filter-actions.svelte-13zpm2r.svelte-13zpm2r{display:flex;align-items:end}.clear-button.svelte-13zpm2r.svelte-13zpm2r{background-color:#6b7280;color:white;border:none;border-radius:6px;padding:0.75rem 1rem;font-size:0.9rem;font-weight:500;cursor:pointer;transition:all 0.2s ease;height:fit-content}.clear-button.svelte-13zpm2r.svelte-13zpm2r:hover{background-color:#4b5563}.stats-section.svelte-13zpm2r.svelte-13zpm2r{margin-bottom:2rem}.stats-grid.svelte-13zpm2r.svelte-13zpm2r{display:grid;grid-template-columns:repeat(auto-fit, minmax(200px, 1fr));gap:1rem;max-width:800px;margin:0 auto}.stat-card.svelte-13zpm2r.svelte-13zpm2r{background:white;border-radius:6px;padding:1.5rem;box-shadow:0 2px 8px rgba(0, 0, 0, 0.1);display:flex;align-items:center;gap:1rem;border-left:4px solid}.stat-card.approved.svelte-13zpm2r.svelte-13zpm2r{border-left-color:#059669}.stat-card.pending.svelte-13zpm2r.svelte-13zpm2r{border-left-color:#d97706}.stat-card.rejected.svelte-13zpm2r.svelte-13zpm2r{border-left-color:#dc2626}.stat-card.total.svelte-13zpm2r.svelte-13zpm2r{border-left-color:#ff3e00}.stat-icon.svelte-13zpm2r.svelte-13zpm2r{font-size:2rem}.stat-number.svelte-13zpm2r.svelte-13zpm2r{font-size:2rem;font-weight:700;color:#333;line-height:1}.stat-label.svelte-13zpm2r.svelte-13zpm2r{font-size:0.9rem;color:#666;font-weight:500}.table-wrapper.svelte-13zpm2r.svelte-13zpm2r{background:white;border-radius:6px;box-shadow:0 4px 6px rgba(0, 0, 0, 0.1);overflow:hidden;overflow-x:auto;text-align:left}.desktop-table.svelte-13zpm2r.svelte-13zpm2r{width:100%;border-collapse:collapse;min-width:900px}.desktop-table.svelte-13zpm2r th.svelte-13zpm2r{background:#f8fafc;padding:1rem;text-align:left;font-weight:600;color:#333;border-bottom:2px solid #e5e7eb;white-space:nowrap}.desktop-table.svelte-13zpm2r th.sortable.svelte-13zpm2r{cursor:pointer;user-select:none;transition:background-color 0.2s}.desktop-table.svelte-13zpm2r th.sortable.svelte-13zpm2r:hover{background:#f1f5f9}.desktop-table.svelte-13zpm2r th.sort-asc.svelte-13zpm2r::after{content:" ▲";font-size:0.75rem;color:#ff3e00}.desktop-table.svelte-13zpm2r th.sort-desc.svelte-13zpm2r::after{content:" ▼";font-size:0.75rem;color:#ff3e00}.desktop-table.svelte-13zpm2r td.svelte-13zpm2r{padding:1rem;border-bottom:1px solid #f1f5f9;vertical-align:middle}.submission-row.svelte-13zpm2r.svelte-13zpm2r{transition:background-color 0.2s}.submission-row.svelte-13zpm2r.svelte-13zpm2r:hover{background-color:#f8fafc}.member-info.svelte-13zpm2r.svelte-13zpm2r{display:flex;align-items:center;gap:0.75rem}.member-avatar.svelte-13zpm2r.svelte-13zpm2r{width:36px;height:36px;border-radius:50%;background:#ff3e00;color:white;display:flex;align-items:center;justify-content:center;font-weight:700;font-size:0.9rem;flex-shrink:0}.member-name.svelte-13zpm2r.svelte-13zpm2r{font-weight:500;color:#333}.category-badge.svelte-13zpm2r.svelte-13zpm2r{background:#f3f4f6;color:#374151;padding:0.25rem 0.75rem;border-radius:6px;font-size:0.85rem;font-weight:600}.points-value.svelte-13zpm2r.svelte-13zpm2r{font-weight:700;color:#ff3e00;font-size:1.1rem}.status-badge.svelte-13zpm2r.svelte-13zpm2r{display:inline-flex;align-items:center;gap:0.25rem;padding:0.25rem 0.75rem;border-radius:12px;font-size:0.8rem;font-weight:600;white-space:nowrap}.status-badge.status-approved.svelte-13zpm2r.svelte-13zpm2r{background:#dcfce7;color:#166534}.status-badge.status-pending.svelte-13zpm2r.svelte-13zpm2r{background:#fef3c7;color:#92400e}.status-badge.status-rejected.svelte-13zpm2r.svelte-13zpm2r{background:#fecaca;color:#991b1b}.mobile-cards.svelte-13zpm2r.svelte-13zpm2r{display:none}.mobile-card.svelte-13zpm2r.svelte-13zpm2r{background:white;border-radius:6px;padding:1.5rem;margin-bottom:1rem;box-shadow:0 2px 8px rgba(0, 0, 0, 0.1);border-left:4px solid #e5e7eb;text-align:left}.card-header.svelte-13zpm2r.svelte-13zpm2r{display:flex;justify-content:space-between;align-items:center;margin-bottom:1rem}.member-details.svelte-13zpm2r.svelte-13zpm2r{display:flex;flex-direction:column}.submission-date.svelte-13zpm2r.svelte-13zpm2r{font-size:0.8rem;color:#666}.card-body.svelte-13zpm2r.svelte-13zpm2r{display:flex;flex-direction:column;gap:0.75rem}.card-row.svelte-13zpm2r.svelte-13zpm2r{display:flex;justify-content:space-between;align-items:center}.card-row.svelte-13zpm2r .label.svelte-13zpm2r{font-weight:500;color:#666;min-width:100px}.card-row.svelte-13zpm2r .value.svelte-13zpm2r{font-weight:600;color:#333;text-align:right}.rejection-row.svelte-13zpm2r.svelte-13zpm2r{background:#fef2f2;border:1px solid #fecaca;border-radius:4px;padding:0.75rem;margin-top:0.5rem}.rejection-text.svelte-13zpm2r.svelte-13zpm2r{color:#dc2626;font-style:italic}@media(max-width: 768px){.controls-header.svelte-13zpm2r.svelte-13zpm2r{flex-direction:column;gap:1rem;text-align:center}.filters-grid.svelte-13zpm2r.svelte-13zpm2r{grid-template-columns:1fr;gap:1rem}.stats-grid.svelte-13zpm2r.svelte-13zpm2r{grid-template-columns:repeat(2, 1fr);gap:0.75rem}.stat-card.svelte-13zpm2r.svelte-13zpm2r{padding:1rem}.stat-icon.svelte-13zpm2r.svelte-13zpm2r{font-size:1.5rem}.stat-number.svelte-13zpm2r.svelte-13zpm2r{font-size:1.5rem}.table-wrapper.svelte-13zpm2r.svelte-13zpm2r{display:none}.mobile-cards.svelte-13zpm2r.svelte-13zpm2r{display:block}.card-header.svelte-13zpm2r .member-info.svelte-13zpm2r{flex-direction:column;align-items:flex-start;gap:0.5rem}.card-row.svelte-13zpm2r.svelte-13zpm2r{flex-direction:column;align-items:flex-start;gap:0.25rem}.card-row.svelte-13zpm2r .value.svelte-13zpm2r{text-align:left}}@media(max-width: 480px){.stats-grid.svelte-13zpm2r.svelte-13zpm2r{grid-template-columns:1fr}.controls-header.svelte-13zpm2r.svelte-13zpm2r{padding:1rem}.filters-grid.svelte-13zpm2r.svelte-13zpm2r{padding:1rem}.member-info.svelte-13zpm2r.svelte-13zpm2r{gap:0.5rem}.member-avatar.svelte-13zpm2r.svelte-13zpm2r{width:32px;height:32px;font-size:0.8rem}.mobile-card.svelte-13zpm2r.svelte-13zpm2r{padding:1rem}}@media(min-width: 769px){.mobile-cards.svelte-13zpm2r.svelte-13zpm2r{display:none}}',
  map: `{"version":3,"file":"+page.svelte","sources":["+page.svelte"],"sourcesContent":["<script>\\n  import { onMount, onDestroy } from \\"svelte\\";\\n  import { user } from \\"$lib/stores/user\\";\\n  import { userProfile } from \\"$lib/stores/userProfile\\";\\n  import {\\n    allSubmissions as storeAll,\\n    loadAllSubmissions,\\n    loading,\\n  } from \\"$lib/stores/viewAllStore.js\\";\\n  import { page } from \\"$app/stores\\";\\n  import { formatDate, formatSubmissionTime } from \\"$lib/utils/dateUtils.js\\";\\n  import { Hero, Container, LoadingSpinner, EmptyState, Button } from '$lib/components/ui';\\n\\n  let submissions = [];\\n  let filtered = [];\\n  let filters = {\\n    name: \\"\\",\\n    category: \\"\\",\\n    status: \\"\\",\\n    startDate: \\"\\",\\n    endDate: \\"\\",\\n  };\\n  let sortColumn = \\"event_date\\";\\n  let sortDirection = \\"desc\\";\\n  let showFilters = false;\\n  let cleanupFunctions = [];\\n\\n  $: submissions = $storeAll || [];\\n\\n  // Setup tab focus handler with F5 fix\\n  // Removed tab visibility handler - causes issues with Supabase tab switching\\n  function setupEventHandlers() {\\n    // Tab visibility handling removed for better Supabase compatibility\\n    return () => {\\n      // No cleanup needed now\\n    };\\n  }\\n\\n  // Check if user is authorized\\n  $: isAuthorized = $user && $userProfile?.is_officer;\\n\\n  // Load data when authorized\\n  $: if (isAuthorized) {\\n    loadSubmissions(true);\\n  }\\n\\n  // Apply filters when submissions or filters change\\n  $: if (submissions) {\\n    applyFilters();\\n  }\\n\\n  // Format date helper\\n  //function formatDate(dateString) {\\n  //  try {\\n  //    return new Date(dateString).toLocaleDateString('en-US', {\\n  //      year: 'numeric',\\n  //      month: 'short',\\n  //      day: 'numeric'\\n  //    });\\n  //  } catch {\\n  //    return 'Invalid Date';\\n  //  }\\n  //}\\n\\n  // Format status helper\\n  function formatStatus(submission) {\\n    if (submission.approved === true)\\n      return { text: \\"Approved\\", icon: \\"✅\\", class: \\"status-approved\\" };\\n    if (submission.rejection_reason)\\n      return { text: \\"Rejected\\", icon: \\"❌\\", class: \\"status-rejected\\" };\\n    return { text: \\"Pending\\", icon: \\"⏳\\", class: \\"status-pending\\" };\\n  }\\n\\n  // Get unique categories for filter dropdown\\n  $: categories = [\\n    ...new Set(submissions.map((s) => s.category).filter(Boolean)),\\n  ].sort();\\n\\n  // Load submissions\\n  async function loadSubmissions(force = false) {\\n    try {\\n      await loadAllSubmissions(force);\\n    } catch (error) {\\n      console.error(\\"Error loading submissions:\\", error);\\n    }\\n  }\\n\\n  // Apply filters and sorting\\n  function applyFilters() {\\n    let result = submissions.filter((s) => {\\n      const matchesName =\\n        filters.name === \\"\\" ||\\n        s.members?.name?.toLowerCase().includes(filters.name.toLowerCase());\\n      const matchesCategory =\\n        filters.category === \\"\\" ||\\n        s.category?.toLowerCase().includes(filters.category.toLowerCase());\\n      const matchesStatus =\\n        filters.status === \\"\\" ||\\n        (filters.status === \\"approved\\" && s.approved === true) ||\\n        (filters.status === \\"rejected\\" && s.rejection_reason) ||\\n        (filters.status === \\"pending\\" &&\\n          s.approved === false &&\\n          !s.rejection_reason);\\n\\n      const date = new Date(s.event_date);\\n      const afterStart =\\n        filters.startDate === \\"\\" || new Date(filters.startDate) <= date;\\n      const beforeEnd =\\n        filters.endDate === \\"\\" || new Date(filters.endDate) >= date;\\n\\n      return (\\n        matchesName &&\\n        matchesCategory &&\\n        matchesStatus &&\\n        afterStart &&\\n        beforeEnd\\n      );\\n    });\\n\\n    // Apply sorting\\n    result.sort((a, b) => {\\n      let aVal = a[sortColumn];\\n      let bVal = b[sortColumn];\\n\\n      // Handle special cases\\n      if (sortColumn === \\"members\\") {\\n        aVal = a.members?.name || \\"\\";\\n        bVal = b.members?.name || \\"\\";\\n      }\\n\\n      // Handle dates\\n      if (sortColumn === \\"event_date\\" || sortColumn === \\"submitted_at\\") {\\n        aVal = new Date(aVal);\\n        bVal = new Date(bVal);\\n      }\\n\\n      // Handle numbers\\n      if (typeof aVal === \\"number\\" && typeof bVal === \\"number\\") {\\n        return sortDirection === \\"asc\\" ? aVal - bVal : bVal - aVal;\\n      }\\n\\n      // Handle strings and dates\\n      if (aVal < bVal) return sortDirection === \\"asc\\" ? -1 : 1;\\n      if (aVal > bVal) return sortDirection === \\"asc\\" ? 1 : -1;\\n      return 0;\\n    });\\n\\n    filtered = result;\\n  }\\n\\n  // Sort table\\n  function sortTable(column) {\\n    if (sortColumn === column) {\\n      sortDirection = sortDirection === \\"asc\\" ? \\"desc\\" : \\"asc\\";\\n    } else {\\n      sortColumn = column;\\n      sortDirection = \\"asc\\";\\n    }\\n    applyFilters();\\n  }\\n\\n  // Clear all filters\\n  function clearFilters() {\\n    filters = {\\n      name: \\"\\",\\n      category: \\"\\",\\n      status: \\"\\",\\n      startDate: \\"\\",\\n      endDate: \\"\\",\\n    };\\n    applyFilters();\\n  }\\n\\n  // Get filter stats\\n  $: filterStats = {\\n    total: submissions.length,\\n    filtered: filtered.length,\\n    approved: filtered.filter((s) => s.approved === true).length,\\n    pending: filtered.filter((s) => s.approved === false && !s.rejection_reason)\\n      .length,\\n    rejected: filtered.filter((s) => s.rejection_reason).length,\\n  };\\n\\n  onMount(() => {\\n    // Setup tab focus handling\\n    const cleanup = setupEventHandlers();\\n    cleanupFunctions.push(cleanup);\\n\\n    // Initial load if authorized\\n    if (isAuthorized) {\\n      loadSubmissions(true);\\n    }\\n  });\\n\\n  onDestroy(() => {\\n    // Cleanup all event listeners\\n    cleanupFunctions.forEach((cleanup) => cleanup());\\n  });\\n\\n  // Reload when navigating to view all page\\n  $: if ($page.url.pathname === \\"/officers/view-all\\" && isAuthorized) {\\n    loadSubmissions(true);\\n  }\\n<\/script>\\n\\n<Container size=\\"xl\\">\\n  <Hero title=\\"View All Points\\" subtitle=\\"Browse and filter all member submissions\\" icon=\\"📊\\" center={true} />\\n\\n  {#if $loading}\\n    <LoadingSpinner message=\\"Loading all submissions...\\" />\\n  {:else if !$user}\\n    <EmptyState\\n      icon=\\"🔒\\"\\n      title=\\"Authentication Required\\"\\n      message=\\"Please log in to view all submissions.\\"\\n      actionLabel=\\"Sign In\\"\\n      actionHref=\\"/login\\"\\n    />\\n  {:else if !$userProfile?.is_officer}\\n    <EmptyState\\n      icon=\\"⚠️\\"\\n      title=\\"Access Restricted\\"\\n      message=\\"Officer privileges are required to view all submissions.\\"\\n      actionLabel=\\"Back to Officer Tools\\"\\n      actionHref=\\"/officers\\"\\n    />\\n  {:else}\\n    <!-- Filter Controls -->\\n    <div class=\\"controls-section\\">\\n      <div class=\\"controls-header\\">\\n        <button\\n          on:click={() => (showFilters = !showFilters)}\\n          class=\\"filter-toggle\\"\\n          class:active={showFilters}\\n        >\\n          🔍 {showFilters ? \\"Hide\\" : \\"Show\\"} Filters\\n        </button>\\n\\n        <div class=\\"stats-summary\\">\\n          <span class=\\"stat\\">Total: {filterStats.total}</span>\\n          {#if filterStats.filtered !== filterStats.total}\\n            <span class=\\"stat filtered\\">Showing: {filterStats.filtered}</span>\\n          {/if}\\n        </div>\\n      </div>\\n\\n      {#if showFilters}\\n        <div class=\\"filters-grid\\">\\n          <div class=\\"filter-group\\">\\n            <label for=\\"name-filter\\">Member Name</label>\\n            <input\\n              id=\\"name-filter\\"\\n              type=\\"text\\"\\n              placeholder=\\"Search by name...\\"\\n              bind:value={filters.name}\\n              on:input={applyFilters}\\n            />\\n          </div>\\n\\n          <div class=\\"filter-group\\">\\n            <label for=\\"category-filter\\">Category</label>\\n            <select\\n              id=\\"category-filter\\"\\n              bind:value={filters.category}\\n              on:change={applyFilters}\\n            >\\n              <option value=\\"\\">All Categories</option>\\n              {#each categories as category}\\n                <option value={category}>{category}</option>\\n              {/each}\\n            </select>\\n          </div>\\n\\n          <div class=\\"filter-group\\">\\n            <label for=\\"status-filter\\">Status</label>\\n            <select\\n              id=\\"status-filter\\"\\n              bind:value={filters.status}\\n              on:change={applyFilters}\\n            >\\n              <option value=\\"\\">All Status</option>\\n              <option value=\\"approved\\">✅ Approved</option>\\n              <option value=\\"pending\\">⏳ Pending</option>\\n              <option value=\\"rejected\\">❌ Rejected</option>\\n            </select>\\n          </div>\\n\\n          <div class=\\"filter-group\\">\\n            <label for=\\"start-date\\">Start Date</label>\\n            <input\\n              id=\\"start-date\\"\\n              type=\\"date\\"\\n              bind:value={filters.startDate}\\n              on:change={applyFilters}\\n            />\\n          </div>\\n\\n          <div class=\\"filter-group\\">\\n            <label for=\\"end-date\\">End Date</label>\\n            <input\\n              id=\\"end-date\\"\\n              type=\\"date\\"\\n              bind:value={filters.endDate}\\n              on:change={applyFilters}\\n            />\\n          </div>\\n\\n          <div class=\\"filter-actions\\">\\n            <button on:click={clearFilters} class=\\"clear-button\\">\\n              🗑️ Clear All\\n            </button>\\n          </div>\\n        </div>\\n      {/if}\\n    </div>\\n\\n    <!-- Stats Cards -->\\n    {#if filtered.length > 0}\\n      <div class=\\"stats-section\\">\\n        <div class=\\"stats-grid\\">\\n          <div class=\\"stat-card approved\\">\\n            <div class=\\"stat-icon\\">✅</div>\\n            <div class=\\"stat-content\\">\\n              <div class=\\"stat-number\\">{filterStats.approved}</div>\\n              <div class=\\"stat-label\\">Approved</div>\\n            </div>\\n          </div>\\n          <div class=\\"stat-card pending\\">\\n            <div class=\\"stat-icon\\">⏳</div>\\n            <div class=\\"stat-content\\">\\n              <div class=\\"stat-number\\">{filterStats.pending}</div>\\n              <div class=\\"stat-label\\">Pending</div>\\n            </div>\\n          </div>\\n          <div class=\\"stat-card rejected\\">\\n            <div class=\\"stat-icon\\">❌</div>\\n            <div class=\\"stat-content\\">\\n              <div class=\\"stat-number\\">{filterStats.rejected}</div>\\n              <div class=\\"stat-label\\">Rejected</div>\\n            </div>\\n          </div>\\n          <div class=\\"stat-card total\\">\\n            <div class=\\"stat-icon\\">📋</div>\\n            <div class=\\"stat-content\\">\\n              <div class=\\"stat-number\\">{filterStats.filtered}</div>\\n              <div class=\\"stat-label\\">Showing</div>\\n            </div>\\n          </div>\\n        </div>\\n      </div>\\n\\n      <!-- Desktop Table -->\\n      <div class=\\"table-wrapper\\">\\n        <table class=\\"desktop-table\\">\\n          <thead>\\n            <tr>\\n              <th\\n                class=\\"sortable\\"\\n                class:sort-asc={sortColumn === \\"members\\" &&\\n                  sortDirection === \\"asc\\"}\\n                class:sort-desc={sortColumn === \\"members\\" &&\\n                  sortDirection === \\"desc\\"}\\n                on:click={() => sortTable(\\"members\\")}\\n              >\\n                Member\\n              </th>\\n              <th\\n                class=\\"sortable\\"\\n                class:sort-asc={sortColumn === \\"category\\" &&\\n                  sortDirection === \\"asc\\"}\\n                class:sort-desc={sortColumn === \\"category\\" &&\\n                  sortDirection === \\"desc\\"}\\n                on:click={() => sortTable(\\"category\\")}\\n              >\\n                Category\\n              </th>\\n              <th\\n                class=\\"sortable\\"\\n                class:sort-asc={sortColumn === \\"description\\" &&\\n                  sortDirection === \\"asc\\"}\\n                class:sort-desc={sortColumn === \\"description\\" &&\\n                  sortDirection === \\"desc\\"}\\n                on:click={() => sortTable(\\"description\\")}\\n              >\\n                Description\\n              </th>\\n              <th\\n                class=\\"sortable\\"\\n                class:sort-asc={sortColumn === \\"points\\" &&\\n                  sortDirection === \\"asc\\"}\\n                class:sort-desc={sortColumn === \\"points\\" &&\\n                  sortDirection === \\"desc\\"}\\n                on:click={() => sortTable(\\"points\\")}\\n              >\\n                Points\\n              </th>\\n              <th\\n                class=\\"sortable\\"\\n                class:sort-asc={sortColumn === \\"event_date\\" &&\\n                  sortDirection === \\"asc\\"}\\n                class:sort-desc={sortColumn === \\"event_date\\" &&\\n                  sortDirection === \\"desc\\"}\\n                on:click={() => sortTable(\\"event_date\\")}\\n              >\\n                Event Date\\n              </th>\\n              <th\\n                class=\\"sortable\\"\\n                class:sort-asc={sortColumn === \\"submitted_at\\" &&\\n                  sortDirection === \\"asc\\"}\\n                class:sort-desc={sortColumn === \\"submitted_at\\" &&\\n                  sortDirection === \\"desc\\"}\\n                on:click={() => sortTable(\\"submitted_at\\")}\\n              >\\n                Submitted\\n              </th>\\n              <th>Status</th>\\n            </tr>\\n          </thead>\\n          <tbody>\\n            {#each filtered as s}\\n              <tr class=\\"submission-row\\">\\n                <td class=\\"member-cell\\">\\n                  <div class=\\"member-info\\">\\n                    <div class=\\"member-avatar\\">\\n                      {(s.members?.name || \\"U\\")[0].toUpperCase()}\\n                    </div>\\n                    <span class=\\"member-name\\"\\n                      >{s.members?.name || \\"Unknown\\"}</span\\n                    >\\n                  </div>\\n                </td>\\n                <td class=\\"category-cell\\">\\n                  <span class=\\"category-badge\\">{s.category}</span>\\n                </td>\\n                <td class=\\"description-cell\\">{s.description}</td>\\n                <td class=\\"points-cell\\">\\n                  <span class=\\"points-value\\">{s.points}</span>\\n                </td>\\n                <td class=\\"date-cell\\">{formatDate(s.event_date)}</td>\\n                <td class=\\"submitted-cell\\">\\n                  {s.submitted_at\\n                    ? formatDate(s.submitted_at)\\n                    : \\"Not available\\"}\\n                </td>\\n                <td class=\\"status-cell\\">\\n                  <span class=\\"status-badge {formatStatus(s).class}\\">\\n                    <span class=\\"status-icon\\">{formatStatus(s).icon}</span>\\n                    {formatStatus(s).text}\\n                  </span>\\n                </td>\\n              </tr>\\n            {/each}\\n          </tbody>\\n        </table>\\n      </div>\\n\\n      <!-- Mobile Cards -->\\n      <div class=\\"mobile-cards\\">\\n        {#each filtered as s}\\n          <div class=\\"mobile-card\\">\\n            <div class=\\"card-header\\">\\n              <div class=\\"member-info\\">\\n                <div class=\\"member-avatar\\">\\n                  {(s.members?.name || \\"U\\")[0].toUpperCase()}\\n                </div>\\n                <div class=\\"member-details\\">\\n                  <div class=\\"member-name\\">{s.members?.name || \\"Unknown\\"}</div>\\n                  <div class=\\"submission-date\\">\\n                    Submitted {formatSubmissionTime(s.submitted_at)}\\n                  </div>\\n                </div>\\n              </div>\\n              <span class=\\"status-badge {formatStatus(s).class}\\">\\n                <span class=\\"status-icon\\">{formatStatus(s).icon}</span>\\n                {formatStatus(s).text}\\n              </span>\\n            </div>\\n\\n            <div class=\\"card-body\\">\\n              <div class=\\"card-row\\">\\n                <span class=\\"label\\">Category:</span>\\n                <span class=\\"value\\">{s.category}</span>\\n              </div>\\n              <div class=\\"card-row\\">\\n                <span class=\\"label\\">Description:</span>\\n                <span class=\\"value\\">{s.description}</span>\\n              </div>\\n              <div class=\\"card-row\\">\\n                <span class=\\"label\\">Points:</span>\\n                <span class=\\"value points-value\\">{s.points}</span>\\n              </div>\\n              <div class=\\"card-row\\">\\n                <span class=\\"label\\">Event Date:</span>\\n                <span class=\\"value\\">{formatDate(s.event_date)}</span>\\n              </div>\\n              {#if s.rejection_reason}\\n                <div class=\\"card-row rejection-row\\">\\n                  <span class=\\"label\\">Rejection Reason:</span>\\n                  <span class=\\"value rejection-text\\">{s.rejection_reason}</span>\\n                </div>\\n              {/if}\\n            </div>\\n          </div>\\n        {/each}\\n      </div>\\n    {:else}\\n      <EmptyState\\n        icon=\\"🔍\\"\\n        title=\\"No Results Found\\"\\n        message=\\"No submissions match your current filters.\\"\\n      >\\n        <Button variant=\\"secondary\\" on:click={clearFilters}>\\n          Clear Filters\\n        </Button>\\n      </EmptyState>\\n    {/if}\\n  {/if}\\n</Container>\\n\\n<style>\\n\\n  /* Controls Section */\\n  .controls-section {\\n    background: white;\\n    border-radius: 6px;\\n    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\\n    margin-bottom: 2rem;\\n    overflow: hidden;\\n  }\\n\\n  .controls-header {\\n    display: flex;\\n    justify-content: space-between;\\n    align-items: center;\\n    padding: 1rem 1.5rem;\\n    border-bottom: 1px solid #e5e7eb;\\n  }\\n\\n  .filter-toggle {\\n    background-color: #6b7280;\\n    color: white;\\n    border: none;\\n    border-radius: 6px;\\n    padding: 0.75rem 1.5rem;\\n    font-size: 1rem;\\n    font-weight: 500;\\n    cursor: pointer;\\n    transition: all 0.2s ease;\\n  }\\n\\n  .filter-toggle:hover {\\n    background-color: #4b5563;\\n  }\\n\\n  .filter-toggle.active {\\n    background-color: #ff3e00;\\n  }\\n\\n  .filter-toggle.active:hover {\\n    background-color: #e63600;\\n  }\\n\\n  .stats-summary {\\n    display: flex;\\n    gap: 1rem;\\n  }\\n\\n  .stat {\\n    font-weight: 500;\\n    color: #666;\\n  }\\n\\n  .stat.filtered {\\n    color: #ff3e00;\\n    font-weight: 600;\\n  }\\n\\n  .filters-grid {\\n    display: grid;\\n    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\\n    gap: 1rem;\\n    padding: 1.5rem;\\n    text-align: left;\\n  }\\n\\n  .filter-group {\\n    display: flex;\\n    flex-direction: column;\\n  }\\n\\n  .filter-group label {\\n    font-weight: 500;\\n    color: #333;\\n    margin-bottom: 0.5rem;\\n  }\\n\\n  .filter-group input,\\n  .filter-group select {\\n    padding: 0.75rem;\\n    border: 1px solid #d1d5db;\\n    border-radius: 6px;\\n    font-size: 1rem;\\n    transition: border-color 0.2s;\\n  }\\n\\n  .filter-group input:focus,\\n  .filter-group select:focus {\\n    outline: none;\\n    border-color: #ff3e00;\\n    box-shadow: 0 0 0 1px #ff3e00;\\n  }\\n\\n  .filter-actions {\\n    display: flex;\\n    align-items: end;\\n  }\\n\\n  .clear-button {\\n    background-color: #6b7280;\\n    color: white;\\n    border: none;\\n    border-radius: 6px;\\n    padding: 0.75rem 1rem;\\n    font-size: 0.9rem;\\n    font-weight: 500;\\n    cursor: pointer;\\n    transition: all 0.2s ease;\\n    height: fit-content;\\n  }\\n\\n  .clear-button:hover {\\n    background-color: #4b5563;\\n  }\\n\\n  /* Stats Section */\\n  .stats-section {\\n    margin-bottom: 2rem;\\n  }\\n\\n  .stats-grid {\\n    display: grid;\\n    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\\n    gap: 1rem;\\n    max-width: 800px;\\n    margin: 0 auto;\\n  }\\n\\n  .stat-card {\\n    background: white;\\n    border-radius: 6px;\\n    padding: 1.5rem;\\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\\n    display: flex;\\n    align-items: center;\\n    gap: 1rem;\\n    border-left: 4px solid;\\n  }\\n\\n  .stat-card.approved {\\n    border-left-color: #059669;\\n  }\\n  .stat-card.pending {\\n    border-left-color: #d97706;\\n  }\\n  .stat-card.rejected {\\n    border-left-color: #dc2626;\\n  }\\n  .stat-card.total {\\n    border-left-color: #ff3e00;\\n  }\\n\\n  .stat-icon {\\n    font-size: 2rem;\\n  }\\n\\n  .stat-number {\\n    font-size: 2rem;\\n    font-weight: 700;\\n    color: #333;\\n    line-height: 1;\\n  }\\n\\n  .stat-label {\\n    font-size: 0.9rem;\\n    color: #666;\\n    font-weight: 500;\\n  }\\n\\n  /* Table Styles */\\n  .table-wrapper {\\n    background: white;\\n    border-radius: 6px;\\n    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\\n    overflow: hidden;\\n    overflow-x: auto;\\n    text-align: left;\\n  }\\n\\n  .desktop-table {\\n    width: 100%;\\n    border-collapse: collapse;\\n    min-width: 900px;\\n  }\\n\\n  .desktop-table th {\\n    background: #f8fafc;\\n    padding: 1rem;\\n    text-align: left;\\n    font-weight: 600;\\n    color: #333;\\n    border-bottom: 2px solid #e5e7eb;\\n    white-space: nowrap;\\n  }\\n\\n  .desktop-table th.sortable {\\n    cursor: pointer;\\n    user-select: none;\\n    transition: background-color 0.2s;\\n  }\\n\\n  .desktop-table th.sortable:hover {\\n    background: #f1f5f9;\\n  }\\n\\n  .desktop-table th.sort-asc::after {\\n    content: \\" ▲\\";\\n    font-size: 0.75rem;\\n    color: #ff3e00;\\n  }\\n\\n  .desktop-table th.sort-desc::after {\\n    content: \\" ▼\\";\\n    font-size: 0.75rem;\\n    color: #ff3e00;\\n  }\\n\\n  .desktop-table td {\\n    padding: 1rem;\\n    border-bottom: 1px solid #f1f5f9;\\n    vertical-align: middle;\\n  }\\n\\n  .submission-row {\\n    transition: background-color 0.2s;\\n  }\\n\\n  .submission-row:hover {\\n    background-color: #f8fafc;\\n  }\\n\\n  .member-info {\\n    display: flex;\\n    align-items: center;\\n    gap: 0.75rem;\\n  }\\n\\n  .member-avatar {\\n    width: 36px;\\n    height: 36px;\\n    border-radius: 50%;\\n    background: #ff3e00;\\n    color: white;\\n    display: flex;\\n    align-items: center;\\n    justify-content: center;\\n    font-weight: 700;\\n    font-size: 0.9rem;\\n    flex-shrink: 0;\\n  }\\n\\n  .member-name {\\n    font-weight: 500;\\n    color: #333;\\n  }\\n\\n  .category-badge {\\n    background: #f3f4f6;\\n    color: #374151;\\n    padding: 0.25rem 0.75rem;\\n    border-radius: 6px;\\n    font-size: 0.85rem;\\n    font-weight: 600;\\n  }\\n\\n  .points-value {\\n    font-weight: 700;\\n    color: #ff3e00;\\n    font-size: 1.1rem;\\n  }\\n\\n  .status-badge {\\n    display: inline-flex;\\n    align-items: center;\\n    gap: 0.25rem;\\n    padding: 0.25rem 0.75rem;\\n    border-radius: 12px;\\n    font-size: 0.8rem;\\n    font-weight: 600;\\n    white-space: nowrap;\\n  }\\n\\n  .status-badge.status-approved {\\n    background: #dcfce7;\\n    color: #166534;\\n  }\\n\\n  .status-badge.status-pending {\\n    background: #fef3c7;\\n    color: #92400e;\\n  }\\n\\n  .status-badge.status-rejected {\\n    background: #fecaca;\\n    color: #991b1b;\\n  }\\n\\n  /* Mobile Cards */\\n  .mobile-cards {\\n    display: none;\\n  }\\n\\n  .mobile-card {\\n    background: white;\\n    border-radius: 6px;\\n    padding: 1.5rem;\\n    margin-bottom: 1rem;\\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\\n    border-left: 4px solid #e5e7eb;\\n    text-align: left;\\n  }\\n\\n  .card-header {\\n    display: flex;\\n    justify-content: space-between;\\n    align-items: center;\\n    margin-bottom: 1rem;\\n  }\\n\\n  .member-details {\\n    display: flex;\\n    flex-direction: column;\\n  }\\n\\n  .submission-date {\\n    font-size: 0.8rem;\\n    color: #666;\\n  }\\n\\n  .card-body {\\n    display: flex;\\n    flex-direction: column;\\n    gap: 0.75rem;\\n  }\\n\\n  .card-row {\\n    display: flex;\\n    justify-content: space-between;\\n    align-items: center;\\n  }\\n\\n  .card-row .label {\\n    font-weight: 500;\\n    color: #666;\\n    min-width: 100px;\\n  }\\n\\n  .card-row .value {\\n    font-weight: 600;\\n    color: #333;\\n    text-align: right;\\n  }\\n\\n  .rejection-row {\\n    background: #fef2f2;\\n    border: 1px solid #fecaca;\\n    border-radius: 4px;\\n    padding: 0.75rem;\\n    margin-top: 0.5rem;\\n  }\\n\\n  .rejection-text {\\n    color: #dc2626;\\n    font-style: italic;\\n  }\\n\\n\\n  /* Mobile Responsive */\\n  @media (max-width: 768px) {\\n\\n    .controls-header {\\n      flex-direction: column;\\n      gap: 1rem;\\n      text-align: center;\\n    }\\n\\n    .filters-grid {\\n      grid-template-columns: 1fr;\\n      gap: 1rem;\\n    }\\n\\n    .stats-grid {\\n      grid-template-columns: repeat(2, 1fr);\\n      gap: 0.75rem;\\n    }\\n\\n    .stat-card {\\n      padding: 1rem;\\n    }\\n\\n    .stat-icon {\\n      font-size: 1.5rem;\\n    }\\n\\n    .stat-number {\\n      font-size: 1.5rem;\\n    }\\n\\n    .table-wrapper {\\n      display: none;\\n    }\\n\\n    .mobile-cards {\\n      display: block;\\n    }\\n\\n    .card-header .member-info {\\n      flex-direction: column;\\n      align-items: flex-start;\\n      gap: 0.5rem;\\n    }\\n\\n    .card-row {\\n      flex-direction: column;\\n      align-items: flex-start;\\n      gap: 0.25rem;\\n    }\\n\\n    .card-row .value {\\n      text-align: left;\\n    }\\n  }\\n\\n  @media (max-width: 480px) {\\n    .stats-grid {\\n      grid-template-columns: 1fr;\\n    }\\n\\n    .controls-header {\\n      padding: 1rem;\\n    }\\n\\n    .filters-grid {\\n      padding: 1rem;\\n    }\\n\\n    .member-info {\\n      gap: 0.5rem;\\n    }\\n\\n    .member-avatar {\\n      width: 32px;\\n      height: 32px;\\n      font-size: 0.8rem;\\n    }\\n\\n    .mobile-card {\\n      padding: 1rem;\\n    }\\n  }\\n\\n  @media (min-width: 769px) {\\n    .mobile-cards {\\n      display: none;\\n    }\\n  }\\n</style>\\n"],"names":[],"mappings":"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"}`
};
function formatStatus(submission) {
  if (submission.approved === true) return {
    text: "Approved",
    icon: "✅",
    class: "status-approved"
  };
  if (submission.rejection_reason) return {
    text: "Rejected",
    icon: "❌",
    class: "status-rejected"
  };
  return {
    text: "Pending",
    icon: "⏳",
    class: "status-pending"
  };
}
const Page = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let isAuthorized;
  let filterStats;
  let $page, $$unsubscribe_page;
  let $userProfile, $$unsubscribe_userProfile;
  let $user, $$unsubscribe_user;
  let $storeAll, $$unsubscribe_storeAll;
  let $loading, $$unsubscribe_loading;
  $$unsubscribe_page = subscribe(page, (value) => $page = value);
  $$unsubscribe_userProfile = subscribe(userProfile, (value) => $userProfile = value);
  $$unsubscribe_user = subscribe(user, (value) => $user = value);
  $$unsubscribe_storeAll = subscribe(allSubmissions, (value) => $storeAll = value);
  $$unsubscribe_loading = subscribe(loading, (value) => $loading = value);
  let submissions = [];
  let filtered = [];
  let filters = {
    endDate: ""
  };
  let sortColumn = "event_date";
  let cleanupFunctions = [];
  async function loadSubmissions(force = false) {
    try {
      await loadAllSubmissions(force);
    } catch (error) {
      console.error("Error loading submissions:", error);
    }
  }
  function applyFilters() {
    let result = submissions.filter((s) => {
      new Date(s.event_date);
      const beforeEnd = filters.endDate === "";
      return beforeEnd;
    });
    result.sort((a, b) => {
      let aVal = a[sortColumn];
      let bVal = b[sortColumn];
      {
        aVal = new Date(aVal);
        bVal = new Date(bVal);
      }
      if (typeof aVal === "number" && typeof bVal === "number") {
        return bVal - aVal;
      }
      if (aVal < bVal) return 1;
      if (aVal > bVal) return -1;
      return 0;
    });
    filtered = result;
  }
  onDestroy(() => {
    cleanupFunctions.forEach((cleanup) => cleanup());
  });
  $$result.css.add(css);
  submissions = $storeAll || [];
  isAuthorized = $user && $userProfile?.is_officer;
  {
    if (isAuthorized) {
      loadSubmissions(true);
    }
  }
  {
    if (submissions) {
      applyFilters();
    }
  }
  [...new Set(submissions.map((s) => s.category).filter(Boolean))].sort();
  filterStats = {
    total: submissions.length,
    filtered: filtered.length,
    approved: filtered.filter((s) => s.approved === true).length,
    pending: filtered.filter((s) => s.approved === false && !s.rejection_reason).length,
    rejected: filtered.filter((s) => s.rejection_reason).length
  };
  {
    if ($page.url.pathname === "/officers/view-all" && isAuthorized) {
      loadSubmissions(true);
    }
  }
  $$unsubscribe_page();
  $$unsubscribe_userProfile();
  $$unsubscribe_user();
  $$unsubscribe_storeAll();
  $$unsubscribe_loading();
  return `${validate_component(Container, "Container").$$render($$result, { size: "xl" }, {}, {
    default: () => {
      return `${validate_component(Hero, "Hero").$$render(
        $$result,
        {
          title: "View All Points",
          subtitle: "Browse and filter all member submissions",
          icon: "📊",
          center: true
        },
        {},
        {}
      )} ${$loading ? `${validate_component(LoadingSpinner, "LoadingSpinner").$$render($$result, { message: "Loading all submissions..." }, {}, {})}` : `${!$user ? `${validate_component(EmptyState, "EmptyState").$$render(
        $$result,
        {
          icon: "🔒",
          title: "Authentication Required",
          message: "Please log in to view all submissions.",
          actionLabel: "Sign In",
          actionHref: "/login"
        },
        {},
        {}
      )}` : `${!$userProfile?.is_officer ? `${validate_component(EmptyState, "EmptyState").$$render(
        $$result,
        {
          icon: "⚠️",
          title: "Access Restricted",
          message: "Officer privileges are required to view all submissions.",
          actionLabel: "Back to Officer Tools",
          actionHref: "/officers"
        },
        {},
        {}
      )}` : ` <div class="controls-section svelte-13zpm2r"><div class="controls-header svelte-13zpm2r"><button class="${["filter-toggle svelte-13zpm2r", ""].join(" ").trim()}">🔍 ${escape("Show")} Filters</button> <div class="stats-summary svelte-13zpm2r"><span class="stat svelte-13zpm2r">Total: ${escape(filterStats.total)}</span> ${filterStats.filtered !== filterStats.total ? `<span class="stat filtered svelte-13zpm2r">Showing: ${escape(filterStats.filtered)}</span>` : ``}</div></div> ${``}</div>  ${filtered.length > 0 ? `<div class="stats-section svelte-13zpm2r"><div class="stats-grid svelte-13zpm2r"><div class="stat-card approved svelte-13zpm2r"><div class="stat-icon svelte-13zpm2r" data-svelte-h="svelte-1vwwmbk">✅</div> <div class="stat-content"><div class="stat-number svelte-13zpm2r">${escape(filterStats.approved)}</div> <div class="stat-label svelte-13zpm2r" data-svelte-h="svelte-1fy62d5">Approved</div></div></div> <div class="stat-card pending svelte-13zpm2r"><div class="stat-icon svelte-13zpm2r" data-svelte-h="svelte-jdd5wu">⏳</div> <div class="stat-content"><div class="stat-number svelte-13zpm2r">${escape(filterStats.pending)}</div> <div class="stat-label svelte-13zpm2r" data-svelte-h="svelte-1o4fkd1">Pending</div></div></div> <div class="stat-card rejected svelte-13zpm2r"><div class="stat-icon svelte-13zpm2r" data-svelte-h="svelte-z5l57j">❌</div> <div class="stat-content"><div class="stat-number svelte-13zpm2r">${escape(filterStats.rejected)}</div> <div class="stat-label svelte-13zpm2r" data-svelte-h="svelte-1eic7q8">Rejected</div></div></div> <div class="stat-card total svelte-13zpm2r"><div class="stat-icon svelte-13zpm2r" data-svelte-h="svelte-1fmfhz9">📋</div> <div class="stat-content"><div class="stat-number svelte-13zpm2r">${escape(filterStats.filtered)}</div> <div class="stat-label svelte-13zpm2r" data-svelte-h="svelte-112e2oh">Showing</div></div></div></div></div>  <div class="table-wrapper svelte-13zpm2r"><table class="desktop-table svelte-13zpm2r"><thead><tr><th class="${[
        "sortable svelte-13zpm2r",
        " "
      ].join(" ").trim()}" data-svelte-h="svelte-1atu77">Member</th> <th class="${[
        "sortable svelte-13zpm2r",
        " "
      ].join(" ").trim()}" data-svelte-h="svelte-vd9hzm">Category</th> <th class="${[
        "sortable svelte-13zpm2r",
        " "
      ].join(" ").trim()}" data-svelte-h="svelte-1ouq4hw">Description</th> <th class="${[
        "sortable svelte-13zpm2r",
        " "
      ].join(" ").trim()}" data-svelte-h="svelte-1r9jujw">Points</th> <th class="${[
        "sortable svelte-13zpm2r",
        " sort-desc"
      ].join(" ").trim()}" data-svelte-h="svelte-fzcs7t">Event Date</th> <th class="${[
        "sortable svelte-13zpm2r",
        " "
      ].join(" ").trim()}" data-svelte-h="svelte-pii9gg">Submitted</th> <th class="svelte-13zpm2r" data-svelte-h="svelte-bi34jg">Status</th></tr></thead> <tbody>${each(filtered, (s) => {
        return `<tr class="submission-row svelte-13zpm2r"><td class="member-cell svelte-13zpm2r"><div class="member-info svelte-13zpm2r"><div class="member-avatar svelte-13zpm2r">${escape((s.members?.name || "U")[0].toUpperCase())}</div> <span class="member-name svelte-13zpm2r">${escape(s.members?.name || "Unknown")}</span> </div></td> <td class="category-cell svelte-13zpm2r"><span class="category-badge svelte-13zpm2r">${escape(s.category)}</span></td> <td class="description-cell svelte-13zpm2r">${escape(s.description)}</td> <td class="points-cell svelte-13zpm2r"><span class="points-value svelte-13zpm2r">${escape(s.points)}</span></td> <td class="date-cell svelte-13zpm2r">${escape(formatDate(s.event_date))}</td> <td class="submitted-cell svelte-13zpm2r">${escape(s.submitted_at ? formatDate(s.submitted_at) : "Not available")}</td> <td class="status-cell svelte-13zpm2r"><span class="${"status-badge " + escape(formatStatus(s).class, true) + " svelte-13zpm2r"}"><span class="status-icon">${escape(formatStatus(s).icon)}</span> ${escape(formatStatus(s).text)} </span></td> </tr>`;
      })}</tbody></table></div>  <div class="mobile-cards svelte-13zpm2r">${each(filtered, (s) => {
        return `<div class="mobile-card svelte-13zpm2r"><div class="card-header svelte-13zpm2r"><div class="member-info svelte-13zpm2r"><div class="member-avatar svelte-13zpm2r">${escape((s.members?.name || "U")[0].toUpperCase())}</div> <div class="member-details svelte-13zpm2r"><div class="member-name svelte-13zpm2r">${escape(s.members?.name || "Unknown")}</div> <div class="submission-date svelte-13zpm2r">Submitted ${escape(formatSubmissionTime(s.submitted_at))}</div> </div></div> <span class="${"status-badge " + escape(formatStatus(s).class, true) + " svelte-13zpm2r"}"><span class="status-icon">${escape(formatStatus(s).icon)}</span> ${escape(formatStatus(s).text)} </span></div> <div class="card-body svelte-13zpm2r"><div class="card-row svelte-13zpm2r"><span class="label svelte-13zpm2r" data-svelte-h="svelte-1w6fgf5">Category:</span> <span class="value svelte-13zpm2r">${escape(s.category)}</span></div> <div class="card-row svelte-13zpm2r"><span class="label svelte-13zpm2r" data-svelte-h="svelte-18hxrur">Description:</span> <span class="value svelte-13zpm2r">${escape(s.description)}</span></div> <div class="card-row svelte-13zpm2r"><span class="label svelte-13zpm2r" data-svelte-h="svelte-11v1tm">Points:</span> <span class="value points-value svelte-13zpm2r">${escape(s.points)}</span></div> <div class="card-row svelte-13zpm2r"><span class="label svelte-13zpm2r" data-svelte-h="svelte-1c8g29x">Event Date:</span> <span class="value svelte-13zpm2r">${escape(formatDate(s.event_date))}</span></div> ${s.rejection_reason ? `<div class="card-row rejection-row svelte-13zpm2r"><span class="label svelte-13zpm2r" data-svelte-h="svelte-11peyi0">Rejection Reason:</span> <span class="value rejection-text svelte-13zpm2r">${escape(s.rejection_reason)}</span> </div>` : ``}</div> </div>`;
      })}</div>` : `${validate_component(EmptyState, "EmptyState").$$render(
        $$result,
        {
          icon: "🔍",
          title: "No Results Found",
          message: "No submissions match your current filters."
        },
        {},
        {
          default: () => {
            return `${validate_component(Button, "Button").$$render($$result, { variant: "secondary" }, {}, {
              default: () => {
                return `Clear Filters`;
              }
            })}`;
          }
        }
      )}`}`}`}`}`;
    }
  })}`;
});

export { Page as default };
//# sourceMappingURL=_page.svelte-BzfYUAXP.js.map

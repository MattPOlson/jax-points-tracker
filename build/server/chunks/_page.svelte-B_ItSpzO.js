import { c as create_ssr_component, o as onDestroy, v as validate_component } from './ssr-CFMHIens.js';
import './client-C3KLrhj1.js';
import './supabaseClient-D_8i9Ohq.js';
import { B as Button } from './Button-CVHS80BD.js';
import { H as Hero } from './Hero-Dg21uuqy.js';
import { L as LoadingSpinner } from './LoadingSpinner-BXBS6p7s.js';
import { C as Container } from './Container-BafdMVU8.js';
import './exports-DKuYoYKl.js';
import '@supabase/supabase-js';

const css = {
  code: ".competition-selector.svelte-saa2yl.svelte-saa2yl{background:white;padding:1.5rem;border-radius:6px;box-shadow:0 2px 4px rgba(0, 0, 0, 0.1);border-left:4px solid #ff3e00;margin-bottom:2rem}.selector-label.svelte-saa2yl.svelte-saa2yl{font-size:1rem;font-weight:600;color:#333;margin-bottom:1rem}.competition-select.svelte-saa2yl.svelte-saa2yl{width:100%;max-width:400px;padding:0.75rem;border:1px solid #ddd;border-radius:6px;font-size:1rem;background:white;color:#333}.competition-select.svelte-saa2yl.svelte-saa2yl:focus{outline:none;border-color:#ff3e00;box-shadow:0 0 0 3px rgba(255, 62, 0, 0.1)}.results-summary.svelte-saa2yl.svelte-saa2yl{background:white;padding:1.5rem;border-radius:6px;box-shadow:0 2px 4px rgba(0, 0, 0, 0.1);border-left:4px solid #ff3e00;margin-bottom:2rem}.summary-grid.svelte-saa2yl.svelte-saa2yl{display:grid;grid-template-columns:repeat(auto-fit, minmax(200px, 1fr));gap:1rem}.summary-item.svelte-saa2yl.svelte-saa2yl{text-align:center;padding:1rem;background:#f9f9f9;border-radius:6px}.summary-label.svelte-saa2yl.svelte-saa2yl{font-size:0.875rem;color:#666;margin-bottom:0.5rem}.summary-value.svelte-saa2yl.svelte-saa2yl{font-size:1.5rem;font-weight:bold;color:#ff3e00}.category-section.svelte-saa2yl.svelte-saa2yl{background:white;border-radius:6px;overflow:hidden;box-shadow:0 2px 4px rgba(0, 0, 0, 0.1);margin-bottom:2rem}.category-header.svelte-saa2yl.svelte-saa2yl{background:#f5f5f5;padding:1rem 1.5rem;border-bottom:2px solid #ddd}.category-title.svelte-saa2yl.svelte-saa2yl{font-size:1.2rem;font-weight:600;color:#333;margin:0}.results-table.svelte-saa2yl.svelte-saa2yl{width:100%;border-collapse:collapse}.results-table.svelte-saa2yl th.svelte-saa2yl{background:#fafafa;padding:1rem;text-align:left;font-weight:600;color:#333;border-bottom:1px solid #ddd}.results-table.svelte-saa2yl td.svelte-saa2yl{padding:1rem;border-bottom:1px solid #eee}.results-table.svelte-saa2yl tr.svelte-saa2yl:hover{background:#f9f9f9}.placement-badge.svelte-saa2yl.svelte-saa2yl{display:inline-flex;align-items:center;gap:0.5rem;padding:0.25rem 0.75rem;border-radius:12px;font-size:0.875rem;font-weight:600}.placement-first.svelte-saa2yl.svelte-saa2yl{background:#fef3c7;color:#92400e}.placement-second.svelte-saa2yl.svelte-saa2yl{background:#f3f4f6;color:#6b7280}.placement-third.svelte-saa2yl.svelte-saa2yl{background:#fecaca;color:#b91c1c}.placement-hm.svelte-saa2yl.svelte-saa2yl{background:#ddd6fe;color:#7c3aed}.placement-none.svelte-saa2yl.svelte-saa2yl{background:#f9fafb;color:#6b7280}.score-badge.svelte-saa2yl.svelte-saa2yl{background:#e0f2fe;color:#0369a1;padding:0.25rem 0.5rem;border-radius:6px;font-weight:600}.entry-number.svelte-saa2yl.svelte-saa2yl{font-weight:600;color:#ff3e00}.controls.svelte-saa2yl.svelte-saa2yl{display:flex;gap:1rem;margin-bottom:2rem;flex-wrap:wrap;align-items:center}.error.svelte-saa2yl.svelte-saa2yl{background:#fee2e2;color:#dc2626;padding:1rem;border-radius:6px;margin-bottom:1rem}@media(max-width: 768px){.competition-grid.svelte-saa2yl.svelte-saa2yl{grid-template-columns:1fr}.summary-grid.svelte-saa2yl.svelte-saa2yl{grid-template-columns:repeat(2, 1fr)}.results-table.svelte-saa2yl.svelte-saa2yl{font-size:0.875rem}.results-table.svelte-saa2yl th.svelte-saa2yl,.results-table.svelte-saa2yl td.svelte-saa2yl{padding:0.75rem 0.5rem}.controls.svelte-saa2yl.svelte-saa2yl{flex-direction:column;align-items:stretch}}.results-cards.svelte-saa2yl.svelte-saa2yl{display:none}.result-card.svelte-saa2yl.svelte-saa2yl{background:white;border-radius:8px;box-shadow:0 2px 4px rgba(0, 0, 0, 0.1);margin-bottom:1rem;padding:1rem;border-left:4px solid #ff3e00}.card-header.svelte-saa2yl.svelte-saa2yl{display:flex;justify-content:space-between;align-items:flex-start;margin-bottom:1rem}.entry-info.svelte-saa2yl.svelte-saa2yl{flex:1}.entry-number.svelte-saa2yl.svelte-saa2yl{font-size:0.875rem;color:#666;font-weight:500}.beer-name.svelte-saa2yl.svelte-saa2yl{font-size:1.125rem;font-weight:600;color:#333;margin:0.25rem 0}.member-name.svelte-saa2yl.svelte-saa2yl{font-size:0.875rem;color:#666;margin:0}.ranking-info.svelte-saa2yl.svelte-saa2yl{display:flex;flex-direction:column;align-items:flex-end;gap:0.5rem}.placement-badge-mobile.svelte-saa2yl.svelte-saa2yl{display:flex;align-items:center;gap:0.25rem;padding:0.25rem 0.75rem;border-radius:12px;font-size:0.875rem;font-weight:600;text-align:center}.placement-badge-mobile.placement-1.svelte-saa2yl.svelte-saa2yl{background:linear-gradient(135deg, #ffd700, #ffed4a);color:#744210}.placement-badge-mobile.placement-2.svelte-saa2yl.svelte-saa2yl{background:linear-gradient(135deg, #c0c0c0, #e2e8f0);color:#4a5568}.placement-badge-mobile.placement-3.svelte-saa2yl.svelte-saa2yl{background:linear-gradient(135deg, #cd7f32, #d69e2e);color:#744210}.placement-badge-mobile.placement-none.svelte-saa2yl.svelte-saa2yl{background:#f7fafc;color:#718096;border:1px solid #e2e8f0}.card-details.svelte-saa2yl.svelte-saa2yl{border-top:1px solid #f1f5f9;padding-top:1rem}.detail-row.svelte-saa2yl.svelte-saa2yl{display:grid;grid-template-columns:1fr 1fr 1fr;gap:1rem;margin-bottom:1rem}.detail-item.svelte-saa2yl.svelte-saa2yl{text-align:center}.detail-label.svelte-saa2yl.svelte-saa2yl{display:block;font-size:0.75rem;color:#666;font-weight:500;text-transform:uppercase;letter-spacing:0.5px;margin-bottom:0.25rem}.detail-value.svelte-saa2yl.svelte-saa2yl{display:block;font-size:0.875rem;font-weight:600;color:#333}@media(max-width: 768px){.desktop-view.svelte-saa2yl.svelte-saa2yl{display:none}.mobile-view.svelte-saa2yl.svelte-saa2yl{display:block}}@media(max-width: 480px){.container.svelte-saa2yl.svelte-saa2yl{padding:0.5rem}.summary-grid.svelte-saa2yl.svelte-saa2yl{grid-template-columns:1fr}.result-card.svelte-saa2yl.svelte-saa2yl{padding:0.75rem}.detail-row.svelte-saa2yl.svelte-saa2yl{grid-template-columns:1fr;gap:0.75rem}.detail-item.svelte-saa2yl.svelte-saa2yl{display:flex;justify-content:space-between;align-items:center;text-align:left}.detail-label.svelte-saa2yl.svelte-saa2yl{margin-bottom:0}}",
  map: `{"version":3,"file":"+page.svelte","sources":["+page.svelte"],"sourcesContent":["<!-- src/routes/competitions/results/+page.svelte -->\\n<script>\\n  import { onMount, onDestroy } from 'svelte';\\n  import { goto } from '$app/navigation';\\n  import { userProfile } from '$lib/stores/userProfile';\\n  import { supabase } from '$lib/supabaseClient';\\n  import { Hero, Container, LoadingSpinner, EmptyState, Button, Badge } from '$lib/components/ui';\\n  \\n  let competitions = [];\\n  let selectedCompetition = null;\\n  let results = [];\\n  let isLoading = true;\\n  let isLoadingResults = false;\\n  let error = null;\\n\\n  onMount(() => {\\n    loadPublishedCompetitions();\\n    setupEventHandlers();\\n  });\\n\\n  // Removed tab switching reload - causes issues with Supabase tab switching\\n  function setupEventHandlers() {\\n    // Tab visibility handling removed for better Supabase compatibility\\n    return () => {\\n      // No cleanup needed now\\n    };\\n  }\\n\\n  onDestroy(() => {\\n    // Cleanup handled by setupEventHandlers return\\n  });\\n\\n  // Helper functions for ranking points calculation\\n  function getPointsForRanking(rankPosition) {\\n    // Point system: 1st=3pts, 2nd=2pts, 3rd=1pt, others=0pts\\n    switch (rankPosition) {\\n      case 1: return 3;\\n      case 2: return 2;\\n      case 3: return 1;\\n      default: return 0;\\n    }\\n  }\\n\\n  function calculateEntryPoints(entryId, categoryId, rankings, rankingGroups) {\\n    // Get all rankings for this entry from all judges\\n    let entryRankings = [];\\n    \\n    // Check if entry belongs to a custom ranking group\\n    let groupId = null;\\n    for (const group of rankingGroups) {\\n      let categoryIds;\\n      try {\\n        categoryIds = Array.isArray(group.bjcp_category_ids) \\n          ? group.bjcp_category_ids \\n          : JSON.parse(group.bjcp_category_ids);\\n      } catch (e) {\\n        console.warn('Failed to parse bjcp_category_ids for group:', group.id);\\n        continue;\\n      }\\n      \\n      if (categoryIds.includes(categoryId)) {\\n        groupId = group.id;\\n        break;\\n      }\\n    }\\n    \\n    if (groupId) {\\n      // For custom ranking groups\\n      entryRankings = rankings.filter(r => \\n        r.entry_id === entryId && r.ranking_group_id === groupId\\n      );\\n    } else {\\n      // For individual categories\\n      entryRankings = rankings.filter(r => \\n        r.entry_id === entryId && r.bjcp_category_id === categoryId\\n      );\\n    }\\n\\n    // Calculate total points from all judges\\n    const totalPoints = entryRankings.reduce((sum, ranking) => {\\n      return sum + getPointsForRanking(ranking.rank_position);\\n    }, 0);\\n\\n    return {\\n      totalPoints,\\n      judgeCount: entryRankings.length,\\n      rankings: entryRankings\\n    };\\n  }\\n\\n  // Load competitions with published results\\n  async function loadPublishedCompetitions() {\\n    isLoading = true;\\n    error = null;\\n\\n    try {\\n      console.log('Loading published competitions...');\\n      \\n      const { data: competitionsData, error: competitionsError } = await supabase\\n        .from('competitions')\\n        .select('*')\\n        .eq('results_published', true)\\n        .order('judging_date', { ascending: false });\\n\\n      if (competitionsError) throw competitionsError;\\n\\n      competitions = competitionsData || [];\\n      console.log('Loaded', competitions.length, 'published competitions');\\n\\n      // Auto-select the most recent competition if available\\n      if (competitions.length > 0) {\\n        selectedCompetition = competitions[0];\\n        await loadResultsForCompetition(competitions[0]);\\n      }\\n\\n    } catch (err) {\\n      console.error('Error loading competitions:', err);\\n      error = err.message || 'Failed to load competitions';\\n    } finally {\\n      isLoading = false;\\n    }\\n  }\\n\\n  // Handle competition selection from dropdown\\n  async function handleCompetitionSelect(event) {\\n    const competitionId = event.target.value;\\n    if (!competitionId) {\\n      selectedCompetition = null;\\n      results = [];\\n      return;\\n    }\\n\\n    const competition = competitions.find(c => c.id === competitionId);\\n    if (competition) {\\n      selectedCompetition = competition;\\n      await loadResultsForCompetition(competition);\\n    }\\n  }\\n\\n  // Load results for selected competition\\n  async function loadResultsForCompetition(competition) {\\n    isLoadingResults = true;\\n    error = null;\\n\\n    try {\\n      console.log('Loading results for competition:', competition.name);\\n\\n      // Get competition results with entry details (excluding judge notes for privacy)\\n      const { data: resultsData, error: resultsError } = await supabase\\n        .from('competition_results')\\n        .select('id, competition_id, entry_id, score, placement, created_at, updated_at')\\n        .eq('competition_id', competition.id);\\n\\n      if (resultsError) throw resultsError;\\n\\n      if (!resultsData || resultsData.length === 0) {\\n        results = [];\\n        return;\\n      }\\n\\n      // Get entry details for each result\\n      const entryIds = resultsData.map(r => r.entry_id);\\n      const { data: entriesData, error: entriesError } = await supabase\\n        .from('competition_entries')\\n        .select('*')\\n        .in('id', entryIds);\\n\\n      if (entriesError) throw entriesError;\\n\\n      // Get member data\\n      const memberIds = [...new Set(entriesData.map(entry => entry.member_id))];\\n      const { data: membersData } = await supabase\\n        .from('members')\\n        .select('id, name')\\n        .in('id', memberIds);\\n\\n      // Get category data\\n      const categoryIds = [...new Set(entriesData.map(entry => entry.bjcp_category_id).filter(Boolean))];\\n      const { data: categoriesData } = await supabase\\n        .from('bjcp_categories')\\n        .select('id, category_name, category_number, subcategory_letter, subcategory_name')\\n        .in('id', categoryIds);\\n\\n      // Load ranking groups if using custom system\\n      let rankingGroups = [];\\n      if (competition.category_system === 'custom') {\\n        const { data: groupsData, error: groupsError } = await supabase\\n          .from('competition_ranking_groups')\\n          .select('*')\\n          .eq('competition_id', competition.id)\\n          .order('group_order');\\n\\n        if (!groupsError) {\\n          rankingGroups = groupsData || [];\\n        }\\n      }\\n\\n      // Load rankings data for points calculation\\n      const { data: rankingsData, error: rankingsError } = await supabase\\n        .from('competition_rankings')\\n        .select(\`\\n          *,\\n          entry:competition_entries!inner(id, entry_number, beer_name),\\n          judge:members!competition_rankings_judge_id_fkey(id, name),\\n          category:bjcp_categories(category_name, category_number, subcategory_letter),\\n          ranking_group:competition_ranking_groups(id, group_name, group_description)\\n        \`)\\n        .eq('competition_id', competition.id)\\n        .order('bjcp_category_id')\\n        .order('rank_position');\\n\\n      const rankings = rankingsData || [];\\n\\n      // Combine all data\\n      results = resultsData.map(result => {\\n        const entry = entriesData.find(e => e.id === result.entry_id);\\n        const member = membersData?.find(m => m.id === entry?.member_id);\\n        const category = categoriesData?.find(c => c.id === entry?.bjcp_category_id);\\n\\n        const categoryDisplay = category \\n          ? \`\${category.category_number}\${category.subcategory_letter || ''} - \${category.category_name}\`\\n          : 'Unknown Category';\\n\\n        // Find ranking group for this entry's category\\n        let rankingGroupName = null;\\n        if (rankingGroups.length > 0 && entry?.bjcp_category_id) {\\n          const group = rankingGroups.find(g => \\n            g.bjcp_category_ids.includes(entry.bjcp_category_id)\\n          );\\n          rankingGroupName = group?.group_name || null;\\n        }\\n\\n        // Calculate ranking points for this entry\\n        const rankingPoints = entry?.bjcp_category_id \\n          ? calculateEntryPoints(entry.id, entry.bjcp_category_id, rankings, rankingGroups)\\n          : { totalPoints: 0, judgeCount: 0, rankings: [] };\\n\\n        return {\\n          ...result,\\n          entry_number: entry?.entry_number || 'N/A',\\n          beer_name: entry?.beer_name || 'Unknown Beer',\\n          member_name: member?.name || 'Unknown Member',\\n          category_display: categoryDisplay,\\n          ranking_group_name: rankingGroupName,\\n          // Use ranking group for display if available, otherwise use individual category\\n          display_group: rankingGroupName || categoryDisplay,\\n          category_number: category?.category_number || '',\\n          subcategory_letter: category?.subcategory_letter || '',\\n          // Ranking points\\n          ranking_points: rankingPoints.totalPoints,\\n          judge_count: rankingPoints.judgeCount\\n        };\\n      });\\n\\n      console.log('Loaded', results.length, 'results');\\n\\n    } catch (err) {\\n      console.error('Error loading results:', err);\\n      error = err.message || 'Failed to load results';\\n    } finally {\\n      isLoadingResults = false;\\n    }\\n  }\\n\\n  // Get placement display\\n  function getPlacementDisplay(placement) {\\n    switch (placement) {\\n      case '1':\\n        return { text: '1st Place', class: 'placement-first', medal: '🥇' };\\n      case '2':\\n        return { text: '2nd Place', class: 'placement-second', medal: '🥈' };\\n      case '3':\\n        return { text: '3rd Place', class: 'placement-third', medal: '🥉' };\\n      case 'HM':\\n        return { text: 'Honorable Mention', class: 'placement-hm', medal: '🏅' };\\n      default:\\n        return { text: 'No Placement', class: 'placement-none', medal: '' };\\n    }\\n  }\\n\\n  // Calculate placement based on ranking points within each category/group, with score fallback\\n  function calculateRankingBasedPlacement(results) {\\n    const resultsByGroup = results.reduce((acc, result) => {\\n      const groupKey = result.display_group;\\n      if (!acc[groupKey]) {\\n        acc[groupKey] = [];\\n      }\\n      acc[groupKey].push(result);\\n      return acc;\\n    }, {});\\n\\n    // Process each group\\n    Object.keys(resultsByGroup).forEach(groupKey => {\\n      const groupResults = resultsByGroup[groupKey];\\n      \\n      // Check if any entries in this group have ranking points\\n      const hasRankingPoints = groupResults.some(result => result.ranking_points > 0);\\n\\n      if (hasRankingPoints) {\\n        // Use ranking points system\\n        groupResults.sort((a, b) => {\\n          if (b.ranking_points !== a.ranking_points) {\\n            return b.ranking_points - a.ranking_points;\\n          }\\n          // Tiebreaker: use score\\n          return (b.score || 0) - (a.score || 0);\\n        });\\n\\n        // Assign placement based on ranking points position\\n        let currentRank = 1;\\n        let previousPoints = null;\\n\\n        groupResults.forEach((result, index) => {\\n          if (previousPoints !== null && result.ranking_points < previousPoints) {\\n            currentRank = index + 1;\\n          }\\n\\n          // Only assign placement if there are ranking points\\n          if (result.ranking_points > 0) {\\n            if (currentRank === 1) {\\n              result.calculated_placement = '1';\\n            } else if (currentRank === 2) {\\n              result.calculated_placement = '2';\\n            } else if (currentRank === 3) {\\n              result.calculated_placement = '3';\\n            } else if (currentRank <= 6) { // Top 6 get honorable mention\\n              result.calculated_placement = 'HM';\\n            } else {\\n              result.calculated_placement = '';\\n            }\\n          } else {\\n            result.calculated_placement = '';\\n          }\\n\\n          previousPoints = result.ranking_points;\\n        });\\n      } else {\\n        // Fallback to score-based system when no ranking points exist\\n        groupResults.sort((a, b) => {\\n          return (b.score || 0) - (a.score || 0);\\n        });\\n\\n        // Assign placement based on score position\\n        let currentRank = 1;\\n        let previousScore = null;\\n\\n        groupResults.forEach((result, index) => {\\n          const currentScore = result.score || 0;\\n          \\n          if (previousScore !== null && currentScore < previousScore) {\\n            currentRank = index + 1;\\n          }\\n\\n          // Assign placement based on score (only for entries with scores > 0)\\n          if (currentScore > 0) {\\n            if (currentRank === 1) {\\n              result.calculated_placement = '1';\\n            } else if (currentRank === 2) {\\n              result.calculated_placement = '2';\\n            } else if (currentRank === 3) {\\n              result.calculated_placement = '3';\\n            } else if (currentRank <= 6) { // Top 6 get honorable mention\\n              result.calculated_placement = 'HM';\\n            } else {\\n              result.calculated_placement = '';\\n            }\\n          } else {\\n            result.calculated_placement = '';\\n          }\\n\\n          previousScore = currentScore;\\n        });\\n      }\\n    });\\n\\n    return resultsByGroup;\\n  }\\n\\n  // Group results by category or ranking group and calculate ranking-based placements\\n  $: resultsByCategory = calculateRankingBasedPlacement(results);\\n\\n  // Get awards summary based on calculated placements\\n  $: awardsSummary = {\\n    totalEntries: results.length,\\n    placedEntries: results.filter(r => r.calculated_placement && r.calculated_placement !== '').length,\\n    categories: Object.keys(resultsByCategory).length,\\n    averageScore: results.length > 0 \\n      ? Math.round((results.reduce((sum, r) => sum + (r.score || 0), 0) / results.length) * 10) / 10\\n      : 0\\n  };\\n\\n  // Format date\\n  function formatDate(dateString) {\\n    if (!dateString) return 'No date set';\\n    try {\\n      // Handle space-separated datetime format (e.g., \\"2025-08-29 03:43:21.894974\\")\\n      let isoString = dateString;\\n      if (dateString.includes(' ') && !dateString.includes('T')) {\\n        // Replace space with 'T' and add timezone if missing\\n        isoString = dateString.replace(' ', 'T');\\n        if (!isoString.includes('+') && !isoString.includes('Z')) {\\n          // Assume local timezone if no timezone specified\\n          isoString += 'Z';\\n        }\\n      }\\n\\n      const date = new Date(isoString);\\n      // Check if date is valid\\n      if (isNaN(date.getTime())) {\\n        console.warn('Invalid date after parsing:', dateString, '->', isoString);\\n        return 'Invalid Date';\\n      }\\n\\n      return date.toLocaleDateString('en-US', {\\n        weekday: 'long',\\n        year: 'numeric',\\n        month: 'long', \\n        day: 'numeric'\\n      });\\n    } catch (error) {\\n      console.warn('Error formatting date:', dateString, error);\\n      return 'Invalid Date';\\n    }\\n  }\\n\\n  // Navigate back to competitions\\n  function navigateToCompetitions() {\\n    goto('/competitions');\\n  }\\n<\/script>\\n\\n<style>\\n  .competition-selector {\\n    background: white;\\n    padding: 1.5rem;\\n    border-radius: 6px;\\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\\n    border-left: 4px solid #ff3e00;\\n    margin-bottom: 2rem;\\n  }\\n\\n  .selector-label {\\n    font-size: 1rem;\\n    font-weight: 600;\\n    color: #333;\\n    margin-bottom: 1rem;\\n  }\\n\\n  .competition-select {\\n    width: 100%;\\n    max-width: 400px;\\n    padding: 0.75rem;\\n    border: 1px solid #ddd;\\n    border-radius: 6px;\\n    font-size: 1rem;\\n    background: white;\\n    color: #333;\\n  }\\n\\n  .competition-select:focus {\\n    outline: none;\\n    border-color: #ff3e00;\\n    box-shadow: 0 0 0 3px rgba(255, 62, 0, 0.1);\\n  }\\n\\n  .results-summary {\\n    background: white;\\n    padding: 1.5rem;\\n    border-radius: 6px;\\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\\n    border-left: 4px solid #ff3e00;\\n    margin-bottom: 2rem;\\n  }\\n\\n  .summary-grid {\\n    display: grid;\\n    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\\n    gap: 1rem;\\n  }\\n\\n  .summary-item {\\n    text-align: center;\\n    padding: 1rem;\\n    background: #f9f9f9;\\n    border-radius: 6px;\\n  }\\n\\n  .summary-label {\\n    font-size: 0.875rem;\\n    color: #666;\\n    margin-bottom: 0.5rem;\\n  }\\n\\n  .summary-value {\\n    font-size: 1.5rem;\\n    font-weight: bold;\\n    color: #ff3e00;\\n  }\\n\\n  .category-section {\\n    background: white;\\n    border-radius: 6px;\\n    overflow: hidden;\\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\\n    margin-bottom: 2rem;\\n  }\\n\\n  .category-header {\\n    background: #f5f5f5;\\n    padding: 1rem 1.5rem;\\n    border-bottom: 2px solid #ddd;\\n  }\\n\\n  .category-title {\\n    font-size: 1.2rem;\\n    font-weight: 600;\\n    color: #333;\\n    margin: 0;\\n  }\\n\\n  .results-table {\\n    width: 100%;\\n    border-collapse: collapse;\\n  }\\n\\n  .results-table th {\\n    background: #fafafa;\\n    padding: 1rem;\\n    text-align: left;\\n    font-weight: 600;\\n    color: #333;\\n    border-bottom: 1px solid #ddd;\\n  }\\n\\n  .results-table td {\\n    padding: 1rem;\\n    border-bottom: 1px solid #eee;\\n  }\\n\\n  .results-table tr:hover {\\n    background: #f9f9f9;\\n  }\\n\\n  .placement-badge {\\n    display: inline-flex;\\n    align-items: center;\\n    gap: 0.5rem;\\n    padding: 0.25rem 0.75rem;\\n    border-radius: 12px;\\n    font-size: 0.875rem;\\n    font-weight: 600;\\n  }\\n\\n  .placement-first {\\n    background: #fef3c7;\\n    color: #92400e;\\n  }\\n\\n  .placement-second {\\n    background: #f3f4f6;\\n    color: #6b7280;\\n  }\\n\\n  .placement-third {\\n    background: #fecaca;\\n    color: #b91c1c;\\n  }\\n\\n  .placement-hm {\\n    background: #ddd6fe;\\n    color: #7c3aed;\\n  }\\n\\n  .placement-none {\\n    background: #f9fafb;\\n    color: #6b7280;\\n  }\\n\\n  .score-badge {\\n    background: #e0f2fe;\\n    color: #0369a1;\\n    padding: 0.25rem 0.5rem;\\n    border-radius: 6px;\\n    font-weight: 600;\\n  }\\n\\n  .entry-number {\\n    font-weight: 600;\\n    color: #ff3e00;\\n  }\\n\\n\\n  .controls {\\n    display: flex;\\n    gap: 1rem;\\n    margin-bottom: 2rem;\\n    flex-wrap: wrap;\\n    align-items: center;\\n  }\\n\\n  .error {\\n    background: #fee2e2;\\n    color: #dc2626;\\n    padding: 1rem;\\n    border-radius: 6px;\\n    margin-bottom: 1rem;\\n  }\\n\\n  /* Mobile styles */\\n  @media (max-width: 768px) {\\n\\n    .competition-grid {\\n      grid-template-columns: 1fr;\\n    }\\n\\n    .summary-grid {\\n      grid-template-columns: repeat(2, 1fr);\\n    }\\n\\n    .results-table {\\n      font-size: 0.875rem;\\n    }\\n\\n    .results-table th,\\n    .results-table td {\\n      padding: 0.75rem 0.5rem;\\n    }\\n\\n\\n    .controls {\\n      flex-direction: column;\\n      align-items: stretch;\\n    }\\n  }\\n\\n  /* Mobile Card Styles */\\n  .results-cards {\\n    display: none;\\n  }\\n\\n  .result-card {\\n    background: white;\\n    border-radius: 8px;\\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\\n    margin-bottom: 1rem;\\n    padding: 1rem;\\n    border-left: 4px solid #ff3e00;\\n  }\\n\\n  .card-header {\\n    display: flex;\\n    justify-content: space-between;\\n    align-items: flex-start;\\n    margin-bottom: 1rem;\\n  }\\n\\n  .entry-info {\\n    flex: 1;\\n  }\\n\\n  .entry-number {\\n    font-size: 0.875rem;\\n    color: #666;\\n    font-weight: 500;\\n  }\\n\\n  .beer-name {\\n    font-size: 1.125rem;\\n    font-weight: 600;\\n    color: #333;\\n    margin: 0.25rem 0;\\n  }\\n\\n  .member-name {\\n    font-size: 0.875rem;\\n    color: #666;\\n    margin: 0;\\n  }\\n\\n  .ranking-info {\\n    display: flex;\\n    flex-direction: column;\\n    align-items: flex-end;\\n    gap: 0.5rem;\\n  }\\n\\n  .placement-badge-mobile {\\n    display: flex;\\n    align-items: center;\\n    gap: 0.25rem;\\n    padding: 0.25rem 0.75rem;\\n    border-radius: 12px;\\n    font-size: 0.875rem;\\n    font-weight: 600;\\n    text-align: center;\\n  }\\n\\n  .placement-badge-mobile.placement-1 {\\n    background: linear-gradient(135deg, #ffd700, #ffed4a);\\n    color: #744210;\\n  }\\n\\n  .placement-badge-mobile.placement-2 {\\n    background: linear-gradient(135deg, #c0c0c0, #e2e8f0);\\n    color: #4a5568;\\n  }\\n\\n  .placement-badge-mobile.placement-3 {\\n    background: linear-gradient(135deg, #cd7f32, #d69e2e);\\n    color: #744210;\\n  }\\n\\n  .placement-badge-mobile.placement-none {\\n    background: #f7fafc;\\n    color: #718096;\\n    border: 1px solid #e2e8f0;\\n  }\\n\\n  .card-details {\\n    border-top: 1px solid #f1f5f9;\\n    padding-top: 1rem;\\n  }\\n\\n  .detail-row {\\n    display: grid;\\n    grid-template-columns: 1fr 1fr 1fr;\\n    gap: 1rem;\\n    margin-bottom: 1rem;\\n  }\\n\\n  .detail-item {\\n    text-align: center;\\n  }\\n\\n  .detail-label {\\n    display: block;\\n    font-size: 0.75rem;\\n    color: #666;\\n    font-weight: 500;\\n    text-transform: uppercase;\\n    letter-spacing: 0.5px;\\n    margin-bottom: 0.25rem;\\n  }\\n\\n  .detail-value {\\n    display: block;\\n    font-size: 0.875rem;\\n    font-weight: 600;\\n    color: #333;\\n  }\\n\\n\\n  /* Responsive visibility */\\n  @media (max-width: 768px) {\\n    .desktop-view {\\n      display: none;\\n    }\\n\\n    .mobile-view {\\n      display: block;\\n    }\\n  }\\n\\n  @media (max-width: 480px) {\\n    .container {\\n      padding: 0.5rem;\\n    }\\n\\n    .hero h1 {\\n      font-size: 2rem;\\n    }\\n\\n    .summary-grid {\\n      grid-template-columns: 1fr;\\n    }\\n\\n    .result-card {\\n      padding: 0.75rem;\\n    }\\n\\n    .detail-row {\\n      grid-template-columns: 1fr;\\n      gap: 0.75rem;\\n    }\\n\\n    .detail-item {\\n      display: flex;\\n      justify-content: space-between;\\n      align-items: center;\\n      text-align: left;\\n    }\\n\\n    .detail-label {\\n      margin-bottom: 0;\\n    }\\n  }\\n\\n</style>\\n\\n<Container size=\\"xl\\">\\n  <Hero title=\\"Competition Results\\" subtitle=\\"View published competition results and standings\\" icon=\\"🏅\\" center={true} />\\n\\n  <!-- Controls -->\\n  <div class=\\"controls\\">\\n    <Button variant=\\"secondary\\" on:click={navigateToCompetitions}>\\n      ← Back to Competitions\\n    </Button>\\n  </div>\\n\\n  <!-- Error State -->\\n  {#if error}\\n    <div class=\\"error\\">\\n      {error}\\n    </div>\\n  {/if}\\n\\n  <!-- Loading State -->\\n  {#if isLoading}\\n    <LoadingSpinner message=\\"Loading competition results...\\" />\\n  {:else if competitions.length === 0}\\n    <EmptyState\\n      icon=\\"📅\\"\\n      title=\\"No Results Published\\"\\n      message=\\"There are currently no competition results available to view. Check back after competitions have been judged and results published.\\"\\n    />\\n  {:else}\\n    <!-- Competition Selector -->\\n    <div class=\\"competition-selector\\">\\n      <div class=\\"selector-label\\">Select Competition to View Results:</div>\\n      <select \\n        class=\\"competition-select\\" \\n        on:change={handleCompetitionSelect}\\n        value={selectedCompetition?.id || ''}\\n      >\\n        <option value=\\"\\">Choose a competition...</option>\\n        {#each competitions as competition}\\n          <option value={competition.id}>\\n            {competition.name} - Judged {formatDate(competition.judging_date)}\\n          </option>\\n        {/each}\\n      </select>\\n    </div>\\n\\n    {#if selectedCompetition}\\n      <!-- Results Summary -->\\n      {#if !isLoadingResults && results.length > 0}\\n        <div class=\\"results-summary\\">\\n          <h2 style=\\"margin: 0 0 1.5rem 0; color: #333;\\">{selectedCompetition.name} - Results Summary</h2>\\n          <div class=\\"summary-grid\\">\\n            <div class=\\"summary-item\\">\\n              <div class=\\"summary-label\\">Total Entries</div>\\n              <div class=\\"summary-value\\">{awardsSummary.totalEntries}</div>\\n            </div>\\n            <div class=\\"summary-item\\">\\n              <div class=\\"summary-label\\">Awards Given</div>\\n              <div class=\\"summary-value\\">{awardsSummary.placedEntries}</div>\\n            </div>\\n            <div class=\\"summary-item\\">\\n              <div class=\\"summary-label\\">Categories</div>\\n              <div class=\\"summary-value\\">{awardsSummary.categories}</div>\\n            </div>\\n            <div class=\\"summary-item\\">\\n              <div class=\\"summary-label\\">Average Score</div>\\n              <div class=\\"summary-value\\">{awardsSummary.averageScore}</div>\\n            </div>\\n          </div>\\n        </div>\\n      {/if}\\n\\n      <!-- Results by Category -->\\n      {#if isLoadingResults}\\n        <div class=\\"loading\\">\\n          <div class=\\"spinner\\"></div>\\n          <p>Loading results...</p>\\n        </div>\\n      {:else if results.length === 0}\\n        <div class=\\"empty-state\\">\\n          <h3>No Results Available</h3>\\n          <p>Results for this competition have not been entered yet.</p>\\n        </div>\\n      {:else}\\n        {#each Object.entries(resultsByCategory) as [categoryName, categoryResults]}\\n          <div class=\\"category-section\\">\\n            <div class=\\"category-header\\">\\n              <h3 class=\\"category-title\\">{categoryName}</h3>\\n            </div>\\n            \\n            <!-- Desktop Table View -->\\n            <table class=\\"results-table desktop-view\\">\\n              <thead>\\n                <tr>\\n                  <th>Entry</th>\\n                  <th>Member</th>\\n                  <th>Beer Name</th>\\n                  <th>Ranking Points</th>\\n                  <th>Score</th>\\n                  <th>Placement</th>\\n                </tr>\\n              </thead>\\n              <tbody>\\n                {#each categoryResults as result}\\n                  <tr>\\n                    <td>\\n                      <span class=\\"entry-number\\">{result.entry_number}</span>\\n                    </td>\\n                    <td>{result.member_name}</td>\\n                    <td>{result.beer_name}</td>\\n                    <td>\\n                      <span style=\\"font-weight: 600; color: {result.ranking_points > 0 ? '#059669' : '#666'};\\">\\n                        {result.ranking_points} {result.ranking_points === 1 ? 'pt' : 'pts'}\\n                      </span>\\n                      {#if result.judge_count > 0}\\n                        <br><small style=\\"color: #666;\\">{result.judge_count} judge{result.judge_count === 1 ? '' : 's'}</small>\\n                      {/if}\\n                    </td>\\n                    <td>\\n                      {#if result.score}\\n                        <span class=\\"score-badge\\">{result.score}/50</span>\\n                      {:else}\\n                        <span class=\\"score-badge\\">-/50</span>\\n                      {/if}\\n                    </td>\\n                    <td>\\n                      {#if result.calculated_placement}\\n                        <span class=\\"placement-badge {getPlacementDisplay(result.calculated_placement).class}\\">\\n                          <span>{getPlacementDisplay(result.calculated_placement).medal}</span>\\n                          <span>{getPlacementDisplay(result.calculated_placement).text}</span>\\n                        </span>\\n                      {:else}\\n                        <span class=\\"placement-badge placement-none\\">No Placement</span>\\n                      {/if}\\n                    </td>\\n                  </tr>\\n                {/each}\\n              </tbody>\\n            </table>\\n\\n            <!-- Mobile Card View -->\\n            <div class=\\"results-cards mobile-view\\">\\n              {#each categoryResults as result}\\n                <div class=\\"result-card\\">\\n                  <div class=\\"card-header\\">\\n                    <div class=\\"entry-info\\">\\n                      <span class=\\"entry-number\\">#{result.entry_number}</span>\\n                      <h4 class=\\"beer-name\\">{result.beer_name}</h4>\\n                      <p class=\\"member-name\\">{result.member_name}</p>\\n                    </div>\\n                    <div class=\\"ranking-info\\">\\n                      {#if result.calculated_placement}\\n                        <div class=\\"placement-badge-mobile {getPlacementDisplay(result.calculated_placement).class}\\">\\n                          <span class=\\"medal\\">{getPlacementDisplay(result.calculated_placement).medal}</span>\\n                          <span class=\\"placement-text\\">{getPlacementDisplay(result.calculated_placement).text}</span>\\n                        </div>\\n                      {:else}\\n                        <div class=\\"placement-badge-mobile placement-none\\">No Placement</div>\\n                      {/if}\\n                    </div>\\n                  </div>\\n                  \\n                  <div class=\\"card-details\\">\\n                    <div class=\\"detail-row\\">\\n                      <div class=\\"detail-item\\">\\n                        <span class=\\"detail-label\\">Points</span>\\n                        <span class=\\"detail-value\\" style=\\"color: {result.ranking_points > 0 ? '#059669' : '#666'}; font-weight: 600;\\">\\n                          {result.ranking_points} {result.ranking_points === 1 ? 'pt' : 'pts'}\\n                        </span>\\n                      </div>\\n                      <div class=\\"detail-item\\">\\n                        <span class=\\"detail-label\\">Score</span>\\n                        <span class=\\"detail-value\\">\\n                          {#if result.score}\\n                            {result.score}/50\\n                          {:else}\\n                            -/50\\n                          {/if}\\n                        </span>\\n                      </div>\\n                      <div class=\\"detail-item\\">\\n                        <span class=\\"detail-label\\">Judges</span>\\n                        <span class=\\"detail-value\\">{result.judge_count}</span>\\n                      </div>\\n                    </div>\\n                  </div>\\n                </div>\\n              {/each}\\n            </div>\\n          </div>\\n        {/each}\\n      {/if}\\n    {/if}\\n  {/if}\\n</Container>\\n\\n"],"names":[],"mappings":"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"}`
};
function calculateRankingBasedPlacement(results) {
  const resultsByGroup = results.reduce(
    (acc, result) => {
      const groupKey = result.display_group;
      if (!acc[groupKey]) {
        acc[groupKey] = [];
      }
      acc[groupKey].push(result);
      return acc;
    },
    {}
  );
  Object.keys(resultsByGroup).forEach((groupKey) => {
    const groupResults = resultsByGroup[groupKey];
    const hasRankingPoints = groupResults.some((result) => result.ranking_points > 0);
    if (hasRankingPoints) {
      groupResults.sort((a, b) => {
        if (b.ranking_points !== a.ranking_points) {
          return b.ranking_points - a.ranking_points;
        }
        return (b.score || 0) - (a.score || 0);
      });
      let currentRank = 1;
      let previousPoints = null;
      groupResults.forEach((result, index) => {
        if (previousPoints !== null && result.ranking_points < previousPoints) {
          currentRank = index + 1;
        }
        if (result.ranking_points > 0) {
          if (currentRank === 1) {
            result.calculated_placement = "1";
          } else if (currentRank === 2) {
            result.calculated_placement = "2";
          } else if (currentRank === 3) {
            result.calculated_placement = "3";
          } else if (currentRank <= 6) {
            result.calculated_placement = "HM";
          } else {
            result.calculated_placement = "";
          }
        } else {
          result.calculated_placement = "";
        }
        previousPoints = result.ranking_points;
      });
    } else {
      groupResults.sort((a, b) => {
        return (b.score || 0) - (a.score || 0);
      });
      let currentRank = 1;
      let previousScore = null;
      groupResults.forEach((result, index) => {
        const currentScore = result.score || 0;
        if (previousScore !== null && currentScore < previousScore) {
          currentRank = index + 1;
        }
        if (currentScore > 0) {
          if (currentRank === 1) {
            result.calculated_placement = "1";
          } else if (currentRank === 2) {
            result.calculated_placement = "2";
          } else if (currentRank === 3) {
            result.calculated_placement = "3";
          } else if (currentRank <= 6) {
            result.calculated_placement = "HM";
          } else {
            result.calculated_placement = "";
          }
        } else {
          result.calculated_placement = "";
        }
        previousScore = currentScore;
      });
    }
  });
  return resultsByGroup;
}
const Page = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let resultsByCategory;
  let results = [];
  onDestroy(() => {
  });
  $$result.css.add(css);
  resultsByCategory = calculateRankingBasedPlacement(results);
  ({
    totalEntries: results.length,
    placedEntries: results.filter((r) => r.calculated_placement && r.calculated_placement !== "").length,
    categories: Object.keys(resultsByCategory).length,
    averageScore: results.length > 0 ? Math.round(results.reduce((sum, r) => sum + (r.score || 0), 0) / results.length * 10) / 10 : 0
  });
  return `   ${validate_component(Container, "Container").$$render($$result, { size: "xl" }, {}, {
    default: () => {
      return `${validate_component(Hero, "Hero").$$render(
        $$result,
        {
          title: "Competition Results",
          subtitle: "View published competition results and standings",
          icon: "🏅",
          center: true
        },
        {},
        {}
      )}  <div class="controls svelte-saa2yl">${validate_component(Button, "Button").$$render($$result, { variant: "secondary" }, {}, {
        default: () => {
          return `← Back to Competitions`;
        }
      })}</div>  ${``}  ${`${validate_component(LoadingSpinner, "LoadingSpinner").$$render(
        $$result,
        {
          message: "Loading competition results..."
        },
        {},
        {}
      )}`}`;
    }
  })}`;
});

export { Page as default };
//# sourceMappingURL=_page.svelte-B_ItSpzO.js.map

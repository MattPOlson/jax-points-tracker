{"version":3,"file":"_page.svelte-DdyaizS7.js","sources":["../../../.svelte-kit/adapter-node/entries/pages/competitions/results/_page.svelte.js"],"sourcesContent":["import { c as create_ssr_component, o as onDestroy } from \"../../../../chunks/ssr.js\";\nimport \"../../../../chunks/client.js\";\nimport \"../../../../chunks/supabaseClient.js\";\nconst css = {\n  code: \".container.svelte-1n450du.svelte-1n450du{max-width:1400px;margin:0 auto;padding:1rem}.hero.svelte-1n450du.svelte-1n450du{text-align:center;margin-bottom:3rem}.hero.svelte-1n450du h1.svelte-1n450du{color:#ff3e00;text-transform:uppercase;font-size:4rem;font-weight:100;margin:0 0 0.25em;line-height:1.1}.hero.svelte-1n450du .subtitle.svelte-1n450du{font-size:1.2rem;color:#333;font-weight:500}.competition-selector.svelte-1n450du.svelte-1n450du{background:white;padding:1.5rem;border-radius:6px;box-shadow:0 2px 4px rgba(0, 0, 0, 0.1);border-left:4px solid #ff3e00;margin-bottom:2rem}.selector-label.svelte-1n450du.svelte-1n450du{font-size:1rem;font-weight:600;color:#333;margin-bottom:1rem}.competition-select.svelte-1n450du.svelte-1n450du{width:100%;max-width:400px;padding:0.75rem;border:1px solid #ddd;border-radius:6px;font-size:1rem;background:white;color:#333}.competition-select.svelte-1n450du.svelte-1n450du:focus{outline:none;border-color:#ff3e00;box-shadow:0 0 0 3px rgba(255, 62, 0, 0.1)}.results-summary.svelte-1n450du.svelte-1n450du{background:white;padding:1.5rem;border-radius:6px;box-shadow:0 2px 4px rgba(0, 0, 0, 0.1);border-left:4px solid #ff3e00;margin-bottom:2rem}.summary-grid.svelte-1n450du.svelte-1n450du{display:grid;grid-template-columns:repeat(auto-fit, minmax(200px, 1fr));gap:1rem}.summary-item.svelte-1n450du.svelte-1n450du{text-align:center;padding:1rem;background:#f9f9f9;border-radius:6px}.summary-label.svelte-1n450du.svelte-1n450du{font-size:0.875rem;color:#666;margin-bottom:0.5rem}.summary-value.svelte-1n450du.svelte-1n450du{font-size:1.5rem;font-weight:bold;color:#ff3e00}.category-section.svelte-1n450du.svelte-1n450du{background:white;border-radius:6px;overflow:hidden;box-shadow:0 2px 4px rgba(0, 0, 0, 0.1);margin-bottom:2rem}.category-header.svelte-1n450du.svelte-1n450du{background:#f5f5f5;padding:1rem 1.5rem;border-bottom:2px solid #ddd}.category-title.svelte-1n450du.svelte-1n450du{font-size:1.2rem;font-weight:600;color:#333;margin:0}.results-table.svelte-1n450du.svelte-1n450du{width:100%;border-collapse:collapse}.results-table.svelte-1n450du th.svelte-1n450du{background:#fafafa;padding:1rem;text-align:left;font-weight:600;color:#333;border-bottom:1px solid #ddd}.results-table.svelte-1n450du td.svelte-1n450du{padding:1rem;border-bottom:1px solid #eee}.results-table.svelte-1n450du tr.svelte-1n450du:hover{background:#f9f9f9}.placement-badge.svelte-1n450du.svelte-1n450du{display:inline-flex;align-items:center;gap:0.5rem;padding:0.25rem 0.75rem;border-radius:12px;font-size:0.875rem;font-weight:600}.placement-first.svelte-1n450du.svelte-1n450du{background:#fef3c7;color:#92400e}.placement-second.svelte-1n450du.svelte-1n450du{background:#f3f4f6;color:#6b7280}.placement-third.svelte-1n450du.svelte-1n450du{background:#fecaca;color:#b91c1c}.placement-hm.svelte-1n450du.svelte-1n450du{background:#ddd6fe;color:#7c3aed}.placement-none.svelte-1n450du.svelte-1n450du{background:#f9fafb;color:#6b7280}.score-badge.svelte-1n450du.svelte-1n450du{background:#e0f2fe;color:#0369a1;padding:0.25rem 0.5rem;border-radius:6px;font-weight:600}.entry-number.svelte-1n450du.svelte-1n450du{font-weight:600;color:#ff3e00}.judge-notes.svelte-1n450du.svelte-1n450du{font-style:italic;color:#666;max-width:300px;line-height:1.4}.controls.svelte-1n450du.svelte-1n450du{display:flex;gap:1rem;margin-bottom:2rem;flex-wrap:wrap;align-items:center}.btn.svelte-1n450du.svelte-1n450du{padding:0.75rem 1.5rem;border:none;border-radius:6px;font-size:1rem;cursor:pointer;transition:all 0.3s ease;text-decoration:none;display:inline-block}.btn-secondary.svelte-1n450du.svelte-1n450du{background:#6b7280;color:white}.btn-secondary.svelte-1n450du.svelte-1n450du:hover{background:#4b5563}.loading.svelte-1n450du.svelte-1n450du,.empty-state.svelte-1n450du.svelte-1n450du{text-align:center;padding:3rem;color:#666}.spinner.svelte-1n450du.svelte-1n450du{display:inline-block;width:40px;height:40px;border:4px solid #f3f3f3;border-top:4px solid #ff3e00;border-radius:50%;animation:svelte-1n450du-spin 1s linear infinite;margin-bottom:1rem}@keyframes svelte-1n450du-spin{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}.error.svelte-1n450du.svelte-1n450du{background:#fee2e2;color:#dc2626;padding:1rem;border-radius:6px;margin-bottom:1rem}@media(max-width: 768px){.hero.svelte-1n450du h1.svelte-1n450du{font-size:2.5rem}.competition-grid.svelte-1n450du.svelte-1n450du{grid-template-columns:1fr}.summary-grid.svelte-1n450du.svelte-1n450du{grid-template-columns:repeat(2, 1fr)}.results-table.svelte-1n450du.svelte-1n450du{font-size:0.875rem}.results-table.svelte-1n450du th.svelte-1n450du,.results-table.svelte-1n450du td.svelte-1n450du{padding:0.75rem 0.5rem}.judge-notes.svelte-1n450du.svelte-1n450du{max-width:200px}.controls.svelte-1n450du.svelte-1n450du{flex-direction:column;align-items:stretch}}@media(max-width: 480px){.container.svelte-1n450du.svelte-1n450du{padding:0.5rem}.hero.svelte-1n450du h1.svelte-1n450du{font-size:2rem}.summary-grid.svelte-1n450du.svelte-1n450du{grid-template-columns:1fr}.results-table.svelte-1n450du.svelte-1n450du{overflow-x:auto;display:block;white-space:nowrap}}\",\n  map: `{\"version\":3,\"file\":\"+page.svelte\",\"sources\":[\"+page.svelte\"],\"sourcesContent\":[\"<!-- src/routes/competitions/results/+page.svelte -->\\\\n<script>\\\\n  import { onMount, onDestroy } from 'svelte';\\\\n  import { goto } from '$app/navigation';\\\\n  import { userProfile } from '$lib/stores/userProfile';\\\\n  import { supabase } from '$lib/supabaseClient';\\\\n  \\\\n  let competitions = [];\\\\n  let selectedCompetition = null;\\\\n  let results = [];\\\\n  let isLoading = true;\\\\n  let isLoadingResults = false;\\\\n  let error = null;\\\\n\\\\n  onMount(() => {\\\\n    loadPublishedCompetitions();\\\\n    setupEventHandlers();\\\\n  });\\\\n\\\\n  // Removed tab switching reload - causes issues with Supabase tab switching\\\\n  function setupEventHandlers() {\\\\n    // Tab visibility handling removed for better Supabase compatibility\\\\n    return () => {\\\\n      // No cleanup needed now\\\\n    };\\\\n  }\\\\n\\\\n  onDestroy(() => {\\\\n    // Cleanup handled by setupEventHandlers return\\\\n  });\\\\n\\\\n  // Helper functions for ranking points calculation\\\\n  function getPointsForRanking(rankPosition) {\\\\n    // Point system: 1st=3pts, 2nd=2pts, 3rd=1pt, others=0pts\\\\n    switch (rankPosition) {\\\\n      case 1: return 3;\\\\n      case 2: return 2;\\\\n      case 3: return 1;\\\\n      default: return 0;\\\\n    }\\\\n  }\\\\n\\\\n  function calculateEntryPoints(entryId, categoryId, rankings, rankingGroups) {\\\\n    // Get all rankings for this entry from all judges\\\\n    let entryRankings = [];\\\\n    \\\\n    // Check if entry belongs to a custom ranking group\\\\n    let groupId = null;\\\\n    for (const group of rankingGroups) {\\\\n      let categoryIds;\\\\n      try {\\\\n        categoryIds = Array.isArray(group.bjcp_category_ids) \\\\n          ? group.bjcp_category_ids \\\\n          : JSON.parse(group.bjcp_category_ids);\\\\n      } catch (e) {\\\\n        console.warn('Failed to parse bjcp_category_ids for group:', group.id);\\\\n        continue;\\\\n      }\\\\n      \\\\n      if (categoryIds.includes(categoryId)) {\\\\n        groupId = group.id;\\\\n        break;\\\\n      }\\\\n    }\\\\n    \\\\n    if (groupId) {\\\\n      // For custom ranking groups\\\\n      entryRankings = rankings.filter(r => \\\\n        r.entry_id === entryId && r.ranking_group_id === groupId\\\\n      );\\\\n    } else {\\\\n      // For individual categories\\\\n      entryRankings = rankings.filter(r => \\\\n        r.entry_id === entryId && r.bjcp_category_id === categoryId\\\\n      );\\\\n    }\\\\n\\\\n    // Calculate total points from all judges\\\\n    const totalPoints = entryRankings.reduce((sum, ranking) => {\\\\n      return sum + getPointsForRanking(ranking.rank_position);\\\\n    }, 0);\\\\n\\\\n    return {\\\\n      totalPoints,\\\\n      judgeCount: entryRankings.length,\\\\n      rankings: entryRankings\\\\n    };\\\\n  }\\\\n\\\\n  // Load competitions with published results\\\\n  async function loadPublishedCompetitions() {\\\\n    isLoading = true;\\\\n    error = null;\\\\n\\\\n    try {\\\\n      console.log('Loading published competitions...');\\\\n      \\\\n      const { data: competitionsData, error: competitionsError } = await supabase\\\\n        .from('competitions')\\\\n        .select('*')\\\\n        .eq('results_published', true)\\\\n        .order('judging_date', { ascending: false });\\\\n\\\\n      if (competitionsError) throw competitionsError;\\\\n\\\\n      competitions = competitionsData || [];\\\\n      console.log('Loaded', competitions.length, 'published competitions');\\\\n\\\\n      // Auto-select the most recent competition if available\\\\n      if (competitions.length > 0) {\\\\n        selectedCompetition = competitions[0];\\\\n        await loadResultsForCompetition(competitions[0]);\\\\n      }\\\\n\\\\n    } catch (err) {\\\\n      console.error('Error loading competitions:', err);\\\\n      error = err.message || 'Failed to load competitions';\\\\n    } finally {\\\\n      isLoading = false;\\\\n    }\\\\n  }\\\\n\\\\n  // Handle competition selection from dropdown\\\\n  async function handleCompetitionSelect(event) {\\\\n    const competitionId = event.target.value;\\\\n    if (!competitionId) {\\\\n      selectedCompetition = null;\\\\n      results = [];\\\\n      return;\\\\n    }\\\\n\\\\n    const competition = competitions.find(c => c.id === competitionId);\\\\n    if (competition) {\\\\n      selectedCompetition = competition;\\\\n      await loadResultsForCompetition(competition);\\\\n    }\\\\n  }\\\\n\\\\n  // Load results for selected competition\\\\n  async function loadResultsForCompetition(competition) {\\\\n    isLoadingResults = true;\\\\n    error = null;\\\\n\\\\n    try {\\\\n      console.log('Loading results for competition:', competition.name);\\\\n\\\\n      // Get competition results with entry details\\\\n      const { data: resultsData, error: resultsError } = await supabase\\\\n        .from('competition_results')\\\\n        .select('*')\\\\n        .eq('competition_id', competition.id);\\\\n\\\\n      if (resultsError) throw resultsError;\\\\n\\\\n      if (!resultsData || resultsData.length === 0) {\\\\n        results = [];\\\\n        return;\\\\n      }\\\\n\\\\n      // Get entry details for each result\\\\n      const entryIds = resultsData.map(r => r.entry_id);\\\\n      const { data: entriesData, error: entriesError } = await supabase\\\\n        .from('competition_entries')\\\\n        .select('*')\\\\n        .in('id', entryIds);\\\\n\\\\n      if (entriesError) throw entriesError;\\\\n\\\\n      // Get member data\\\\n      const memberIds = [...new Set(entriesData.map(entry => entry.member_id))];\\\\n      const { data: membersData } = await supabase\\\\n        .from('members')\\\\n        .select('id, name')\\\\n        .in('id', memberIds);\\\\n\\\\n      // Get category data\\\\n      const categoryIds = [...new Set(entriesData.map(entry => entry.bjcp_category_id).filter(Boolean))];\\\\n      const { data: categoriesData } = await supabase\\\\n        .from('bjcp_categories')\\\\n        .select('id, category_name, category_number, subcategory_letter, subcategory_name')\\\\n        .in('id', categoryIds);\\\\n\\\\n      // Load ranking groups if using custom system\\\\n      let rankingGroups = [];\\\\n      if (competition.category_system === 'custom') {\\\\n        const { data: groupsData, error: groupsError } = await supabase\\\\n          .from('competition_ranking_groups')\\\\n          .select('*')\\\\n          .eq('competition_id', competition.id)\\\\n          .order('group_order');\\\\n\\\\n        if (!groupsError) {\\\\n          rankingGroups = groupsData || [];\\\\n        }\\\\n      }\\\\n\\\\n      // Load rankings data for points calculation\\\\n      const { data: rankingsData, error: rankingsError } = await supabase\\\\n        .from('competition_rankings')\\\\n        .select(\\`\\\\n          *,\\\\n          entry:competition_entries!inner(id, entry_number, beer_name),\\\\n          judge:members!competition_rankings_judge_id_fkey(id, name),\\\\n          category:bjcp_categories(category_name, category_number, subcategory_letter),\\\\n          ranking_group:competition_ranking_groups(id, group_name, group_description)\\\\n        \\`)\\\\n        .eq('competition_id', competition.id)\\\\n        .order('bjcp_category_id')\\\\n        .order('rank_position');\\\\n\\\\n      const rankings = rankingsData || [];\\\\n\\\\n      // Combine all data\\\\n      results = resultsData.map(result => {\\\\n        const entry = entriesData.find(e => e.id === result.entry_id);\\\\n        const member = membersData?.find(m => m.id === entry?.member_id);\\\\n        const category = categoriesData?.find(c => c.id === entry?.bjcp_category_id);\\\\n\\\\n        const categoryDisplay = category \\\\n          ? \\`\\${category.category_number}\\${category.subcategory_letter || ''} - \\${category.category_name}\\`\\\\n          : 'Unknown Category';\\\\n\\\\n        // Find ranking group for this entry's category\\\\n        let rankingGroupName = null;\\\\n        if (rankingGroups.length > 0 && entry?.bjcp_category_id) {\\\\n          const group = rankingGroups.find(g => \\\\n            g.bjcp_category_ids.includes(entry.bjcp_category_id)\\\\n          );\\\\n          rankingGroupName = group?.group_name || null;\\\\n        }\\\\n\\\\n        // Calculate ranking points for this entry\\\\n        const rankingPoints = entry?.bjcp_category_id \\\\n          ? calculateEntryPoints(entry.id, entry.bjcp_category_id, rankings, rankingGroups)\\\\n          : { totalPoints: 0, judgeCount: 0, rankings: [] };\\\\n\\\\n        return {\\\\n          ...result,\\\\n          entry_number: entry?.entry_number || 'N/A',\\\\n          beer_name: entry?.beer_name || 'Unknown Beer',\\\\n          member_name: member?.name || 'Unknown Member',\\\\n          category_display: categoryDisplay,\\\\n          ranking_group_name: rankingGroupName,\\\\n          // Use ranking group for display if available, otherwise use individual category\\\\n          display_group: rankingGroupName || categoryDisplay,\\\\n          category_number: category?.category_number || '',\\\\n          subcategory_letter: category?.subcategory_letter || '',\\\\n          // Ranking points\\\\n          ranking_points: rankingPoints.totalPoints,\\\\n          judge_count: rankingPoints.judgeCount\\\\n        };\\\\n      });\\\\n\\\\n      console.log('Loaded', results.length, 'results');\\\\n\\\\n    } catch (err) {\\\\n      console.error('Error loading results:', err);\\\\n      error = err.message || 'Failed to load results';\\\\n    } finally {\\\\n      isLoadingResults = false;\\\\n    }\\\\n  }\\\\n\\\\n  // Get placement display\\\\n  function getPlacementDisplay(placement) {\\\\n    switch (placement) {\\\\n      case '1':\\\\n        return { text: '1st Place', class: 'placement-first', medal: '🥇' };\\\\n      case '2':\\\\n        return { text: '2nd Place', class: 'placement-second', medal: '🥈' };\\\\n      case '3':\\\\n        return { text: '3rd Place', class: 'placement-third', medal: '🥉' };\\\\n      case 'HM':\\\\n        return { text: 'Honorable Mention', class: 'placement-hm', medal: '🏅' };\\\\n      default:\\\\n        return { text: 'No Placement', class: 'placement-none', medal: '' };\\\\n    }\\\\n  }\\\\n\\\\n  // Calculate placement based on ranking points within each category/group, with score fallback\\\\n  function calculateRankingBasedPlacement(results) {\\\\n    const resultsByGroup = results.reduce((acc, result) => {\\\\n      const groupKey = result.display_group;\\\\n      if (!acc[groupKey]) {\\\\n        acc[groupKey] = [];\\\\n      }\\\\n      acc[groupKey].push(result);\\\\n      return acc;\\\\n    }, {});\\\\n\\\\n    // Process each group\\\\n    Object.keys(resultsByGroup).forEach(groupKey => {\\\\n      const groupResults = resultsByGroup[groupKey];\\\\n      \\\\n      // Check if any entries in this group have ranking points\\\\n      const hasRankingPoints = groupResults.some(result => result.ranking_points > 0);\\\\n\\\\n      if (hasRankingPoints) {\\\\n        // Use ranking points system\\\\n        groupResults.sort((a, b) => {\\\\n          if (b.ranking_points !== a.ranking_points) {\\\\n            return b.ranking_points - a.ranking_points;\\\\n          }\\\\n          // Tiebreaker: use score\\\\n          return (b.score || 0) - (a.score || 0);\\\\n        });\\\\n\\\\n        // Assign placement based on ranking points position\\\\n        let currentRank = 1;\\\\n        let previousPoints = null;\\\\n\\\\n        groupResults.forEach((result, index) => {\\\\n          if (previousPoints !== null && result.ranking_points < previousPoints) {\\\\n            currentRank = index + 1;\\\\n          }\\\\n\\\\n          // Only assign placement if there are ranking points\\\\n          if (result.ranking_points > 0) {\\\\n            if (currentRank === 1) {\\\\n              result.calculated_placement = '1';\\\\n            } else if (currentRank === 2) {\\\\n              result.calculated_placement = '2';\\\\n            } else if (currentRank === 3) {\\\\n              result.calculated_placement = '3';\\\\n            } else if (currentRank <= 6) { // Top 6 get honorable mention\\\\n              result.calculated_placement = 'HM';\\\\n            } else {\\\\n              result.calculated_placement = '';\\\\n            }\\\\n          } else {\\\\n            result.calculated_placement = '';\\\\n          }\\\\n\\\\n          previousPoints = result.ranking_points;\\\\n        });\\\\n      } else {\\\\n        // Fallback to score-based system when no ranking points exist\\\\n        groupResults.sort((a, b) => {\\\\n          return (b.score || 0) - (a.score || 0);\\\\n        });\\\\n\\\\n        // Assign placement based on score position\\\\n        let currentRank = 1;\\\\n        let previousScore = null;\\\\n\\\\n        groupResults.forEach((result, index) => {\\\\n          const currentScore = result.score || 0;\\\\n          \\\\n          if (previousScore !== null && currentScore < previousScore) {\\\\n            currentRank = index + 1;\\\\n          }\\\\n\\\\n          // Assign placement based on score (only for entries with scores > 0)\\\\n          if (currentScore > 0) {\\\\n            if (currentRank === 1) {\\\\n              result.calculated_placement = '1';\\\\n            } else if (currentRank === 2) {\\\\n              result.calculated_placement = '2';\\\\n            } else if (currentRank === 3) {\\\\n              result.calculated_placement = '3';\\\\n            } else if (currentRank <= 6) { // Top 6 get honorable mention\\\\n              result.calculated_placement = 'HM';\\\\n            } else {\\\\n              result.calculated_placement = '';\\\\n            }\\\\n          } else {\\\\n            result.calculated_placement = '';\\\\n          }\\\\n\\\\n          previousScore = currentScore;\\\\n        });\\\\n      }\\\\n    });\\\\n\\\\n    return resultsByGroup;\\\\n  }\\\\n\\\\n  // Group results by category or ranking group and calculate ranking-based placements\\\\n  $: resultsByCategory = calculateRankingBasedPlacement(results);\\\\n\\\\n  // Get awards summary based on calculated placements\\\\n  $: awardsSummary = {\\\\n    totalEntries: results.length,\\\\n    placedEntries: results.filter(r => r.calculated_placement && r.calculated_placement !== '').length,\\\\n    categories: Object.keys(resultsByCategory).length,\\\\n    averageScore: results.length > 0 \\\\n      ? Math.round((results.reduce((sum, r) => sum + (r.score || 0), 0) / results.length) * 10) / 10\\\\n      : 0\\\\n  };\\\\n\\\\n  // Format date\\\\n  function formatDate(dateString) {\\\\n    if (!dateString) return 'No date set';\\\\n    try {\\\\n      // Handle space-separated datetime format (e.g., \\\\\"2025-08-29 03:43:21.894974\\\\\")\\\\n      let isoString = dateString;\\\\n      if (dateString.includes(' ') && !dateString.includes('T')) {\\\\n        // Replace space with 'T' and add timezone if missing\\\\n        isoString = dateString.replace(' ', 'T');\\\\n        if (!isoString.includes('+') && !isoString.includes('Z')) {\\\\n          // Assume local timezone if no timezone specified\\\\n          isoString += 'Z';\\\\n        }\\\\n      }\\\\n\\\\n      const date = new Date(isoString);\\\\n      // Check if date is valid\\\\n      if (isNaN(date.getTime())) {\\\\n        console.warn('Invalid date after parsing:', dateString, '->', isoString);\\\\n        return 'Invalid Date';\\\\n      }\\\\n\\\\n      return date.toLocaleDateString('en-US', {\\\\n        weekday: 'long',\\\\n        year: 'numeric',\\\\n        month: 'long', \\\\n        day: 'numeric'\\\\n      });\\\\n    } catch (error) {\\\\n      console.warn('Error formatting date:', dateString, error);\\\\n      return 'Invalid Date';\\\\n    }\\\\n  }\\\\n\\\\n  // Navigate back to competitions\\\\n  function navigateToCompetitions() {\\\\n    goto('/competitions');\\\\n  }\\\\n<\\/script>\\\\n\\\\n<style>\\\\n  .container {\\\\n    max-width: 1400px;\\\\n    margin: 0 auto;\\\\n    padding: 1rem;\\\\n  }\\\\n\\\\n  .hero {\\\\n    text-align: center;\\\\n    margin-bottom: 3rem;\\\\n  }\\\\n\\\\n  .hero h1 {\\\\n    color: #ff3e00;\\\\n    text-transform: uppercase;\\\\n    font-size: 4rem;\\\\n    font-weight: 100;\\\\n    margin: 0 0 0.25em;\\\\n    line-height: 1.1;\\\\n  }\\\\n\\\\n  .hero .subtitle {\\\\n    font-size: 1.2rem;\\\\n    color: #333;\\\\n    font-weight: 500;\\\\n  }\\\\n\\\\n  .competition-selector {\\\\n    background: white;\\\\n    padding: 1.5rem;\\\\n    border-radius: 6px;\\\\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\\\\n    border-left: 4px solid #ff3e00;\\\\n    margin-bottom: 2rem;\\\\n  }\\\\n\\\\n  .selector-label {\\\\n    font-size: 1rem;\\\\n    font-weight: 600;\\\\n    color: #333;\\\\n    margin-bottom: 1rem;\\\\n  }\\\\n\\\\n  .competition-select {\\\\n    width: 100%;\\\\n    max-width: 400px;\\\\n    padding: 0.75rem;\\\\n    border: 1px solid #ddd;\\\\n    border-radius: 6px;\\\\n    font-size: 1rem;\\\\n    background: white;\\\\n    color: #333;\\\\n  }\\\\n\\\\n  .competition-select:focus {\\\\n    outline: none;\\\\n    border-color: #ff3e00;\\\\n    box-shadow: 0 0 0 3px rgba(255, 62, 0, 0.1);\\\\n  }\\\\n\\\\n  .results-summary {\\\\n    background: white;\\\\n    padding: 1.5rem;\\\\n    border-radius: 6px;\\\\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\\\\n    border-left: 4px solid #ff3e00;\\\\n    margin-bottom: 2rem;\\\\n  }\\\\n\\\\n  .summary-grid {\\\\n    display: grid;\\\\n    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\\\\n    gap: 1rem;\\\\n  }\\\\n\\\\n  .summary-item {\\\\n    text-align: center;\\\\n    padding: 1rem;\\\\n    background: #f9f9f9;\\\\n    border-radius: 6px;\\\\n  }\\\\n\\\\n  .summary-label {\\\\n    font-size: 0.875rem;\\\\n    color: #666;\\\\n    margin-bottom: 0.5rem;\\\\n  }\\\\n\\\\n  .summary-value {\\\\n    font-size: 1.5rem;\\\\n    font-weight: bold;\\\\n    color: #ff3e00;\\\\n  }\\\\n\\\\n  .category-section {\\\\n    background: white;\\\\n    border-radius: 6px;\\\\n    overflow: hidden;\\\\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\\\\n    margin-bottom: 2rem;\\\\n  }\\\\n\\\\n  .category-header {\\\\n    background: #f5f5f5;\\\\n    padding: 1rem 1.5rem;\\\\n    border-bottom: 2px solid #ddd;\\\\n  }\\\\n\\\\n  .category-title {\\\\n    font-size: 1.2rem;\\\\n    font-weight: 600;\\\\n    color: #333;\\\\n    margin: 0;\\\\n  }\\\\n\\\\n  .results-table {\\\\n    width: 100%;\\\\n    border-collapse: collapse;\\\\n  }\\\\n\\\\n  .results-table th {\\\\n    background: #fafafa;\\\\n    padding: 1rem;\\\\n    text-align: left;\\\\n    font-weight: 600;\\\\n    color: #333;\\\\n    border-bottom: 1px solid #ddd;\\\\n  }\\\\n\\\\n  .results-table td {\\\\n    padding: 1rem;\\\\n    border-bottom: 1px solid #eee;\\\\n  }\\\\n\\\\n  .results-table tr:hover {\\\\n    background: #f9f9f9;\\\\n  }\\\\n\\\\n  .placement-badge {\\\\n    display: inline-flex;\\\\n    align-items: center;\\\\n    gap: 0.5rem;\\\\n    padding: 0.25rem 0.75rem;\\\\n    border-radius: 12px;\\\\n    font-size: 0.875rem;\\\\n    font-weight: 600;\\\\n  }\\\\n\\\\n  .placement-first {\\\\n    background: #fef3c7;\\\\n    color: #92400e;\\\\n  }\\\\n\\\\n  .placement-second {\\\\n    background: #f3f4f6;\\\\n    color: #6b7280;\\\\n  }\\\\n\\\\n  .placement-third {\\\\n    background: #fecaca;\\\\n    color: #b91c1c;\\\\n  }\\\\n\\\\n  .placement-hm {\\\\n    background: #ddd6fe;\\\\n    color: #7c3aed;\\\\n  }\\\\n\\\\n  .placement-none {\\\\n    background: #f9fafb;\\\\n    color: #6b7280;\\\\n  }\\\\n\\\\n  .score-badge {\\\\n    background: #e0f2fe;\\\\n    color: #0369a1;\\\\n    padding: 0.25rem 0.5rem;\\\\n    border-radius: 6px;\\\\n    font-weight: 600;\\\\n  }\\\\n\\\\n  .entry-number {\\\\n    font-weight: 600;\\\\n    color: #ff3e00;\\\\n  }\\\\n\\\\n  .judge-notes {\\\\n    font-style: italic;\\\\n    color: #666;\\\\n    max-width: 300px;\\\\n    line-height: 1.4;\\\\n  }\\\\n\\\\n  .controls {\\\\n    display: flex;\\\\n    gap: 1rem;\\\\n    margin-bottom: 2rem;\\\\n    flex-wrap: wrap;\\\\n    align-items: center;\\\\n  }\\\\n\\\\n  .btn {\\\\n    padding: 0.75rem 1.5rem;\\\\n    border: none;\\\\n    border-radius: 6px;\\\\n    font-size: 1rem;\\\\n    cursor: pointer;\\\\n    transition: all 0.3s ease;\\\\n    text-decoration: none;\\\\n    display: inline-block;\\\\n  }\\\\n\\\\n  .btn-secondary {\\\\n    background: #6b7280;\\\\n    color: white;\\\\n  }\\\\n\\\\n  .btn-secondary:hover {\\\\n    background: #4b5563;\\\\n  }\\\\n\\\\n  .loading, .empty-state {\\\\n    text-align: center;\\\\n    padding: 3rem;\\\\n    color: #666;\\\\n  }\\\\n\\\\n  .spinner {\\\\n    display: inline-block;\\\\n    width: 40px;\\\\n    height: 40px;\\\\n    border: 4px solid #f3f3f3;\\\\n    border-top: 4px solid #ff3e00;\\\\n    border-radius: 50%;\\\\n    animation: spin 1s linear infinite;\\\\n    margin-bottom: 1rem;\\\\n  }\\\\n\\\\n  @keyframes spin {\\\\n    0% { transform: rotate(0deg); }\\\\n    100% { transform: rotate(360deg); }\\\\n  }\\\\n\\\\n  .error {\\\\n    background: #fee2e2;\\\\n    color: #dc2626;\\\\n    padding: 1rem;\\\\n    border-radius: 6px;\\\\n    margin-bottom: 1rem;\\\\n  }\\\\n\\\\n  /* Mobile styles */\\\\n  @media (max-width: 768px) {\\\\n    .hero h1 {\\\\n      font-size: 2.5rem;\\\\n    }\\\\n\\\\n    .competition-grid {\\\\n      grid-template-columns: 1fr;\\\\n    }\\\\n\\\\n    .summary-grid {\\\\n      grid-template-columns: repeat(2, 1fr);\\\\n    }\\\\n\\\\n    .results-table {\\\\n      font-size: 0.875rem;\\\\n    }\\\\n\\\\n    .results-table th,\\\\n    .results-table td {\\\\n      padding: 0.75rem 0.5rem;\\\\n    }\\\\n\\\\n    .judge-notes {\\\\n      max-width: 200px;\\\\n    }\\\\n\\\\n    .controls {\\\\n      flex-direction: column;\\\\n      align-items: stretch;\\\\n    }\\\\n  }\\\\n\\\\n  @media (max-width: 480px) {\\\\n    .container {\\\\n      padding: 0.5rem;\\\\n    }\\\\n\\\\n    .hero h1 {\\\\n      font-size: 2rem;\\\\n    }\\\\n\\\\n    .summary-grid {\\\\n      grid-template-columns: 1fr;\\\\n    }\\\\n\\\\n    .results-table {\\\\n      overflow-x: auto;\\\\n      display: block;\\\\n      white-space: nowrap;\\\\n    }\\\\n  }\\\\n</style>\\\\n\\\\n<div class=\\\\\"container\\\\\">\\\\n  <!-- Hero Section -->\\\\n  <div class=\\\\\"hero\\\\\">\\\\n    <h1>Competition Results</h1>\\\\n    <p class=\\\\\"subtitle\\\\\">View published competition results and standings</p>\\\\n  </div>\\\\n\\\\n  <!-- Controls -->\\\\n  <div class=\\\\\"controls\\\\\">\\\\n    <button class=\\\\\"btn btn-secondary\\\\\" on:click={navigateToCompetitions}>\\\\n      Back to Competitions\\\\n    </button>\\\\n  </div>\\\\n\\\\n  <!-- Error State -->\\\\n  {#if error}\\\\n    <div class=\\\\\"error\\\\\">\\\\n      {error}\\\\n    </div>\\\\n  {/if}\\\\n\\\\n  <!-- Loading State -->\\\\n  {#if isLoading}\\\\n    <div class=\\\\\"loading\\\\\">\\\\n      <div class=\\\\\"spinner\\\\\"></div>\\\\n      <p>Loading competition results...</p>\\\\n    </div>\\\\n  {:else if competitions.length === 0}\\\\n    <!-- No Published Results -->\\\\n    <div class=\\\\\"empty-state\\\\\">\\\\n      <h3>No Results Published</h3>\\\\n      <p>There are currently no competition results available to view.</p>\\\\n      <p>Check back after competitions have been judged and results published.</p>\\\\n    </div>\\\\n  {:else}\\\\n    <!-- Competition Selector -->\\\\n    <div class=\\\\\"competition-selector\\\\\">\\\\n      <div class=\\\\\"selector-label\\\\\">Select Competition to View Results:</div>\\\\n      <select \\\\n        class=\\\\\"competition-select\\\\\" \\\\n        on:change={handleCompetitionSelect}\\\\n        value={selectedCompetition?.id || ''}\\\\n      >\\\\n        <option value=\\\\\"\\\\\">Choose a competition...</option>\\\\n        {#each competitions as competition}\\\\n          <option value={competition.id}>\\\\n            {competition.name} - Judged {formatDate(competition.judging_date)}\\\\n          </option>\\\\n        {/each}\\\\n      </select>\\\\n    </div>\\\\n\\\\n    {#if selectedCompetition}\\\\n      <!-- Results Summary -->\\\\n      {#if !isLoadingResults && results.length > 0}\\\\n        <div class=\\\\\"results-summary\\\\\">\\\\n          <h2 style=\\\\\"margin: 0 0 1.5rem 0; color: #333;\\\\\">{selectedCompetition.name} - Results Summary</h2>\\\\n          <div class=\\\\\"summary-grid\\\\\">\\\\n            <div class=\\\\\"summary-item\\\\\">\\\\n              <div class=\\\\\"summary-label\\\\\">Total Entries</div>\\\\n              <div class=\\\\\"summary-value\\\\\">{awardsSummary.totalEntries}</div>\\\\n            </div>\\\\n            <div class=\\\\\"summary-item\\\\\">\\\\n              <div class=\\\\\"summary-label\\\\\">Awards Given</div>\\\\n              <div class=\\\\\"summary-value\\\\\">{awardsSummary.placedEntries}</div>\\\\n            </div>\\\\n            <div class=\\\\\"summary-item\\\\\">\\\\n              <div class=\\\\\"summary-label\\\\\">Categories</div>\\\\n              <div class=\\\\\"summary-value\\\\\">{awardsSummary.categories}</div>\\\\n            </div>\\\\n            <div class=\\\\\"summary-item\\\\\">\\\\n              <div class=\\\\\"summary-label\\\\\">Average Score</div>\\\\n              <div class=\\\\\"summary-value\\\\\">{awardsSummary.averageScore}</div>\\\\n            </div>\\\\n          </div>\\\\n        </div>\\\\n      {/if}\\\\n\\\\n      <!-- Results by Category -->\\\\n      {#if isLoadingResults}\\\\n        <div class=\\\\\"loading\\\\\">\\\\n          <div class=\\\\\"spinner\\\\\"></div>\\\\n          <p>Loading results...</p>\\\\n        </div>\\\\n      {:else if results.length === 0}\\\\n        <div class=\\\\\"empty-state\\\\\">\\\\n          <h3>No Results Available</h3>\\\\n          <p>Results for this competition have not been entered yet.</p>\\\\n        </div>\\\\n      {:else}\\\\n        {#each Object.entries(resultsByCategory) as [categoryName, categoryResults]}\\\\n          <div class=\\\\\"category-section\\\\\">\\\\n            <div class=\\\\\"category-header\\\\\">\\\\n              <h3 class=\\\\\"category-title\\\\\">{categoryName}</h3>\\\\n            </div>\\\\n            <table class=\\\\\"results-table\\\\\">\\\\n              <thead>\\\\n                <tr>\\\\n                  <th>Entry</th>\\\\n                  <th>Member</th>\\\\n                  <th>Beer Name</th>\\\\n                  <th>Ranking Points</th>\\\\n                  <th>Score</th>\\\\n                  <th>Placement</th>\\\\n                  <th>Judge Notes</th>\\\\n                </tr>\\\\n              </thead>\\\\n              <tbody>\\\\n                {#each categoryResults as result}\\\\n                  <tr>\\\\n                    <td>\\\\n                      <span class=\\\\\"entry-number\\\\\">{result.entry_number}</span>\\\\n                    </td>\\\\n                    <td>{result.member_name}</td>\\\\n                    <td>{result.beer_name}</td>\\\\n                    <td>\\\\n                      <span style=\\\\\"font-weight: 600; color: {result.ranking_points > 0 ? '#059669' : '#666'};\\\\\">\\\\n                        {result.ranking_points} {result.ranking_points === 1 ? 'pt' : 'pts'}\\\\n                      </span>\\\\n                      {#if result.judge_count > 0}\\\\n                        <br><small style=\\\\\"color: #666;\\\\\">{result.judge_count} judge{result.judge_count === 1 ? '' : 's'}</small>\\\\n                      {/if}\\\\n                    </td>\\\\n                    <td>\\\\n                      {#if result.score}\\\\n                        <span class=\\\\\"score-badge\\\\\">{result.score}/50</span>\\\\n                      {:else}\\\\n                        <span class=\\\\\"score-badge\\\\\">-/50</span>\\\\n                      {/if}\\\\n                    </td>\\\\n                    <td>\\\\n                      {#if result.calculated_placement}\\\\n                        <span class=\\\\\"placement-badge {getPlacementDisplay(result.calculated_placement).class}\\\\\">\\\\n                          <span>{getPlacementDisplay(result.calculated_placement).medal}</span>\\\\n                          <span>{getPlacementDisplay(result.calculated_placement).text}</span>\\\\n                        </span>\\\\n                      {:else}\\\\n                        <span class=\\\\\"placement-badge placement-none\\\\\">No Placement</span>\\\\n                      {/if}\\\\n                    </td>\\\\n                    <td>\\\\n                      {#if result.judge_notes}\\\\n                        <div class=\\\\\"judge-notes\\\\\">{result.judge_notes}</div>\\\\n                      {:else}\\\\n                        <span style=\\\\\"color: #999;\\\\\">No notes</span>\\\\n                      {/if}\\\\n                    </td>\\\\n                  </tr>\\\\n                {/each}\\\\n              </tbody>\\\\n            </table>\\\\n          </div>\\\\n        {/each}\\\\n      {/if}\\\\n    {/if}\\\\n  {/if}\\\\n</div>\"],\"names\":[],\"mappings\":\"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\"}`\n};\nfunction calculateRankingBasedPlacement(results) {\n  const resultsByGroup = results.reduce(\n    (acc, result) => {\n      const groupKey = result.display_group;\n      if (!acc[groupKey]) {\n        acc[groupKey] = [];\n      }\n      acc[groupKey].push(result);\n      return acc;\n    },\n    {}\n  );\n  Object.keys(resultsByGroup).forEach((groupKey) => {\n    const groupResults = resultsByGroup[groupKey];\n    const hasRankingPoints = groupResults.some((result) => result.ranking_points > 0);\n    if (hasRankingPoints) {\n      groupResults.sort((a, b) => {\n        if (b.ranking_points !== a.ranking_points) {\n          return b.ranking_points - a.ranking_points;\n        }\n        return (b.score || 0) - (a.score || 0);\n      });\n      let currentRank = 1;\n      let previousPoints = null;\n      groupResults.forEach((result, index) => {\n        if (previousPoints !== null && result.ranking_points < previousPoints) {\n          currentRank = index + 1;\n        }\n        if (result.ranking_points > 0) {\n          if (currentRank === 1) {\n            result.calculated_placement = \"1\";\n          } else if (currentRank === 2) {\n            result.calculated_placement = \"2\";\n          } else if (currentRank === 3) {\n            result.calculated_placement = \"3\";\n          } else if (currentRank <= 6) {\n            result.calculated_placement = \"HM\";\n          } else {\n            result.calculated_placement = \"\";\n          }\n        } else {\n          result.calculated_placement = \"\";\n        }\n        previousPoints = result.ranking_points;\n      });\n    } else {\n      groupResults.sort((a, b) => {\n        return (b.score || 0) - (a.score || 0);\n      });\n      let currentRank = 1;\n      let previousScore = null;\n      groupResults.forEach((result, index) => {\n        const currentScore = result.score || 0;\n        if (previousScore !== null && currentScore < previousScore) {\n          currentRank = index + 1;\n        }\n        if (currentScore > 0) {\n          if (currentRank === 1) {\n            result.calculated_placement = \"1\";\n          } else if (currentRank === 2) {\n            result.calculated_placement = \"2\";\n          } else if (currentRank === 3) {\n            result.calculated_placement = \"3\";\n          } else if (currentRank <= 6) {\n            result.calculated_placement = \"HM\";\n          } else {\n            result.calculated_placement = \"\";\n          }\n        } else {\n          result.calculated_placement = \"\";\n        }\n        previousScore = currentScore;\n      });\n    }\n  });\n  return resultsByGroup;\n}\nconst Page = create_ssr_component(($$result, $$props, $$bindings, slots) => {\n  let resultsByCategory;\n  let results = [];\n  onDestroy(() => {\n  });\n  $$result.css.add(css);\n  resultsByCategory = calculateRankingBasedPlacement(results);\n  ({\n    totalEntries: results.length,\n    placedEntries: results.filter((r) => r.calculated_placement && r.calculated_placement !== \"\").length,\n    categories: Object.keys(resultsByCategory).length,\n    averageScore: results.length > 0 ? Math.round(results.reduce((sum, r) => sum + (r.score || 0), 0) / results.length * 10) / 10 : 0\n  });\n  return `   <div class=\"container svelte-1n450du\"> <div class=\"hero svelte-1n450du\" data-svelte-h=\"svelte-utbced\"><h1 class=\"svelte-1n450du\">Competition Results</h1> <p class=\"subtitle svelte-1n450du\">View published competition results and standings</p></div>  <div class=\"controls svelte-1n450du\"><button class=\"btn btn-secondary svelte-1n450du\" data-svelte-h=\"svelte-ri2cai\">Back to Competitions</button></div>  ${``}  ${`<div class=\"loading svelte-1n450du\" data-svelte-h=\"svelte-1c57wy0\"><div class=\"spinner svelte-1n450du\"></div> <p>Loading competition results...</p></div>`}</div>`;\n});\nexport {\n  Page as default\n};\n"],"names":[],"mappings":"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"}
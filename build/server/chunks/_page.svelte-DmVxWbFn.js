import { c as create_ssr_component, a as subscribe, o as onDestroy, e as each, d as escape, b as add_attribute } from './ssr-CFMHIens.js';
import './supabaseClient-D_8i9Ohq.js';
import './Toaster.svelte_svelte_type_style_lang-BKJPPWO5.js';
import { i as isLoading, a as isLoaded, c as categories, b as clubEventTypes, f as floridaCircuitEvents, m as monthlyEvents, p as placementOptions } from './categoryStore-D9lRjhjd.js';
import { i as isLoadingProfile, u as userProfile } from './userProfile-BAUZwBX2.js';
import './client-C3KLrhj1.js';
import '@supabase/supabase-js';
import './index-Ct3aIOD7.js';
import './false-CRHihH2U.js';
import './exports-DKuYoYKl.js';

const css = {
  code: 'main.svelte-o4lktw.svelte-o4lktw{margin:0 auto;padding:1rem;width:90%;max-width:600px;text-align:center}h2.svelte-o4lktw.svelte-o4lktw{text-transform:uppercase;color:#ff3e00;font-size:2rem;font-weight:100;margin:2rem 0 1rem}form.svelte-o4lktw.svelte-o4lktw{display:flex;flex-direction:column;gap:1rem}label.svelte-o4lktw.svelte-o4lktw{display:flex;flex-direction:column;font-weight:500;color:#333;text-align:left}select.svelte-o4lktw.svelte-o4lktw,input[type="date"].svelte-o4lktw.svelte-o4lktw{padding:0.5rem;margin-top:0.25rem;font-size:1rem;border:1px solid #ccc;border-radius:4px;width:100%;box-sizing:border-box;transition:border-color 0.2s}select.svelte-o4lktw.svelte-o4lktw:focus,input[type="date"].svelte-o4lktw.svelte-o4lktw:focus{outline:none;border-color:#2563eb}.points-display.svelte-o4lktw.svelte-o4lktw{background-color:#f8fafc;padding:1rem;border-radius:6px;border:1px solid #e2e8f0}.points-display.svelte-o4lktw p.svelte-o4lktw{margin:0;color:#1e293b}button.svelte-o4lktw.svelte-o4lktw{padding:0.75rem 1.5rem;background-color:#2563eb;color:white;border:none;border-radius:6px;font-size:1rem;font-weight:500;cursor:pointer;transition:background-color 0.2s;margin-top:1rem}button.svelte-o4lktw.svelte-o4lktw:hover:not(:disabled){background-color:#1d4ed8}button.svelte-o4lktw.svelte-o4lktw:disabled{background-color:#cbd5e1;cursor:not-allowed}button.submitting.svelte-o4lktw.svelte-o4lktw{background-color:#64748b}.loading.svelte-o4lktw.svelte-o4lktw,.error.svelte-o4lktw.svelte-o4lktw{padding:2rem;text-align:center}.loading.svelte-o4lktw .retry-btn.svelte-o4lktw{background-color:#059669;margin-top:1rem;padding:0.5rem 1rem;font-size:0.9rem}.loading.svelte-o4lktw .retry-btn.svelte-o4lktw:hover{background-color:#047857}.error.svelte-o4lktw.svelte-o4lktw{color:#dc2626}.error.svelte-o4lktw button.svelte-o4lktw{background-color:#dc2626;margin-top:1rem}.error.svelte-o4lktw button.svelte-o4lktw:hover{background-color:#b91c1c}textarea.svelte-o4lktw.svelte-o4lktw{padding:0.5rem;margin-top:0.25rem;font-size:1rem;border:1px solid #ccc;border-radius:4px;width:100%;box-sizing:border-box;transition:border-color 0.2s;resize:vertical;min-height:80px}textarea.svelte-o4lktw.svelte-o4lktw:focus{outline:none;border-color:#2563eb}.placement-question.svelte-o4lktw.svelte-o4lktw{display:flex;flex-direction:column;gap:0.5rem}.question-label.svelte-o4lktw.svelte-o4lktw{font-weight:500;color:#333;margin-bottom:0.5rem}.radio-group.svelte-o4lktw.svelte-o4lktw{display:flex;flex-direction:column;gap:0.75rem}.radio-option.svelte-o4lktw.svelte-o4lktw{display:flex;align-items:center;gap:0.75rem;padding:0.75rem 1rem;border:2px solid #e5e7eb;border-radius:6px;cursor:pointer;transition:all 0.2s ease;background:white}.radio-option.svelte-o4lktw.svelte-o4lktw:hover{border-color:#ff3e00;background-color:#fef2f2}.radio-option.svelte-o4lktw.svelte-o4lktw:has(.radio-input:checked){border-color:#ff3e00;background-color:#fef2f2}.radio-input.svelte-o4lktw.svelte-o4lktw{width:20px;height:20px;accent-color:#ff3e00;cursor:pointer}.radio-text.svelte-o4lktw.svelte-o4lktw{font-weight:500;color:#333;cursor:pointer;flex-grow:1}@media(max-width: 480px){.radio-option.svelte-o4lktw.svelte-o4lktw{min-height:44px;padding:1rem 0.75rem}.radio-input.svelte-o4lktw.svelte-o4lktw{min-width:44px;min-height:44px}}.description-display.svelte-o4lktw.svelte-o4lktw{display:flex;flex-direction:column;gap:0.5rem}.form-label.svelte-o4lktw.svelte-o4lktw{font-weight:500;color:#333}.read-only-field.svelte-o4lktw.svelte-o4lktw{padding:0.5rem;margin-top:0.25rem;font-size:1rem;border:1px solid #d1d5db;border-radius:4px;width:100%;box-sizing:border-box;background-color:#f8fafc;color:#6b7280;font-style:italic;cursor:not-allowed}',
  map: '{"version":3,"file":"+page.svelte","sources":["+page.svelte"],"sourcesContent":["<script>\\n  import { onMount, onDestroy } from \\"svelte\\";\\n  import { supabase } from \\"$lib/supabaseClient\\";\\n  import toast from \\"svelte-french-toast\\";\\n  import {\\n    categories,\\n    placementOptions,\\n    monthlyEvents,\\n    floridaCircuitEvents,\\n    isLoaded,\\n    isLoading,\\n    loadCategoryData,\\n    clubEventTypes,\\n  } from \\"$lib/stores/categoryStore.js\\";\\n  import {\\n    userProfile,\\n    loadUserProfile,\\n    isLoadingProfile,\\n  } from \\"$lib/stores/userProfile\\";\\n  import { get } from \\"svelte/store\\";\\n  import { page } from \\"$app/stores\\";\\n\\n  // Form state\\n  let selectedCategory = \\"\\";\\n  let selectedEvent = \\"\\";\\n  let selectedFloridaEvent = \\"\\";\\n  let selectedPlacement = \\"\\";\\n  let eventDate = \\"\\";\\n  let isSubmitting = false;\\n  let customDescription = \\"\\";\\n  let selectedClubEvent = \\"\\";\\n  \\n  // NEW: Florida Circuit enhancement variables\\n  let didPlaceInEvent = null; // \\"Yes\\" | \\"No\\" | null\\n  let pointsBreakdown = \\"\\";\\n  let points = null; // Add missing points variable\\n\\n  // Cleanup functions\\n  let cleanupFunctions = [];\\n\\n  // Derived values\\n  $: user = $userProfile;\\n  \\n  // Enhanced points calculation with Florida Circuit logic\\n  $: if (selectedCategory === \\"Florida Circuit\\" && selectedFloridaEvent) {\\n    if (didPlaceInEvent === \\"No\\") {\\n      points = 1; // Participation only\\n      pointsBreakdown = \\"1 point (Participation)\\";\\n    } else if (didPlaceInEvent === \\"Yes\\" && selectedPlacement) {\\n      const placementPoints = $placementOptions.find(p => p.value === selectedPlacement)?.points ?? 0;\\n      points = 1 + placementPoints;\\n      pointsBreakdown = `1 (Participation) + ${placementPoints} (${selectedPlacement}) = ${points} points`;\\n    } else {\\n      points = null;\\n      pointsBreakdown = \\"\\";\\n    }\\n  } else {\\n    // Existing logic for other categories\\n    points = selectedPlacement\\n      ? ($placementOptions.find((p) => p.value === selectedPlacement)?.points ?? null)\\n      : selectedCategory && $isLoaded\\n        ? ($placementOptions.find(\\n            (p) => p.category === selectedCategory && (p.value === \\"EMPTY\\" || p.value === \\"\\"),\\n          )?.points ?? null)\\n        : null;\\n    \\n    pointsBreakdown = points ? `${points} points` : \\"\\";\\n  }\\n\\n  // Filter data based on category selection\\n  $: filteredPlacements =\\n    selectedCategory && $isLoaded\\n      ? $placementOptions.filter((p) => p.category === selectedCategory)\\n      : [];\\n\\n  $: filteredMonthlyEvents =\\n    selectedCategory === \\"Monthly Challenge\\" && $isLoaded ? $monthlyEvents : [];\\n\\n  $: filteredFloridaEvents =\\n    selectedCategory === \\"Florida Circuit\\" && $isLoaded\\n      ? $floridaCircuitEvents\\n      : [];\\n\\n  $: filteredClubEvents =\\n    selectedCategory === \\"Jax Club Event\\" && $isLoaded ? $clubEventTypes : [];\\n\\n  // Check if category needs placement selection\\n  $: needsPlacement =\\n    selectedCategory && $isLoaded\\n      ? $categories.find((c) => c.name === selectedCategory)?.placement === true\\n      : false;\\n\\n  // Check if category needs custom description\\n  $: needsDescription =\\n    selectedCategory && $isLoaded\\n      ? $categories.find((c) => c.name === selectedCategory)?.placement ===\\n          false && selectedCategory !== \\"Jax Club Event\\" && selectedCategory !== \\"Volunteer\\"\\n      : false;\\n\\n  // NEW: Show placement dropdown for Florida Circuit only when user placed\\n  $: showPlacementDropdown = selectedCategory === \\"Florida Circuit\\" && \\n                            selectedFloridaEvent && \\n                            didPlaceInEvent === \\"Yes\\";\\n\\n  // Reset dependent fields when category changes\\n  $: if (selectedCategory) {\\n    selectedEvent = \\"\\";\\n    selectedFloridaEvent = \\"\\";\\n    selectedClubEvent = \\"\\";\\n    selectedPlacement = \\"\\";\\n    eventDate = \\"\\";\\n    didPlaceInEvent = null; // Reset participation choice\\n  }\\n\\n  // Reset placement when event changes\\n  $: if (selectedEvent || selectedFloridaEvent) {\\n    selectedPlacement = \\"\\";\\n    eventDate = \\"\\";\\n    if (selectedFloridaEvent && selectedCategory === \\"Florida Circuit\\") {\\n      didPlaceInEvent = null; // Reset participation choice when changing Florida Circuit events\\n    }\\n  }\\n\\n  // Reset placement when switching to participation only\\n  $: if (didPlaceInEvent === \\"No\\") {\\n    selectedPlacement = null;\\n  }\\n\\n  // Data loading function\\n  async function loadData(force = false) {\\n    console.log(\\n      \\"🔄 Loading data, force:\\",\\n      force,\\n      \\"isLoaded:\\",\\n      $isLoaded,\\n      \\"isLoading:\\",\\n      $isLoading,\\n    );\\n\\n    try {\\n      await Promise.all([loadCategoryData(force), loadUserProfile(force)]);\\n\\n      console.log(\\"✅ All data loaded successfully\\");\\n    } catch (error) {\\n      console.error(\\"❌ Error loading data:\\", error);\\n      toast.error(\\"Failed to load data. Please try again.\\");\\n    }\\n  }\\n\\n  // Removed tab focus handler - causes issues with Supabase tab switching\\n  function setupEventHandlers() {\\n    // Tab visibility handling removed for better Supabase compatibility\\n    return () => {\\n      // No cleanup needed now\\n    };\\n  }\\n\\n  // Enhanced form validation with Florida Circuit logic\\n  function validateForm() {\\n    const errors = [];\\n\\n    if (!selectedCategory) errors.push(\\"Please select a category\\");\\n    if (!eventDate) errors.push(\\"Please select an event date\\");\\n    \\n    // Florida Circuit specific validation\\n    if (selectedCategory === \\"Florida Circuit\\") {\\n      if (!selectedFloridaEvent) errors.push(\\"Please select a Florida Circuit event\\");\\n      if (didPlaceInEvent === null) errors.push(\\"Please indicate if you placed in this event\\");\\n      if (didPlaceInEvent === \\"Yes\\" && !selectedPlacement) errors.push(\\"Please select your placement\\");\\n    } else {\\n      // Existing validation for other categories\\n      if (needsPlacement && !selectedPlacement) {\\n        errors.push(\\"Please select a placement\\");\\n      }\\n    }\\n\\n    if (selectedCategory === \\"Monthly Challenge\\" && !selectedEvent) {\\n      errors.push(\\"Please select a monthly event\\");\\n    }\\n\\n    if (selectedCategory === \\"Volunteer\\" && !selectedFloridaEvent) {\\n      errors.push(\\"Please select a Florida Circuit event to volunteer at\\");\\n    }\\n\\n    if (!user?.id) {\\n      errors.push(\\"User profile not loaded. Please wait a moment.\\");\\n    }\\n\\n    if (needsDescription && !customDescription.trim()) {\\n      errors.push(`Please provide a description for ${selectedCategory}`);\\n    }\\n\\n    if (selectedCategory === \\"Jax Club Event\\" && !selectedClubEvent) {\\n      errors.push(\\"Please select a club event\\");\\n    }\\n\\n    return errors;\\n  }\\n\\n  // Reset form\\n  function resetForm() {\\n    selectedCategory = \\"\\";\\n    selectedEvent = \\"\\";\\n    selectedFloridaEvent = \\"\\";\\n    selectedPlacement = \\"\\";\\n    eventDate = \\"\\";\\n    customDescription = \\"\\";\\n    selectedClubEvent = \\"\\";\\n    didPlaceInEvent = null; // Reset participation choice\\n  }\\n\\n  // Enhanced description building\\n  function getSubmissionDescription() {\\n    if (selectedCategory === \\"Florida Circuit\\") {\\n      const baseDescription = selectedFloridaEvent;\\n      const placementText = didPlaceInEvent === \\"Yes\\" && selectedPlacement \\n        ? ` - ${selectedPlacement}` \\n        : didPlaceInEvent === \\"No\\" \\n          ? \\" - Participation Only\\"\\n          : \\"\\";\\n      return baseDescription + placementText;\\n    } else if (selectedCategory === \\"Monthly Challenge\\") {\\n      return selectedEvent;\\n    } else if (selectedCategory === \\"Volunteer\\") {\\n      return `Volunteered at ${selectedFloridaEvent}`;\\n    } else if (selectedCategory === \\"Jax Club Event\\") {\\n      return selectedClubEvent;\\n    } else if (\\n      selectedCategory === \\"Brew Pick of Destiny\\" ||\\n      selectedCategory === \\"Officer Position\\" ||\\n      selectedCategory === \\"JAX Presentation\\" ||\\n      selectedCategory === \\"Host Group Brew\\"\\n    ) {\\n      return customDescription.trim();\\n    }\\n    return \\"\\";\\n  }\\n\\n  // Submit handler\\n  async function handleSubmit() {\\n    if (isSubmitting) return;\\n\\n    const errors = validateForm();\\n    if (errors.length > 0) {\\n      toast.error(errors[0]);\\n      return;\\n    }\\n\\n    isSubmitting = true;\\n\\n    try {\\n      const description = getSubmissionDescription();\\n\\n      const payload = {\\n        member_id: user.id,\\n        category: selectedCategory,\\n        description,\\n        points,\\n        event_date: eventDate,\\n        submitted_at: new Date().toISOString(),\\n      };\\n\\n      const { error } = await supabase\\n        .from(\\"point_submissions\\")\\n        .insert([payload]);\\n\\n      if (error) {\\n        console.error(\\"Submission error:\\", error);\\n        toast.error(`Submission failed: ${error.message}`);\\n      } else {\\n        toast.success(\\"Points submitted successfully!\\");\\n        resetForm();\\n      }\\n    } catch (error) {\\n      console.error(\\"Unexpected error:\\", error);\\n      toast.error(\\"An unexpected error occurred. Please try again.\\");\\n    } finally {\\n      isSubmitting = false;\\n    }\\n  }\\n\\n  // Enhanced form validation for submission\\n  $: canSubmit =\\n    selectedCategory &&\\n    eventDate &&\\n    user?.id &&\\n    !isSubmitting &&\\n    !$isLoading &&\\n    !$isLoadingProfile &&\\n    // Florida Circuit specific validation\\n    (selectedCategory !== \\"Florida Circuit\\" || \\n     (selectedFloridaEvent && didPlaceInEvent && \\n      (didPlaceInEvent === \\"No\\" || selectedPlacement))) &&\\n    // Existing validations for other categories\\n    ((selectedCategory === \\"Monthly Challenge\\" &&\\n      selectedEvent &&\\n      selectedPlacement) ||\\n      (selectedCategory === \\"Florida Circuit\\") || // Handled above\\n      (selectedCategory === \\"Jax Club Event\\" && selectedClubEvent) ||\\n      (selectedCategory === \\"Volunteer\\" && selectedFloridaEvent) ||\\n      ((selectedCategory === \\"Brew Pick of Destiny\\" ||\\n        selectedCategory === \\"Officer Position\\" ||\\n        selectedCategory === \\"JAX Presentation\\" ||\\n        selectedCategory === \\"Host Group Brew\\") &&\\n        customDescription.trim()) ||\\n      (selectedCategory !== \\"Monthly Challenge\\" &&\\n        selectedCategory !== \\"Florida Circuit\\" &&\\n        selectedCategory !== \\"Jax Club Event\\" &&\\n        selectedCategory !== \\"Volunteer\\" &&\\n        selectedCategory !== \\"Brew Pick of Destiny\\" &&\\n        selectedCategory !== \\"Officer Position\\" &&\\n        selectedCategory !== \\"JAX Presentation\\" &&\\n        selectedCategory !== \\"Host Group Brew\\" &&\\n        selectedPlacement));\\n\\n  // Lifecycle hooks\\n  onMount(() => {\\n    // Initial data load\\n    loadData(true);\\n\\n    // Setup tab focus handling\\n    const cleanup = setupEventHandlers();\\n    cleanupFunctions.push(cleanup);\\n  });\\n\\n  onDestroy(() => {\\n    // Cleanup all event listeners\\n    cleanupFunctions.forEach((cleanup) => cleanup());\\n  });\\n<\/script>\\n\\n<main>\\n  <h2>Submit Points</h2>\\n\\n  {#if $isLoading || $isLoadingProfile}\\n    <div class=\\"loading\\">\\n      <p>Loading data...</p>\\n      <small>\\n        {#if $isLoading}Loading categories...{/if}\\n        {#if $isLoadingProfile}Loading user profile...{/if}\\n      </small>\\n      <button on:click={() => loadData(true)} class=\\"retry-btn\\">\\n        Force Refresh\\n      </button>\\n    </div>\\n  {:else if $categories.length > 0}\\n    <form on:submit|preventDefault={handleSubmit}>\\n      <label>\\n        Category *\\n        <select bind:value={selectedCategory} required>\\n          <option value=\\"\\">Select a category</option>\\n          {#each $categories as cat}\\n            <option value={cat.name}>{cat.name}</option>\\n          {/each}\\n        </select>\\n      </label>\\n\\n      {#if selectedCategory === \\"Brew Pick of Destiny\\" || selectedCategory === \\"Officer Position\\" || selectedCategory === \\"JAX Presentation\\" || selectedCategory === \\"Host Group Brew\\"}\\n        <label>\\n          Description *\\n          <textarea\\n            bind:value={customDescription}\\n            placeholder=\\"Describe your {selectedCategory} achievement\\"\\n            rows=\\"3\\"\\n            required\\n          ></textarea>\\n        </label>\\n      {/if}\\n\\n      {#if selectedCategory === \\"Florida Circuit\\"}\\n        <label>\\n          Florida Circuit Event *\\n          <select bind:value={selectedFloridaEvent} required>\\n            <option value=\\"\\">Select Florida Circuit event</option>\\n            {#each filteredFloridaEvents as ev}\\n              <option value={ev.name}>{ev.name}</option>\\n            {/each}\\n          </select>\\n        </label>\\n      {/if}\\n\\n      <!-- NEW: Florida Circuit Placement Question -->\\n      {#if selectedCategory === \\"Florida Circuit\\" && selectedFloridaEvent}\\n        <div class=\\"placement-question\\">\\n          <label class=\\"question-label\\">Did you place in this event? *</label>\\n          <div class=\\"radio-group\\">\\n            <label class=\\"radio-option\\">\\n              <input\\n                type=\\"radio\\"\\n                bind:group={didPlaceInEvent}\\n                value=\\"No\\"\\n                class=\\"radio-input\\"\\n              />\\n              <span class=\\"radio-text\\">No - Participation Only</span>\\n            </label>\\n            <label class=\\"radio-option\\">\\n              <input\\n                type=\\"radio\\"\\n                bind:group={didPlaceInEvent}\\n                value=\\"Yes\\"\\n                class=\\"radio-input\\"\\n              />\\n              <span class=\\"radio-text\\">Yes - I placed in this event</span>\\n            </label>\\n          </div>\\n        </div>\\n      {/if}\\n\\n      {#if selectedCategory === \\"Monthly Challenge\\"}\\n        <label>\\n          Monthly Event *\\n          <select bind:value={selectedEvent} required>\\n            <option value=\\"\\">Select event</option>\\n            {#each filteredMonthlyEvents as ev}\\n              <option value={ev.name}>{ev.name}</option>\\n            {/each}\\n          </select>\\n        </label>\\n      {/if}\\n\\n      {#if selectedCategory === \\"Jax Club Event\\"}\\n        <label>\\n          Club Event Type *\\n          <select bind:value={selectedClubEvent} required>\\n            <option value=\\"\\">Select club event type</option>\\n            {#each filteredClubEvents as ev}\\n              <option value={ev.event_type}>{ev.event_type}</option>\\n            {/each}\\n          </select>\\n        </label>\\n      {/if}\\n\\n      {#if selectedCategory === \\"Volunteer\\"}\\n        <label>\\n          Florida Circuit Event (Volunteer) *\\n          <select bind:value={selectedFloridaEvent} required>\\n            <option value=\\"\\">Select event Volunteered at </option>\\n            {#each $floridaCircuitEvents as ev}\\n              <option value={ev.name}>{ev.name}</option>\\n            {/each}\\n          </select>\\n        </label>\\n        \\n        <!-- Read-only description display for Volunteer -->\\n        {#if selectedFloridaEvent}\\n          <div class=\\"description-display\\">\\n            <label class=\\"form-label\\">Description</label>\\n            <div class=\\"read-only-field\\">Volunteered at {selectedFloridaEvent}</div>\\n          </div>\\n        {/if}\\n      {/if}\\n\\n      <!-- Enhanced placement selection logic -->\\n      {#if (filteredPlacements.length > 0 && needsPlacement && (selectedCategory !== \\"Monthly Challenge\\" || selectedEvent) && (selectedCategory !== \\"Florida Circuit\\" || showPlacementDropdown) && (selectedCategory !== \\"Jax Club Event\\" || selectedClubEvent)) || showPlacementDropdown}\\n        <label>\\n          Placement *\\n          <select bind:value={selectedPlacement} required>\\n            <option value=\\"\\">Select placement</option>\\n            {#each filteredPlacements as opt}\\n              <option value={opt.value}>{opt.label}</option>\\n            {/each}\\n          </select>\\n        </label>\\n      {/if}\\n\\n      <!-- Enhanced points and date display -->\\n      {#if selectedPlacement || (selectedCategory === \\"Florida Circuit\\" && didPlaceInEvent === \\"No\\") || (selectedCategory === \\"Volunteer\\" && selectedFloridaEvent) || (selectedCategory === \\"Jax Club Event\\" && selectedClubEvent) || ((selectedCategory === \\"Brew Pick of Destiny\\" || selectedCategory === \\"Officer Position\\" || selectedCategory === \\"JAX Presentation\\" || selectedCategory === \\"Host Group Brew\\") && customDescription.trim())}\\n        <div class=\\"points-display\\">\\n          <p><strong>Points: {pointsBreakdown || (points ? `${points} points` : \\"—\\")}</strong></p>\\n        </div>\\n\\n        <label>\\n          Event Date *\\n          <input type=\\"date\\" bind:value={eventDate} required />\\n        </label>\\n      {/if}\\n\\n      <button\\n        type=\\"submit\\"\\n        disabled={!canSubmit}\\n        class:submitting={isSubmitting}\\n      >\\n        {isSubmitting ? \\"Submitting...\\" : \\"Submit Points\\"}\\n      </button>\\n    </form>\\n  {:else}\\n    <div class=\\"error\\">\\n      <p>Failed to load categories. Please refresh the page.</p>\\n      <button on:click={() => loadData(true)}>Retry</button>\\n    </div>\\n  {/if}\\n</main>\\n\\n<style>\\n  main {\\n    margin: 0 auto;\\n    padding: 1rem;\\n    width: 90%;\\n    max-width: 600px;\\n    text-align: center;\\n  }\\n\\n  h2 {\\n    text-transform: uppercase;\\n    color: #ff3e00;\\n    font-size: 2rem;\\n    font-weight: 100;\\n    margin: 2rem 0 1rem;\\n  }\\n\\n  form {\\n    display: flex;\\n    flex-direction: column;\\n    gap: 1rem;\\n  }\\n\\n  label {\\n    display: flex;\\n    flex-direction: column;\\n    font-weight: 500;\\n    color: #333;\\n    text-align: left;\\n  }\\n\\n  select,\\n  input[type=\\"date\\"] {\\n    padding: 0.5rem;\\n    margin-top: 0.25rem;\\n    font-size: 1rem;\\n    border: 1px solid #ccc;\\n    border-radius: 4px;\\n    width: 100%;\\n    box-sizing: border-box;\\n    transition: border-color 0.2s;\\n  }\\n\\n  select:focus,\\n  input[type=\\"date\\"]:focus {\\n    outline: none;\\n    border-color: #2563eb;\\n  }\\n\\n  .points-display {\\n    background-color: #f8fafc;\\n    padding: 1rem;\\n    border-radius: 6px;\\n    border: 1px solid #e2e8f0;\\n  }\\n\\n  .points-display p {\\n    margin: 0;\\n    color: #1e293b;\\n  }\\n\\n  button {\\n    padding: 0.75rem 1.5rem;\\n    background-color: #2563eb;\\n    color: white;\\n    border: none;\\n    border-radius: 6px;\\n    font-size: 1rem;\\n    font-weight: 500;\\n    cursor: pointer;\\n    transition: background-color 0.2s;\\n    margin-top: 1rem;\\n  }\\n\\n  button:hover:not(:disabled) {\\n    background-color: #1d4ed8;\\n  }\\n\\n  button:disabled {\\n    background-color: #cbd5e1;\\n    cursor: not-allowed;\\n  }\\n\\n  button.submitting {\\n    background-color: #64748b;\\n  }\\n\\n  .loading,\\n  .error {\\n    padding: 2rem;\\n    text-align: center;\\n  }\\n\\n  .loading .retry-btn {\\n    background-color: #059669;\\n    margin-top: 1rem;\\n    padding: 0.5rem 1rem;\\n    font-size: 0.9rem;\\n  }\\n\\n  .loading .retry-btn:hover {\\n    background-color: #047857;\\n  }\\n\\n  .error {\\n    color: #dc2626;\\n  }\\n\\n  .error button {\\n    background-color: #dc2626;\\n    margin-top: 1rem;\\n  }\\n\\n  .error button:hover {\\n    background-color: #b91c1c;\\n  }\\n\\n  textarea {\\n    padding: 0.5rem;\\n    margin-top: 0.25rem;\\n    font-size: 1rem;\\n    border: 1px solid #ccc;\\n    border-radius: 4px;\\n    width: 100%;\\n    box-sizing: border-box;\\n    transition: border-color 0.2s;\\n    resize: vertical;\\n    min-height: 80px;\\n  }\\n\\n  textarea:focus {\\n    outline: none;\\n    border-color: #2563eb;\\n  }\\n\\n  /* NEW: Florida Circuit Radio Button Styling */\\n  .placement-question {\\n    display: flex;\\n    flex-direction: column;\\n    gap: 0.5rem;\\n  }\\n\\n  .question-label {\\n    font-weight: 500;\\n    color: #333;\\n    margin-bottom: 0.5rem;\\n  }\\n\\n  .radio-group {\\n    display: flex;\\n    flex-direction: column;\\n    gap: 0.75rem;\\n  }\\n\\n  .radio-option {\\n    display: flex;\\n    align-items: center;\\n    gap: 0.75rem;\\n    padding: 0.75rem 1rem;\\n    border: 2px solid #e5e7eb;\\n    border-radius: 6px;\\n    cursor: pointer;\\n    transition: all 0.2s ease;\\n    background: white;\\n  }\\n\\n  .radio-option:hover {\\n    border-color: #ff3e00;\\n    background-color: #fef2f2;\\n  }\\n\\n  .radio-option:has(.radio-input:checked) {\\n    border-color: #ff3e00;\\n    background-color: #fef2f2;\\n  }\\n\\n  .radio-input {\\n    width: 20px;\\n    height: 20px;\\n    accent-color: #ff3e00;\\n    cursor: pointer;\\n  }\\n\\n  .radio-text {\\n    font-weight: 500;\\n    color: #333;\\n    cursor: pointer;\\n    flex-grow: 1;\\n  }\\n\\n  /* Mobile responsive */\\n  @media (max-width: 480px) {\\n    .radio-option {\\n      min-height: 44px; /* Touch target requirement */\\n      padding: 1rem 0.75rem;\\n    }\\n    \\n    .radio-input {\\n      min-width: 44px;\\n      min-height: 44px;\\n    }\\n  }\\n\\n  /* NEW: Read-only description field styling for Volunteer category */\\n  .description-display {\\n    display: flex;\\n    flex-direction: column;\\n    gap: 0.5rem;\\n  }\\n\\n  .form-label {\\n    font-weight: 500;\\n    color: #333;\\n  }\\n\\n  .read-only-field {\\n    padding: 0.5rem;\\n    margin-top: 0.25rem;\\n    font-size: 1rem;\\n    border: 1px solid #d1d5db;\\n    border-radius: 4px;\\n    width: 100%;\\n    box-sizing: border-box;\\n    background-color: #f8fafc;\\n    color: #6b7280;\\n    font-style: italic;\\n    cursor: not-allowed;\\n  }\\n</style>"],"names":[],"mappings":"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"}'
};
const Page = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let filteredPlacements;
  let needsPlacement;
  let showPlacementDropdown;
  let canSubmit;
  let $isLoadingProfile, $$unsubscribe_isLoadingProfile;
  let $isLoading, $$unsubscribe_isLoading;
  let $$unsubscribe_isLoaded;
  let $categories, $$unsubscribe_categories;
  let $$unsubscribe_clubEventTypes;
  let $$unsubscribe_floridaCircuitEvents;
  let $$unsubscribe_monthlyEvents;
  let $$unsubscribe_placementOptions;
  let $$unsubscribe_userProfile;
  $$unsubscribe_isLoadingProfile = subscribe(isLoadingProfile, (value) => $isLoadingProfile = value);
  $$unsubscribe_isLoading = subscribe(isLoading, (value) => $isLoading = value);
  $$unsubscribe_isLoaded = subscribe(isLoaded, (value) => value);
  $$unsubscribe_categories = subscribe(categories, (value) => $categories = value);
  $$unsubscribe_clubEventTypes = subscribe(clubEventTypes, (value) => value);
  $$unsubscribe_floridaCircuitEvents = subscribe(floridaCircuitEvents, (value) => value);
  $$unsubscribe_monthlyEvents = subscribe(monthlyEvents, (value) => value);
  $$unsubscribe_placementOptions = subscribe(placementOptions, (value) => value);
  $$unsubscribe_userProfile = subscribe(userProfile, (value) => value);
  let selectedCategory = "";
  let cleanupFunctions = [];
  onDestroy(() => {
    cleanupFunctions.forEach((cleanup) => cleanup());
  });
  $$result.css.add(css);
  filteredPlacements = [];
  needsPlacement = false;
  showPlacementDropdown = selectedCategory === "Florida Circuit";
  canSubmit = selectedCategory;
  $$unsubscribe_isLoadingProfile();
  $$unsubscribe_isLoading();
  $$unsubscribe_isLoaded();
  $$unsubscribe_categories();
  $$unsubscribe_clubEventTypes();
  $$unsubscribe_floridaCircuitEvents();
  $$unsubscribe_monthlyEvents();
  $$unsubscribe_placementOptions();
  $$unsubscribe_userProfile();
  return `<main class="svelte-o4lktw"><h2 class="svelte-o4lktw" data-svelte-h="svelte-ytdtkr">Submit Points</h2> ${$isLoading || $isLoadingProfile ? `<div class="loading svelte-o4lktw"><p data-svelte-h="svelte-slw5li">Loading data...</p> <small>${$isLoading ? `Loading categories...` : ``} ${$isLoadingProfile ? `Loading user profile...` : ``}</small> <button class="retry-btn svelte-o4lktw" data-svelte-h="svelte-154p24d">Force Refresh</button></div>` : `${$categories.length > 0 ? `<form class="svelte-o4lktw"><label class="svelte-o4lktw">Category *
        <select required class="svelte-o4lktw"><option value="" data-svelte-h="svelte-15swqsp">Select a category</option>${each($categories, (cat) => {
    return `<option${add_attribute("value", cat.name, 0)}>${escape(cat.name)}</option>`;
  })}</select></label> ${``} ${``}  ${``} ${``} ${``} ${``}  ${filteredPlacements.length > 0 && needsPlacement && selectedCategory !== "Monthly Challenge" && selectedCategory !== "Florida Circuit" && selectedCategory !== "Jax Club Event" || showPlacementDropdown ? `<label class="svelte-o4lktw">Placement *
          <select required class="svelte-o4lktw"><option value="" data-svelte-h="svelte-7kx7jf">Select placement</option>${each(filteredPlacements, (opt) => {
    return `<option${add_attribute("value", opt.value, 0)}>${escape(opt.label)}</option>`;
  })}</select></label>` : ``}  ${``} <button type="submit" ${!canSubmit ? "disabled" : ""} class="${["svelte-o4lktw", ""].join(" ").trim()}">${escape("Submit Points")}</button></form>` : `<div class="error svelte-o4lktw"><p data-svelte-h="svelte-10e5y0h">Failed to load categories. Please refresh the page.</p> <button class="svelte-o4lktw" data-svelte-h="svelte-1crwodf">Retry</button></div>`}`} </main>`;
});

export { Page as default };
//# sourceMappingURL=_page.svelte-DmVxWbFn.js.map

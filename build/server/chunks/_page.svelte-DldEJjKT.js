import { c as create_ssr_component, a as subscribe, o as onDestroy, d as escape, b as add_attribute, e as each } from './ssr-DUmth7AN.js';
import './client-C3KLrhj1.js';
import { p as page } from './stores-CjFwPvAb.js';
import { u as userProfile } from './userProfile-BJElsKeo.js';
import { c as competitionJudgingStore, a as activeSession, b as currentEntry, i as isJudging } from './competitionJudgingStore-WtJ-rvFn.js';
import './exports-DKuYoYKl.js';
import './index-D3y4l4qv.js';
import './false-CRHihH2U.js';
import './supabaseClient-D_8i9Ohq.js';
import '@supabase/supabase-js';

const css = {
  code: ".scoresheet-container.svelte-bgcrik{max-width:900px;margin:0 auto;padding:1rem;background:#f8fafc;min-height:100vh}.scoresheet.svelte-bgcrik{background:white;border:2px solid #000;padding:1.5rem;font-family:'Times New Roman', serif;box-shadow:0 4px 12px rgba(0, 0, 0, 0.1)}.scoresheet-header.svelte-bgcrik{text-align:center;border-bottom:2px solid #000;padding-bottom:1rem;margin-bottom:1.5rem}.scoresheet-title.svelte-bgcrik{font-size:2rem;font-weight:bold;margin:0}.scoresheet-subtitle.svelte-bgcrik{font-size:1rem;margin:0.5rem 0}.entry-info.svelte-bgcrik{display:grid;grid-template-columns:1fr 1fr;gap:1rem;margin-bottom:1.5rem;padding:1rem;border:1px solid #000}.info-group.svelte-bgcrik{display:flex;flex-direction:column}.info-label.svelte-bgcrik{font-weight:bold;margin-bottom:0.25rem;font-size:0.9rem}.info-value.svelte-bgcrik{font-size:1rem;padding:0.25rem;border-bottom:1px solid #333}.section.svelte-bgcrik{border:1px solid #000;margin-bottom:1rem}.section-header.svelte-bgcrik{background:#f0f0f0;padding:0.5rem 1rem;border-bottom:1px solid #000;font-weight:bold;display:flex;justify-content:space-between;align-items:center}.section-content.svelte-bgcrik{padding:1rem}.score-input.svelte-bgcrik{width:60px;padding:0.25rem;border:1px solid #000;text-align:center;font-weight:bold;font-size:1.1rem;box-sizing:border-box;margin:0;background-color:white;display:inline-block}.score-display.svelte-bgcrik{font-size:1.2rem;font-weight:bold;display:flex;align-items:center;gap:0.5rem}.comments-textarea.svelte-bgcrik{width:100%;min-height:80px;padding:0.5rem;border:1px solid #000;font-family:inherit;resize:vertical;font-size:0.9rem;box-sizing:border-box;margin:0;background-color:white;display:block}.descriptors-grid.svelte-bgcrik{display:grid;grid-template-columns:repeat(auto-fit, minmax(250px, 1fr));gap:0.5rem;margin-top:1rem}.descriptor-item.svelte-bgcrik{display:flex;align-items:flex-start;gap:0.5rem;padding:0.25rem;font-size:0.85rem}.descriptor-checkbox.svelte-bgcrik{margin-top:0.1rem}.descriptor-label.svelte-bgcrik{cursor:pointer;line-height:1.3}.descriptor-definition.svelte-bgcrik{font-style:italic;color:#666;margin-top:0.25rem}.assessment-sliders.svelte-bgcrik{display:grid;grid-template-columns:1fr;gap:1rem;margin-top:1rem}.slider-group.svelte-bgcrik{display:flex;flex-direction:column;gap:0.5rem}.slider-labels.svelte-bgcrik{display:flex;justify-content:space-between;font-size:0.8rem;font-weight:bold}.slider.svelte-bgcrik{width:100%;height:6px;border-radius:3px;background:#ddd;outline:none;-webkit-appearance:none}.slider.svelte-bgcrik::-webkit-slider-thumb{appearance:none;width:20px;height:20px;border-radius:50%;background:#ff3e00;cursor:pointer}.total-score.svelte-bgcrik{background:linear-gradient(135deg, #ff3e00 0%, #e63600 100%);color:white;padding:1.5rem;text-align:center;margin:1.5rem 0;border-radius:8px}.total-score-value.svelte-bgcrik{font-size:3rem;font-weight:bold;margin:0}.total-score-description.svelte-bgcrik{font-size:1.1rem;margin:0.5rem 0 0;opacity:0.95}.navigation.svelte-bgcrik{display:flex;gap:1rem;justify-content:space-between;margin-top:2rem}.nav-btn.svelte-bgcrik{padding:1rem 2rem;border:none;border-radius:6px;cursor:pointer;font-weight:500;transition:all 0.3s ease}.nav-btn-secondary.svelte-bgcrik{background:#6b7280;color:white}.nav-btn-primary.svelte-bgcrik{background:#059669;color:white}.nav-btn.svelte-bgcrik:hover{transform:translateY(-1px);box-shadow:0 4px 12px rgba(0, 0, 0, 0.15)}.progress-indicator.svelte-bgcrik{background:white;padding:1rem;margin-bottom:1rem;border-radius:8px;box-shadow:0 2px 8px rgba(0, 0, 0, 0.1);text-align:center}.progress-bar.svelte-bgcrik{background:#e5e7eb;height:8px;border-radius:4px;overflow:hidden;margin:1rem 0}.progress-fill.svelte-bgcrik{background:linear-gradient(90deg, #ff3e00, #059669);height:100%;border-radius:4px;transition:width 0.3s ease}@media(max-width: 768px){.scoresheet-container.svelte-bgcrik{padding:0.5rem}.scoresheet.svelte-bgcrik{padding:1rem}.entry-info.svelte-bgcrik{grid-template-columns:1fr}.descriptors-grid.svelte-bgcrik{grid-template-columns:1fr}.navigation.svelte-bgcrik{flex-direction:column}.nav-btn.svelte-bgcrik{width:100%}}",
  map: `{"version":3,"file":"+page.svelte","sources":["+page.svelte"],"sourcesContent":["<!-- Interactive BJCP Score Sheet -->\\r\\n<script>\\r\\n  import { onMount, onDestroy } from 'svelte';\\r\\n  import { goto } from '$app/navigation';\\r\\n  import { page } from '$app/stores';\\r\\n  import { userProfile } from '$lib/stores/userProfile';\\r\\n  import { \\r\\n    competitionJudgingStore, \\r\\n    activeSession,\\r\\n    isJudging,\\r\\n    currentEntry\\r\\n  } from '$lib/stores/competitionJudgingStore';\\r\\n\\r\\n  // Get competition ID from URL\\r\\n  $: competitionId = $page.params.id;\\r\\n\\r\\n  let currentEntryIndex = 0;\\r\\n  let autoSaveTimeout = null;\\r\\n  let currentEntryId = null; // Track current entry to prevent unnecessary reloading\\r\\n\\r\\n  // BJCP Score Sheet Data Structure\\r\\n  let scoresheetData = {\\r\\n    // Scoring fields\\r\\n    aroma_score: '',\\r\\n    appearance_score: '',\\r\\n    flavor_score: '',\\r\\n    mouthfeel_score: '',\\r\\n    overall_score: '',\\r\\n    \\r\\n    // Detailed comments for each section\\r\\n    aroma_comments: '',\\r\\n    appearance_comments: '',\\r\\n    flavor_comments: '',\\r\\n    mouthfeel_comments: '',\\r\\n    overall_comments: '',\\r\\n    \\r\\n    // Bottle inspection\\r\\n    bottle_inspection_appropriate: true,\\r\\n    bottle_inspection_comments: '',\\r\\n    \\r\\n    // Descriptor checkboxes (off-flavors and aromas)\\r\\n    descriptors: {\\r\\n      acetaldehyde: false,\\r\\n      alcoholic: false,\\r\\n      astringent: false,\\r\\n      diacetyl: false,\\r\\n      dms: false,\\r\\n      estery: false,\\r\\n      grassy: false,\\r\\n      light_struck: false,\\r\\n      metallic: false,\\r\\n      musty: false,\\r\\n      oxidized: false,\\r\\n      phenolic: false,\\r\\n      solvent: false,\\r\\n      sour_acidic: false,\\r\\n      sulfur: false,\\r\\n      vegetal: false,\\r\\n      yeasty: false\\r\\n    },\\r\\n    \\r\\n    // Overall assessment sliders\\r\\n    stylistic_accuracy: 50, // 0-100 scale (Classic Example to Not to Style)\\r\\n    technical_merit: 50,    // 0-100 scale (Flawless to Significant Flaws)\\r\\n    intangibles: 50,        // 0-100 scale (Wonderful to Lifeless)\\r\\n    \\r\\n    // Judge notes (private)\\r\\n    private_notes: ''\\r\\n  };\\r\\n\\r\\n  let isSaving = false;\\r\\n\\r\\n  // Score maximums for validation\\r\\n  const scoreMaximums = {\\r\\n    aroma_score: 12,\\r\\n    appearance_score: 3, \\r\\n    flavor_score: 20,\\r\\n    mouthfeel_score: 5,\\r\\n    overall_score: 10\\r\\n  };\\r\\n\\r\\n  // Descriptor definitions for tooltips\\r\\n  const descriptorDefinitions = {\\r\\n    acetaldehyde: \\"Green apple-like aroma and flavor.\\",\\r\\n    alcoholic: \\"The aroma, flavor, and warming effect of ethanol and higher alcohols. Sometimes described as 'hot.'\\",\\r\\n    astringent: \\"Puckering, lingering harshness and/or dryness in the finish/aftertaste; harsh graininess; huskiness.\\",\\r\\n    diacetyl: \\"Artificial butter, butterscotch, or toffee aroma and flavor. Sometimes perceived as a slickness on the tongue.\\",\\r\\n    dms: \\"At low levels a sweet, cooked or canned corn-like aroma and flavor.\\",\\r\\n    estery: \\"Aroma and/or flavor of any ester (fruits, fruit flavorings, or roses).\\",\\r\\n    grassy: \\"Aroma/flavor of fresh-cut grass or green leaves.\\",\\r\\n    light_struck: \\"Similar to the aroma of a skunk.\\",\\r\\n    metallic: \\"Tinny, coiny, copper, iron, or blood-like flavor.\\",\\r\\n    musty: \\"Stale, musty, or moldy aromas/flavors.\\",\\r\\n    oxidized: \\"Any one or combination of winy/vinous, cardboard, papery, or sherry-like aromas and flavors.\\",\\r\\n    phenolic: \\"Spicy (clove, pepper), smoky, plastic, plastic adhesive strip, and/or medicinal (chlorophenolic).\\",\\r\\n    solvent: \\"Aromas and flavors of higher alcohols (fusel alcohols). Similar to acetone or lacquer thinner aromas.\\",\\r\\n    sour_acidic: \\"Tartness in aroma and flavor. Can be sharp and clean (lactic acid), or vinegar-like (acetic acid).\\",\\r\\n    sulfur: \\"The aroma of rotten eggs or burning matches.\\",\\r\\n    vegetal: \\"Cooked, canned, or rotten vegetable aroma and flavor (cabbage, onion, celery, asparagus, etc.)\\",\\r\\n    yeasty: \\"A bready, sulfury or yeast-like aroma or flavor.\\"\\r\\n  };\\r\\n\\r\\n  onMount(async () => {\\r\\n    if (!$userProfile) {\\r\\n      goto('/auth');\\r\\n      return;\\r\\n    }\\r\\n\\r\\n    try {\\r\\n      if (!$isJudging || $activeSession.activeCompetition?.id !== competitionId) {\\r\\n        await competitionJudgingStore.startJudgingSession(competitionId, $userProfile.id);\\r\\n      }\\r\\n      \\r\\n      loadCurrentEntryData();\\r\\n    } catch (err) {\\r\\n      console.error('Error starting judging session:', err);\\r\\n      alert(\`Failed to start judging: \${err.message}\`);\\r\\n      goto('/judge');\\r\\n    }\\r\\n  });\\r\\n\\r\\n  onDestroy(() => {\\r\\n    if (autoSaveTimeout) {\\r\\n      clearTimeout(autoSaveTimeout);\\r\\n    }\\r\\n  });\\r\\n\\r\\n  // Reactive statements - reference individual fields to ensure reactivity\\r\\n  $: totalScore = (parseInt(scoresheetData.aroma_score) || 0) + \\r\\n                 (parseInt(scoresheetData.appearance_score) || 0) + \\r\\n                 (parseInt(scoresheetData.flavor_score) || 0) + \\r\\n                 (parseInt(scoresheetData.mouthfeel_score) || 0) + \\r\\n                 (parseInt(scoresheetData.overall_score) || 0);\\r\\n  $: progress = competitionJudgingStore.getJudgingProgress();\\r\\n  $: if ($currentEntry && currentEntryId !== $currentEntry.id) loadCurrentEntryData();\\r\\n  \\r\\n  function loadCurrentEntryData() {\\r\\n    if (!$currentEntry) return;\\r\\n    \\r\\n    currentEntryId = $currentEntry.id;\\r\\n    \\r\\n    console.log('Loading data for entry:', $currentEntry.id);\\r\\n    \\r\\n    // Reset scoresheet data to defaults\\r\\n    scoresheetData = {\\r\\n      aroma_score: '',\\r\\n      appearance_score: '',\\r\\n      flavor_score: '',\\r\\n      mouthfeel_score: '',\\r\\n      overall_score: '',\\r\\n      aroma_comments: '',\\r\\n      appearance_comments: '',\\r\\n      flavor_comments: '',\\r\\n      mouthfeel_comments: '',\\r\\n      overall_comments: '',\\r\\n      bottle_inspection_appropriate: true,\\r\\n      bottle_inspection_comments: '',\\r\\n      descriptors: {\\r\\n        acetaldehyde: false,\\r\\n        alcoholic: false,\\r\\n        astringent: false,\\r\\n        diacetyl: false,\\r\\n        dms: false,\\r\\n        estery: false,\\r\\n        grassy: false,\\r\\n        light_struck: false,\\r\\n        metallic: false,\\r\\n        musty: false,\\r\\n        oxidized: false,\\r\\n        phenolic: false,\\r\\n        solvent: false,\\r\\n        sour_acidic: false,\\r\\n        sulfur: false,\\r\\n        vegetal: false,\\r\\n        yeasty: false\\r\\n      },\\r\\n      stylistic_accuracy: 50,\\r\\n      technical_merit: 50,\\r\\n      intangibles: 50,\\r\\n      private_notes: ''\\r\\n    };\\r\\n    \\r\\n    // Load existing judging data if available\\r\\n    const existingJudging = $currentEntry.judging;\\r\\n    if (existingJudging) {\\r\\n      // Load basic scores\\r\\n      if (existingJudging.aroma_score) scoresheetData.aroma_score = existingJudging.aroma_score;\\r\\n      if (existingJudging.appearance_score) scoresheetData.appearance_score = existingJudging.appearance_score;\\r\\n      if (existingJudging.flavor_score) scoresheetData.flavor_score = existingJudging.flavor_score;\\r\\n      if (existingJudging.mouthfeel_score) scoresheetData.mouthfeel_score = existingJudging.mouthfeel_score;\\r\\n      if (existingJudging.overall_score) scoresheetData.overall_score = existingJudging.overall_score;\\r\\n      \\r\\n      // Load detailed scoresheet data if available\\r\\n      if (existingJudging.scoresheet_data) {\\r\\n        try {\\r\\n          const savedData = JSON.parse(existingJudging.scoresheet_data);\\r\\n          scoresheetData = { ...scoresheetData, ...savedData };\\r\\n        } catch (e) {\\r\\n          console.warn('Could not parse existing scoresheet data:', e);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function calculateTotalScore() {\\r\\n    return ['aroma_score', 'appearance_score', 'flavor_score', 'mouthfeel_score', 'overall_score']\\r\\n      .reduce((sum, field) => {\\r\\n        const score = parseInt(scoresheetData[field]) || 0;\\r\\n        return sum + score;\\r\\n      }, 0);\\r\\n  }\\r\\n\\r\\n  function getScoreDescription(score) {\\r\\n    if (score >= 45) return 'Outstanding - World-class example of style';\\r\\n    if (score >= 38) return 'Excellent - Exemplifies style well, requires minor fine-tuning';\\r\\n    if (score >= 30) return 'Very Good - Generally within style parameters, some minor flaws';\\r\\n    if (score >= 21) return 'Good - Misses the mark on style and/or minor flaws';\\r\\n    if (score >= 14) return 'Fair - Off flavors, aromas or major style deficiencies';\\r\\n    return 'Problematic - Major off flavors and aromas dominate';\\r\\n  }\\r\\n\\r\\n  function getScoreColor(score) {\\r\\n    if (score >= 45) return '#059669'; // Outstanding\\r\\n    if (score >= 38) return '#0891b2'; // Excellent  \\r\\n    if (score >= 30) return '#eab308'; // Very Good\\r\\n    if (score >= 21) return '#f59e0b'; // Good\\r\\n    if (score >= 14) return '#f97316'; // Fair\\r\\n    return '#dc2626'; // Problematic\\r\\n  }\\r\\n\\r\\n  function handleScoreInput(field, value) {\\r\\n    const numValue = parseInt(value);\\r\\n    const max = scoreMaximums[field];\\r\\n    \\r\\n    if (value === '' || (numValue >= 0 && numValue <= max)) {\\r\\n      scoresheetData[field] = value;\\r\\n      scheduleAutoSave();\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function handleInputChange() {\\r\\n    scheduleAutoSave();\\r\\n  }\\r\\n\\r\\n  function handleDescriptorChange(descriptor) {\\r\\n    scoresheetData = {\\r\\n      ...scoresheetData,\\r\\n      descriptors: {\\r\\n        ...scoresheetData.descriptors,\\r\\n        [descriptor]: !scoresheetData.descriptors[descriptor]\\r\\n      }\\r\\n    };\\r\\n    scheduleAutoSave();\\r\\n  }\\r\\n\\r\\n  function scheduleAutoSave() {\\r\\n    if (autoSaveTimeout) {\\r\\n      clearTimeout(autoSaveTimeout);\\r\\n    }\\r\\n    \\r\\n    autoSaveTimeout = setTimeout(() => {\\r\\n      saveProgress();\\r\\n    }, 2000);\\r\\n  }\\r\\n\\r\\n  async function saveProgress() {\\r\\n    if (!$currentEntry || isSaving || !$activeSession.sessionActive) return;\\r\\n\\r\\n    // Don't save if no actual data has been entered\\r\\n    const hasData = scoresheetData.aroma_score || scoresheetData.appearance_score || \\r\\n                   scoresheetData.flavor_score || scoresheetData.mouthfeel_score || \\r\\n                   scoresheetData.overall_score || scoresheetData.aroma_comments ||\\r\\n                   scoresheetData.appearance_comments || scoresheetData.flavor_comments ||\\r\\n                   scoresheetData.mouthfeel_comments || scoresheetData.overall_comments;\\r\\n    \\r\\n    if (!hasData) return;\\r\\n\\r\\n    isSaving = true;\\r\\n    console.log('Saving progress for entry:', $currentEntry.id);\\r\\n\\r\\n    try {\\r\\n      const dataToSave = {\\r\\n        aroma_score: scoresheetData.aroma_score ? parseInt(scoresheetData.aroma_score) : null,\\r\\n        appearance_score: scoresheetData.appearance_score ? parseInt(scoresheetData.appearance_score) : null,\\r\\n        flavor_score: scoresheetData.flavor_score ? parseInt(scoresheetData.flavor_score) : null,\\r\\n        mouthfeel_score: scoresheetData.mouthfeel_score ? parseInt(scoresheetData.mouthfeel_score) : null,\\r\\n        overall_score: scoresheetData.overall_score ? parseInt(scoresheetData.overall_score) : null,\\r\\n        // total_score is auto-calculated by database\\r\\n        \\r\\n        // Combine all comments into judge_notes for compatibility\\r\\n        judge_notes: [\\r\\n          scoresheetData.aroma_comments && \`AROMA: \${scoresheetData.aroma_comments}\`,\\r\\n          scoresheetData.appearance_comments && \`APPEARANCE: \${scoresheetData.appearance_comments}\`,\\r\\n          scoresheetData.flavor_comments && \`FLAVOR: \${scoresheetData.flavor_comments}\`,\\r\\n          scoresheetData.mouthfeel_comments && \`MOUTHFEEL: \${scoresheetData.mouthfeel_comments}\`,\\r\\n          scoresheetData.overall_comments && \`OVERALL: \${scoresheetData.overall_comments}\`\\r\\n        ].filter(Boolean).join('\\\\n\\\\n') || null,\\r\\n        \\r\\n        private_notes: scoresheetData.private_notes || null,\\r\\n        \\r\\n        // Store complete scoresheet data as JSON for future loading\\r\\n        scoresheet_data: JSON.stringify(scoresheetData)\\r\\n      };\\r\\n\\r\\n      await competitionJudgingStore.saveJudgingResults($currentEntry.id, dataToSave);\\r\\n      console.log('Save successful');\\r\\n      showToast('Progress saved', 'success');\\r\\n    } catch (err) {\\r\\n      console.error('Error auto-saving:', err);\\r\\n      showToast(\`Failed to save: \${err.message}\`, 'error');\\r\\n    } finally {\\r\\n      isSaving = false;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function navigateToNext() {\\r\\n    const entries = $activeSession.assignedEntries;\\r\\n    const nextIndex = currentEntryIndex + 1;\\r\\n    \\r\\n    if (nextIndex < entries.length) {\\r\\n      currentEntryIndex = nextIndex;\\r\\n      competitionJudgingStore.setCurrentEntry(nextIndex);\\r\\n      // loadCurrentEntryData will be called by reactive statement\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function navigateToPrevious() {\\r\\n    if (currentEntryIndex > 0) {\\r\\n      currentEntryIndex = currentEntryIndex - 1;\\r\\n      competitionJudgingStore.setCurrentEntry(currentEntryIndex);\\r\\n      // loadCurrentEntryData will be called by reactive statement\\r\\n    }\\r\\n  }\\r\\n\\r\\n  async function finishJudging() {\\r\\n    await saveProgress();\\r\\n    goto('/judge');\\r\\n  }\\r\\n\\r\\n  function showToast(message, type = 'info') {\\r\\n    const toast = document.createElement('div');\\r\\n    toast.textContent = message;\\r\\n    toast.style.cssText = \`\\r\\n      position: fixed;\\r\\n      top: 20px;\\r\\n      right: 20px;\\r\\n      padding: 1rem 1.5rem;\\r\\n      border-radius: 6px;\\r\\n      color: white;\\r\\n      font-weight: 500;\\r\\n      z-index: 1000;\\r\\n      background: \${type === 'success' ? '#059669' : type === 'error' ? '#dc2626' : '#6b7280'};\\r\\n      box-shadow: 0 4px 12px rgba(0,0,0,0.15);\\r\\n    \`;\\r\\n\\r\\n    document.body.appendChild(toast);\\r\\n    setTimeout(() => document.body.removeChild(toast), 3000);\\r\\n  }\\r\\n<\/script>\\r\\n\\r\\n<style>\\r\\n  .scoresheet-container {\\r\\n    max-width: 900px;\\r\\n    margin: 0 auto;\\r\\n    padding: 1rem;\\r\\n    background: #f8fafc;\\r\\n    min-height: 100vh;\\r\\n  }\\r\\n\\r\\n  .scoresheet {\\r\\n    background: white;\\r\\n    border: 2px solid #000;\\r\\n    padding: 1.5rem;\\r\\n    font-family: 'Times New Roman', serif;\\r\\n    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\\r\\n  }\\r\\n\\r\\n  .scoresheet-header {\\r\\n    text-align: center;\\r\\n    border-bottom: 2px solid #000;\\r\\n    padding-bottom: 1rem;\\r\\n    margin-bottom: 1.5rem;\\r\\n  }\\r\\n\\r\\n  .scoresheet-title {\\r\\n    font-size: 2rem;\\r\\n    font-weight: bold;\\r\\n    margin: 0;\\r\\n  }\\r\\n\\r\\n  .scoresheet-subtitle {\\r\\n    font-size: 1rem;\\r\\n    margin: 0.5rem 0;\\r\\n  }\\r\\n\\r\\n  .entry-info {\\r\\n    display: grid;\\r\\n    grid-template-columns: 1fr 1fr;\\r\\n    gap: 1rem;\\r\\n    margin-bottom: 1.5rem;\\r\\n    padding: 1rem;\\r\\n    border: 1px solid #000;\\r\\n  }\\r\\n\\r\\n  .info-group {\\r\\n    display: flex;\\r\\n    flex-direction: column;\\r\\n  }\\r\\n\\r\\n  .info-label {\\r\\n    font-weight: bold;\\r\\n    margin-bottom: 0.25rem;\\r\\n    font-size: 0.9rem;\\r\\n  }\\r\\n\\r\\n  .info-value {\\r\\n    font-size: 1rem;\\r\\n    padding: 0.25rem;\\r\\n    border-bottom: 1px solid #333;\\r\\n  }\\r\\n\\r\\n  .section {\\r\\n    border: 1px solid #000;\\r\\n    margin-bottom: 1rem;\\r\\n  }\\r\\n\\r\\n  .section-header {\\r\\n    background: #f0f0f0;\\r\\n    padding: 0.5rem 1rem;\\r\\n    border-bottom: 1px solid #000;\\r\\n    font-weight: bold;\\r\\n    display: flex;\\r\\n    justify-content: space-between;\\r\\n    align-items: center;\\r\\n  }\\r\\n\\r\\n  .section-content {\\r\\n    padding: 1rem;\\r\\n  }\\r\\n\\r\\n  .score-input {\\r\\n    width: 60px;\\r\\n    padding: 0.25rem;\\r\\n    border: 1px solid #000;\\r\\n    text-align: center;\\r\\n    font-weight: bold;\\r\\n    font-size: 1.1rem;\\r\\n    box-sizing: border-box;\\r\\n    margin: 0;\\r\\n    background-color: white;\\r\\n    display: inline-block;\\r\\n  }\\r\\n\\r\\n  .score-display {\\r\\n    font-size: 1.2rem;\\r\\n    font-weight: bold;\\r\\n    display: flex;\\r\\n    align-items: center;\\r\\n    gap: 0.5rem;\\r\\n  }\\r\\n\\r\\n  .comments-textarea {\\r\\n    width: 100%;\\r\\n    min-height: 80px;\\r\\n    padding: 0.5rem;\\r\\n    border: 1px solid #000;\\r\\n    font-family: inherit;\\r\\n    resize: vertical;\\r\\n    font-size: 0.9rem;\\r\\n    box-sizing: border-box;\\r\\n    margin: 0;\\r\\n    background-color: white;\\r\\n    display: block;\\r\\n  }\\r\\n\\r\\n  .descriptors-grid {\\r\\n    display: grid;\\r\\n    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\\r\\n    gap: 0.5rem;\\r\\n    margin-top: 1rem;\\r\\n  }\\r\\n\\r\\n  .descriptor-item {\\r\\n    display: flex;\\r\\n    align-items: flex-start;\\r\\n    gap: 0.5rem;\\r\\n    padding: 0.25rem;\\r\\n    font-size: 0.85rem;\\r\\n  }\\r\\n\\r\\n  .descriptor-checkbox {\\r\\n    margin-top: 0.1rem;\\r\\n  }\\r\\n\\r\\n  .descriptor-label {\\r\\n    cursor: pointer;\\r\\n    line-height: 1.3;\\r\\n  }\\r\\n\\r\\n  .descriptor-definition {\\r\\n    font-style: italic;\\r\\n    color: #666;\\r\\n    margin-top: 0.25rem;\\r\\n  }\\r\\n\\r\\n  .assessment-sliders {\\r\\n    display: grid;\\r\\n    grid-template-columns: 1fr;\\r\\n    gap: 1rem;\\r\\n    margin-top: 1rem;\\r\\n  }\\r\\n\\r\\n  .slider-group {\\r\\n    display: flex;\\r\\n    flex-direction: column;\\r\\n    gap: 0.5rem;\\r\\n  }\\r\\n\\r\\n  .slider-labels {\\r\\n    display: flex;\\r\\n    justify-content: space-between;\\r\\n    font-size: 0.8rem;\\r\\n    font-weight: bold;\\r\\n  }\\r\\n\\r\\n  .slider {\\r\\n    width: 100%;\\r\\n    height: 6px;\\r\\n    border-radius: 3px;\\r\\n    background: #ddd;\\r\\n    outline: none;\\r\\n    -webkit-appearance: none;\\r\\n  }\\r\\n\\r\\n  .slider::-webkit-slider-thumb {\\r\\n    appearance: none;\\r\\n    width: 20px;\\r\\n    height: 20px;\\r\\n    border-radius: 50%;\\r\\n    background: #ff3e00;\\r\\n    cursor: pointer;\\r\\n  }\\r\\n\\r\\n  .total-score {\\r\\n    background: linear-gradient(135deg, #ff3e00 0%, #e63600 100%);\\r\\n    color: white;\\r\\n    padding: 1.5rem;\\r\\n    text-align: center;\\r\\n    margin: 1.5rem 0;\\r\\n    border-radius: 8px;\\r\\n  }\\r\\n\\r\\n  .total-score-value {\\r\\n    font-size: 3rem;\\r\\n    font-weight: bold;\\r\\n    margin: 0;\\r\\n  }\\r\\n\\r\\n  .total-score-description {\\r\\n    font-size: 1.1rem;\\r\\n    margin: 0.5rem 0 0;\\r\\n    opacity: 0.95;\\r\\n  }\\r\\n\\r\\n  .navigation {\\r\\n    display: flex;\\r\\n    gap: 1rem;\\r\\n    justify-content: space-between;\\r\\n    margin-top: 2rem;\\r\\n  }\\r\\n\\r\\n  .nav-btn {\\r\\n    padding: 1rem 2rem;\\r\\n    border: none;\\r\\n    border-radius: 6px;\\r\\n    cursor: pointer;\\r\\n    font-weight: 500;\\r\\n    transition: all 0.3s ease;\\r\\n  }\\r\\n\\r\\n  .nav-btn-secondary {\\r\\n    background: #6b7280;\\r\\n    color: white;\\r\\n  }\\r\\n\\r\\n  .nav-btn-primary {\\r\\n    background: #059669;\\r\\n    color: white;\\r\\n  }\\r\\n\\r\\n  .nav-btn:hover {\\r\\n    transform: translateY(-1px);\\r\\n    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\\r\\n  }\\r\\n\\r\\n  .progress-indicator {\\r\\n    background: white;\\r\\n    padding: 1rem;\\r\\n    margin-bottom: 1rem;\\r\\n    border-radius: 8px;\\r\\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\\r\\n    text-align: center;\\r\\n  }\\r\\n\\r\\n  .progress-bar {\\r\\n    background: #e5e7eb;\\r\\n    height: 8px;\\r\\n    border-radius: 4px;\\r\\n    overflow: hidden;\\r\\n    margin: 1rem 0;\\r\\n  }\\r\\n\\r\\n  .progress-fill {\\r\\n    background: linear-gradient(90deg, #ff3e00, #059669);\\r\\n    height: 100%;\\r\\n    border-radius: 4px;\\r\\n    transition: width 0.3s ease;\\r\\n  }\\r\\n\\r\\n  /* Mobile responsiveness */\\r\\n  @media (max-width: 768px) {\\r\\n    .scoresheet-container {\\r\\n      padding: 0.5rem;\\r\\n    }\\r\\n\\r\\n    .scoresheet {\\r\\n      padding: 1rem;\\r\\n    }\\r\\n\\r\\n    .entry-info {\\r\\n      grid-template-columns: 1fr;\\r\\n    }\\r\\n\\r\\n    .descriptors-grid {\\r\\n      grid-template-columns: 1fr;\\r\\n    }\\r\\n\\r\\n    .navigation {\\r\\n      flex-direction: column;\\r\\n    }\\r\\n\\r\\n    .nav-btn {\\r\\n      width: 100%;\\r\\n    }\\r\\n  }\\r\\n</style>\\r\\n\\r\\n<div class=\\"scoresheet-container\\">\\r\\n  {#if !$isJudging || !$currentEntry}\\r\\n    <div style=\\"text-align: center; padding: 3rem;\\">\\r\\n      <h2>Loading scoresheet...</h2>\\r\\n    </div>\\r\\n  {:else}\\r\\n    <!-- Progress Indicator -->\\r\\n    <div class=\\"progress-indicator\\">\\r\\n      <h3>Competition: {$activeSession.activeCompetition?.name}</h3>\\r\\n      <div class=\\"progress-bar\\">\\r\\n        <div class=\\"progress-fill\\" style=\\"width: {progress.percentage}%\\"></div>\\r\\n      </div>\\r\\n      <p>Entry {currentEntryIndex + 1} of {$activeSession.assignedEntries.length} • {progress.completed} completed ({progress.percentage}%)</p>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\"scoresheet\\">\\r\\n      <!-- Header -->\\r\\n      <div class=\\"scoresheet-header\\">\\r\\n        <h1 class=\\"scoresheet-title\\">BEER SCORESHEET</h1>\\r\\n        <p class=\\"scoresheet-subtitle\\">AHA/BJCP Sanctioned Competition Program</p>\\r\\n      </div>\\r\\n\\r\\n      <!-- Entry Information -->\\r\\n      <div class=\\"entry-info\\">\\r\\n        <div class=\\"info-group\\">\\r\\n          <span class=\\"info-label\\">Entry #</span>\\r\\n          <span class=\\"info-value\\">{$currentEntry.entry_number}</span>\\r\\n        </div>\\r\\n        <div class=\\"info-group\\">\\r\\n          <span class=\\"info-label\\">Category</span>\\r\\n          <span class=\\"info-value\\">\\r\\n            {$currentEntry.category?.category_number || ''}{$currentEntry.category?.subcategory_letter || ''} - {$currentEntry.category?.category_name || 'Unknown'}\\r\\n          </span>\\r\\n        </div>\\r\\n        <div class=\\"info-group\\">\\r\\n          <span class=\\"info-label\\">Beer Name</span>\\r\\n          <span class=\\"info-value\\">{$currentEntry.beer_name || 'No name provided'}</span>\\r\\n        </div>\\r\\n        <div class=\\"info-group\\">\\r\\n          <span class=\\"info-label\\">Subcategory</span>\\r\\n          <span class=\\"info-value\\">{$currentEntry.category?.subcategory_name || 'N/A'}</span>\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n      <!-- Total Score Display -->\\r\\n      <div class=\\"total-score\\" style=\\"background: linear-gradient(135deg, {getScoreColor(totalScore)}, {getScoreColor(totalScore)}dd)\\">\\r\\n        <h2 class=\\"total-score-value\\">{totalScore}/50</h2>\\r\\n        <p class=\\"total-score-description\\">{getScoreDescription(totalScore)}</p>\\r\\n      </div>\\r\\n\\r\\n      <!-- Aroma Section -->\\r\\n      <div class=\\"section\\">\\r\\n        <div class=\\"section-header\\">\\r\\n          <span>Aroma (as appropriate for style)</span>\\r\\n          <div class=\\"score-display\\">\\r\\n            <input\\r\\n              type=\\"number\\"\\r\\n              class=\\"score-input\\"\\r\\n              min=\\"0\\"\\r\\n              max=\\"12\\"\\r\\n              bind:value={scoresheetData.aroma_score}\\r\\n              on:input={(e) => handleScoreInput('aroma_score', e.target.value)}\\r\\n            /> / 12\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\"section-content\\">\\r\\n          <p style=\\"font-size: 0.9rem; margin-bottom: 0.5rem; font-style: italic;\\">\\r\\n            Comment on malt, hops, esters, and other aromatics\\r\\n          </p>\\r\\n          <textarea\\r\\n            class=\\"comments-textarea\\"\\r\\n            bind:value={scoresheetData.aroma_comments}\\r\\n            on:input={handleInputChange}\\r\\n            placeholder=\\"Describe the aroma characteristics...\\"\\r\\n          ></textarea>\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n      <!-- Appearance Section -->\\r\\n      <div class=\\"section\\">\\r\\n        <div class=\\"section-header\\">\\r\\n          <span>Appearance (as appropriate for style)</span>\\r\\n          <div class=\\"score-display\\">\\r\\n            <input\\r\\n              type=\\"number\\"\\r\\n              class=\\"score-input\\"\\r\\n              min=\\"0\\"\\r\\n              max=\\"3\\"\\r\\n              bind:value={scoresheetData.appearance_score}\\r\\n              on:input={(e) => handleScoreInput('appearance_score', e.target.value)}\\r\\n            /> / 3\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\"section-content\\">\\r\\n          <p style=\\"font-size: 0.9rem; margin-bottom: 0.5rem; font-style: italic;\\">\\r\\n            Comment on color, clarity, and head (retention, color, and texture)\\r\\n          </p>\\r\\n          <textarea\\r\\n            class=\\"comments-textarea\\"\\r\\n            bind:value={scoresheetData.appearance_comments}\\r\\n            on:input={handleInputChange}\\r\\n            placeholder=\\"Describe the visual characteristics...\\"\\r\\n          ></textarea>\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n      <!-- Flavor Section -->\\r\\n      <div class=\\"section\\">\\r\\n        <div class=\\"section-header\\">\\r\\n          <span>Flavor (as appropriate for style)</span>\\r\\n          <div class=\\"score-display\\">\\r\\n            <input\\r\\n              type=\\"number\\"\\r\\n              class=\\"score-input\\"\\r\\n              min=\\"0\\"\\r\\n              max=\\"20\\"\\r\\n              bind:value={scoresheetData.flavor_score}\\r\\n              on:input={(e) => handleScoreInput('flavor_score', e.target.value)}\\r\\n            /> / 20\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\"section-content\\">\\r\\n          <p style=\\"font-size: 0.9rem; margin-bottom: 0.5rem; font-style: italic;\\">\\r\\n            Comment on malt, hops, fermentation characteristics, balance, finish/aftertaste, and other flavor characteristics\\r\\n          </p>\\r\\n          <textarea\\r\\n            class=\\"comments-textarea\\"\\r\\n            style=\\"min-height: 100px;\\"\\r\\n            bind:value={scoresheetData.flavor_comments}\\r\\n            on:input={handleInputChange}\\r\\n            placeholder=\\"Describe the flavor profile, balance, and finish...\\"\\r\\n          ></textarea>\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n      <!-- Mouthfeel Section -->\\r\\n      <div class=\\"section\\">\\r\\n        <div class=\\"section-header\\">\\r\\n          <span>Mouthfeel (as appropriate for style)</span>\\r\\n          <div class=\\"score-display\\">\\r\\n            <input\\r\\n              type=\\"number\\"\\r\\n              class=\\"score-input\\"\\r\\n              min=\\"0\\"\\r\\n              max=\\"5\\"\\r\\n              bind:value={scoresheetData.mouthfeel_score}\\r\\n              on:input={(e) => handleScoreInput('mouthfeel_score', e.target.value)}\\r\\n            /> / 5\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\"section-content\\">\\r\\n          <p style=\\"font-size: 0.9rem; margin-bottom: 0.5rem; font-style: italic;\\">\\r\\n            Comment on body, carbonation, warmth, creaminess, astringency, and other palate sensations\\r\\n          </p>\\r\\n          <textarea\\r\\n            class=\\"comments-textarea\\"\\r\\n            bind:value={scoresheetData.mouthfeel_comments}\\r\\n            on:input={handleInputChange}\\r\\n            placeholder=\\"Describe the body, carbonation, and texture...\\"\\r\\n          ></textarea>\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n      <!-- Overall Impression Section -->\\r\\n      <div class=\\"section\\">\\r\\n        <div class=\\"section-header\\">\\r\\n          <span>Overall Impression</span>\\r\\n          <div class=\\"score-display\\">\\r\\n            <input\\r\\n              type=\\"number\\"\\r\\n              class=\\"score-input\\"\\r\\n              min=\\"0\\"\\r\\n              max=\\"10\\"\\r\\n              bind:value={scoresheetData.overall_score}\\r\\n              on:input={(e) => handleScoreInput('overall_score', e.target.value)}\\r\\n            /> / 10\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\"section-content\\">\\r\\n          <p style=\\"font-size: 0.9rem; margin-bottom: 0.5rem; font-style: italic;\\">\\r\\n            Comment on overall drinking pleasure associated with entry, give suggestions for improvement\\r\\n          </p>\\r\\n          <textarea\\r\\n            class=\\"comments-textarea\\"\\r\\n            style=\\"min-height: 120px;\\"\\r\\n            bind:value={scoresheetData.overall_comments}\\r\\n            on:input={handleInputChange}\\r\\n            placeholder=\\"Overall assessment and suggestions for improvement...\\"\\r\\n          ></textarea>\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n      <!-- Descriptor Definitions -->\\r\\n      <div class=\\"section\\">\\r\\n        <div class=\\"section-header\\">\\r\\n          <span>Descriptor Definitions (Mark all that apply)</span>\\r\\n        </div>\\r\\n        <div class=\\"section-content\\">\\r\\n          <div class=\\"descriptors-grid\\">\\r\\n            {#each Object.entries(descriptorDefinitions) as [key, definition]}\\r\\n              <div class=\\"descriptor-item\\">\\r\\n                <input\\r\\n                  type=\\"checkbox\\"\\r\\n                  class=\\"descriptor-checkbox\\"\\r\\n                  checked={scoresheetData.descriptors[key]}\\r\\n                  on:change={() => handleDescriptorChange(key)}\\r\\n                />\\r\\n                <div class=\\"descriptor-label\\">\\r\\n                  <strong>{key.replace('_', '/').replace(/\\\\b\\\\w/g, l => l.toUpperCase())}</strong>\\r\\n                  <div class=\\"descriptor-definition\\">{definition}</div>\\r\\n                </div>\\r\\n              </div>\\r\\n            {/each}\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n      <!-- Overall Assessment Sliders -->\\r\\n      <div class=\\"section\\">\\r\\n        <div class=\\"section-header\\">\\r\\n          <span>Overall Assessment</span>\\r\\n        </div>\\r\\n        <div class=\\"section-content\\">\\r\\n          <div class=\\"assessment-sliders\\">\\r\\n            <div class=\\"slider-group\\">\\r\\n              <div class=\\"slider-labels\\">\\r\\n                <span>Classic Example</span>\\r\\n                <span><strong>Stylistic Accuracy</strong></span>\\r\\n                <span>Not to Style</span>\\r\\n              </div>\\r\\n              <input\\r\\n                type=\\"range\\"\\r\\n                class=\\"slider\\"\\r\\n                min=\\"0\\"\\r\\n                max=\\"100\\"\\r\\n                bind:value={scoresheetData.stylistic_accuracy}\\r\\n                on:input={handleInputChange}\\r\\n              />\\r\\n            </div>\\r\\n\\r\\n            <div class=\\"slider-group\\">\\r\\n              <div class=\\"slider-labels\\">\\r\\n                <span>Flawless</span>\\r\\n                <span><strong>Technical Merit</strong></span>\\r\\n                <span>Significant Flaws</span>\\r\\n              </div>\\r\\n              <input\\r\\n                type=\\"range\\"\\r\\n                class=\\"slider\\"\\r\\n                min=\\"0\\"\\r\\n                max=\\"100\\"\\r\\n                bind:value={scoresheetData.technical_merit}\\r\\n                on:input={handleInputChange}\\r\\n              />\\r\\n            </div>\\r\\n\\r\\n            <div class=\\"slider-group\\">\\r\\n              <div class=\\"slider-labels\\">\\r\\n                <span>Wonderful</span>\\r\\n                <span><strong>Intangibles</strong></span>\\r\\n                <span>Lifeless</span>\\r\\n              </div>\\r\\n              <input\\r\\n                type=\\"range\\"\\r\\n                class=\\"slider\\"\\r\\n                min=\\"0\\"\\r\\n                max=\\"100\\"\\r\\n                bind:value={scoresheetData.intangibles}\\r\\n                on:input={handleInputChange}\\r\\n              />\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n      <!-- Private Notes -->\\r\\n      <div class=\\"section\\">\\r\\n        <div class=\\"section-header\\">\\r\\n          <span>Judge Private Notes</span>\\r\\n        </div>\\r\\n        <div class=\\"section-content\\">\\r\\n          <textarea\\r\\n            class=\\"comments-textarea\\"\\r\\n            bind:value={scoresheetData.private_notes}\\r\\n            on:input={handleInputChange}\\r\\n            placeholder=\\"Private notes for your reference (not visible to entrant)...\\"\\r\\n          ></textarea>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n    <!-- Navigation -->\\r\\n    <div class=\\"navigation\\">\\r\\n      <button \\r\\n        class=\\"nav-btn nav-btn-secondary\\"\\r\\n        on:click={navigateToPrevious}\\r\\n        disabled={currentEntryIndex === 0}\\r\\n      >\\r\\n        ⬅️ Previous Entry\\r\\n      </button>\\r\\n\\r\\n      <button \\r\\n        class=\\"nav-btn nav-btn-secondary\\"\\r\\n        on:click={() => goto(\`/judge/competition/\${competitionId}\`)}\\r\\n      >\\r\\n        📝 Simple View\\r\\n      </button>\\r\\n\\r\\n      {#if currentEntryIndex < $activeSession.assignedEntries.length - 1}\\r\\n        <button \\r\\n          class=\\"nav-btn nav-btn-primary\\"\\r\\n          on:click={navigateToNext}\\r\\n        >\\r\\n          Next Entry ➡️\\r\\n        </button>\\r\\n      {:else}\\r\\n        <button \\r\\n          class=\\"nav-btn nav-btn-primary\\"\\r\\n          on:click={finishJudging}\\r\\n        >\\r\\n          🏁 Finish Judging\\r\\n        </button>\\r\\n      {/if}\\r\\n    </div>\\r\\n  {/if}\\r\\n</div>"],"names":[],"mappings":"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"}`
};
function getScoreDescription(score) {
  if (score >= 45) return "Outstanding - World-class example of style";
  if (score >= 38) return "Excellent - Exemplifies style well, requires minor fine-tuning";
  if (score >= 30) return "Very Good - Generally within style parameters, some minor flaws";
  if (score >= 21) return "Good - Misses the mark on style and/or minor flaws";
  if (score >= 14) return "Fair - Off flavors, aromas or major style deficiencies";
  return "Problematic - Major off flavors and aromas dominate";
}
function getScoreColor(score) {
  if (score >= 45) return "#059669";
  if (score >= 38) return "#0891b2";
  if (score >= 30) return "#eab308";
  if (score >= 21) return "#f59e0b";
  if (score >= 14) return "#f97316";
  return "#dc2626";
}
const Page = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let totalScore;
  let progress;
  let $activeSession, $$unsubscribe_activeSession;
  let $currentEntry, $$unsubscribe_currentEntry;
  let $$unsubscribe_userProfile;
  let $isJudging, $$unsubscribe_isJudging;
  let $page, $$unsubscribe_page;
  $$unsubscribe_activeSession = subscribe(activeSession, (value) => $activeSession = value);
  $$unsubscribe_currentEntry = subscribe(currentEntry, (value) => $currentEntry = value);
  $$unsubscribe_userProfile = subscribe(userProfile, (value) => value);
  $$unsubscribe_isJudging = subscribe(isJudging, (value) => $isJudging = value);
  $$unsubscribe_page = subscribe(page, (value) => $page = value);
  let currentEntryIndex = 0;
  let currentEntryId = null;
  let scoresheetData = {
    // Scoring fields
    aroma_score: "",
    appearance_score: "",
    flavor_score: "",
    mouthfeel_score: "",
    overall_score: "",
    // Detailed comments for each section
    aroma_comments: "",
    appearance_comments: "",
    flavor_comments: "",
    mouthfeel_comments: "",
    overall_comments: "",
    // Bottle inspection
    bottle_inspection_appropriate: true,
    bottle_inspection_comments: "",
    // Descriptor checkboxes (off-flavors and aromas)
    descriptors: {
      acetaldehyde: false,
      alcoholic: false,
      astringent: false,
      diacetyl: false,
      dms: false,
      estery: false,
      grassy: false,
      light_struck: false,
      metallic: false,
      musty: false,
      oxidized: false,
      phenolic: false,
      solvent: false,
      sour_acidic: false,
      sulfur: false,
      vegetal: false,
      yeasty: false
    },
    // Overall assessment sliders
    stylistic_accuracy: 50,
    // 0-100 scale (Classic Example to Not to Style)
    technical_merit: 50,
    // 0-100 scale (Flawless to Significant Flaws)
    intangibles: 50,
    // 0-100 scale (Wonderful to Lifeless)
    // Judge notes (private)
    private_notes: ""
  };
  const descriptorDefinitions = {
    acetaldehyde: "Green apple-like aroma and flavor.",
    alcoholic: "The aroma, flavor, and warming effect of ethanol and higher alcohols. Sometimes described as 'hot.'",
    astringent: "Puckering, lingering harshness and/or dryness in the finish/aftertaste; harsh graininess; huskiness.",
    diacetyl: "Artificial butter, butterscotch, or toffee aroma and flavor. Sometimes perceived as a slickness on the tongue.",
    dms: "At low levels a sweet, cooked or canned corn-like aroma and flavor.",
    estery: "Aroma and/or flavor of any ester (fruits, fruit flavorings, or roses).",
    grassy: "Aroma/flavor of fresh-cut grass or green leaves.",
    light_struck: "Similar to the aroma of a skunk.",
    metallic: "Tinny, coiny, copper, iron, or blood-like flavor.",
    musty: "Stale, musty, or moldy aromas/flavors.",
    oxidized: "Any one or combination of winy/vinous, cardboard, papery, or sherry-like aromas and flavors.",
    phenolic: "Spicy (clove, pepper), smoky, plastic, plastic adhesive strip, and/or medicinal (chlorophenolic).",
    solvent: "Aromas and flavors of higher alcohols (fusel alcohols). Similar to acetone or lacquer thinner aromas.",
    sour_acidic: "Tartness in aroma and flavor. Can be sharp and clean (lactic acid), or vinegar-like (acetic acid).",
    sulfur: "The aroma of rotten eggs or burning matches.",
    vegetal: "Cooked, canned, or rotten vegetable aroma and flavor (cabbage, onion, celery, asparagus, etc.)",
    yeasty: "A bready, sulfury or yeast-like aroma or flavor."
  };
  onDestroy(() => {
  });
  function loadCurrentEntryData() {
    if (!$currentEntry) return;
    currentEntryId = $currentEntry.id;
    console.log("Loading data for entry:", $currentEntry.id);
    scoresheetData = {
      aroma_score: "",
      appearance_score: "",
      flavor_score: "",
      mouthfeel_score: "",
      overall_score: "",
      aroma_comments: "",
      appearance_comments: "",
      flavor_comments: "",
      mouthfeel_comments: "",
      overall_comments: "",
      bottle_inspection_appropriate: true,
      bottle_inspection_comments: "",
      descriptors: {
        acetaldehyde: false,
        alcoholic: false,
        astringent: false,
        diacetyl: false,
        dms: false,
        estery: false,
        grassy: false,
        light_struck: false,
        metallic: false,
        musty: false,
        oxidized: false,
        phenolic: false,
        solvent: false,
        sour_acidic: false,
        sulfur: false,
        vegetal: false,
        yeasty: false
      },
      stylistic_accuracy: 50,
      technical_merit: 50,
      intangibles: 50,
      private_notes: ""
    };
    const existingJudging = $currentEntry.judging;
    if (existingJudging) {
      if (existingJudging.aroma_score) scoresheetData.aroma_score = existingJudging.aroma_score;
      if (existingJudging.appearance_score) scoresheetData.appearance_score = existingJudging.appearance_score;
      if (existingJudging.flavor_score) scoresheetData.flavor_score = existingJudging.flavor_score;
      if (existingJudging.mouthfeel_score) scoresheetData.mouthfeel_score = existingJudging.mouthfeel_score;
      if (existingJudging.overall_score) scoresheetData.overall_score = existingJudging.overall_score;
      if (existingJudging.scoresheet_data) {
        try {
          const savedData = JSON.parse(existingJudging.scoresheet_data);
          scoresheetData = { ...scoresheetData, ...savedData };
        } catch (e) {
          console.warn("Could not parse existing scoresheet data:", e);
        }
      }
    }
  }
  $$result.css.add(css);
  $page.params.id;
  totalScore = (parseInt(scoresheetData.aroma_score) || 0) + (parseInt(scoresheetData.appearance_score) || 0) + (parseInt(scoresheetData.flavor_score) || 0) + (parseInt(scoresheetData.mouthfeel_score) || 0) + (parseInt(scoresheetData.overall_score) || 0);
  progress = competitionJudgingStore.getJudgingProgress();
  {
    if ($currentEntry && currentEntryId !== $currentEntry.id) loadCurrentEntryData();
  }
  $$unsubscribe_activeSession();
  $$unsubscribe_currentEntry();
  $$unsubscribe_userProfile();
  $$unsubscribe_isJudging();
  $$unsubscribe_page();
  return `   <div class="scoresheet-container svelte-bgcrik">${!$isJudging || !$currentEntry ? `<div style="text-align: center; padding: 3rem;" data-svelte-h="svelte-18qn7ss"><h2>Loading scoresheet...</h2></div>` : ` <div class="progress-indicator svelte-bgcrik"><h3>Competition: ${escape($activeSession.activeCompetition?.name)}</h3> <div class="progress-bar svelte-bgcrik"><div class="progress-fill svelte-bgcrik" style="${"width: " + escape(progress.percentage, true) + "%"}"></div></div> <p>Entry ${escape(currentEntryIndex + 1)} of ${escape($activeSession.assignedEntries.length)} • ${escape(progress.completed)} completed (${escape(progress.percentage)}%)</p></div> <div class="scoresheet svelte-bgcrik"> <div class="scoresheet-header svelte-bgcrik" data-svelte-h="svelte-152qt5w"><h1 class="scoresheet-title svelte-bgcrik">BEER SCORESHEET</h1> <p class="scoresheet-subtitle svelte-bgcrik">AHA/BJCP Sanctioned Competition Program</p></div>  <div class="entry-info svelte-bgcrik"><div class="info-group svelte-bgcrik"><span class="info-label svelte-bgcrik" data-svelte-h="svelte-15im1qx">Entry #</span> <span class="info-value svelte-bgcrik">${escape($currentEntry.entry_number)}</span></div> <div class="info-group svelte-bgcrik"><span class="info-label svelte-bgcrik" data-svelte-h="svelte-v6ce3k">Category</span> <span class="info-value svelte-bgcrik">${escape($currentEntry.category?.category_number || "")}${escape($currentEntry.category?.subcategory_letter || "")} - ${escape($currentEntry.category?.category_name || "Unknown")}</span></div> <div class="info-group svelte-bgcrik"><span class="info-label svelte-bgcrik" data-svelte-h="svelte-bs27mp">Beer Name</span> <span class="info-value svelte-bgcrik">${escape($currentEntry.beer_name || "No name provided")}</span></div> <div class="info-group svelte-bgcrik"><span class="info-label svelte-bgcrik" data-svelte-h="svelte-g9wbxe">Subcategory</span> <span class="info-value svelte-bgcrik">${escape($currentEntry.category?.subcategory_name || "N/A")}</span></div></div>  <div class="total-score svelte-bgcrik" style="${"background: linear-gradient(135deg, " + escape(getScoreColor(totalScore), true) + ", " + escape(getScoreColor(totalScore), true) + "dd)"}"><h2 class="total-score-value svelte-bgcrik">${escape(totalScore)}/50</h2> <p class="total-score-description svelte-bgcrik">${escape(getScoreDescription(totalScore))}</p></div>  <div class="section svelte-bgcrik"><div class="section-header svelte-bgcrik"><span data-svelte-h="svelte-e4q03s">Aroma (as appropriate for style)</span> <div class="score-display svelte-bgcrik"><input type="number" class="score-input svelte-bgcrik" min="0" max="12"${add_attribute("value", scoresheetData.aroma_score, 0)}> / 12</div></div> <div class="section-content svelte-bgcrik"><p style="font-size: 0.9rem; margin-bottom: 0.5rem; font-style: italic;" data-svelte-h="svelte-18wq6ct">Comment on malt, hops, esters, and other aromatics</p> <textarea class="comments-textarea svelte-bgcrik" placeholder="Describe the aroma characteristics...">${escape(scoresheetData.aroma_comments || "")}</textarea></div></div>  <div class="section svelte-bgcrik"><div class="section-header svelte-bgcrik"><span data-svelte-h="svelte-s8zdiw">Appearance (as appropriate for style)</span> <div class="score-display svelte-bgcrik"><input type="number" class="score-input svelte-bgcrik" min="0" max="3"${add_attribute("value", scoresheetData.appearance_score, 0)}> / 3</div></div> <div class="section-content svelte-bgcrik"><p style="font-size: 0.9rem; margin-bottom: 0.5rem; font-style: italic;" data-svelte-h="svelte-p7ae5v">Comment on color, clarity, and head (retention, color, and texture)</p> <textarea class="comments-textarea svelte-bgcrik" placeholder="Describe the visual characteristics...">${escape(scoresheetData.appearance_comments || "")}</textarea></div></div>  <div class="section svelte-bgcrik"><div class="section-header svelte-bgcrik"><span data-svelte-h="svelte-ihxm9a">Flavor (as appropriate for style)</span> <div class="score-display svelte-bgcrik"><input type="number" class="score-input svelte-bgcrik" min="0" max="20"${add_attribute("value", scoresheetData.flavor_score, 0)}> / 20</div></div> <div class="section-content svelte-bgcrik"><p style="font-size: 0.9rem; margin-bottom: 0.5rem; font-style: italic;" data-svelte-h="svelte-1gnck4b">Comment on malt, hops, fermentation characteristics, balance, finish/aftertaste, and other flavor characteristics</p> <textarea class="comments-textarea svelte-bgcrik" style="min-height: 100px;" placeholder="Describe the flavor profile, balance, and finish...">${escape(scoresheetData.flavor_comments || "")}</textarea></div></div>  <div class="section svelte-bgcrik"><div class="section-header svelte-bgcrik"><span data-svelte-h="svelte-lbbl2n">Mouthfeel (as appropriate for style)</span> <div class="score-display svelte-bgcrik"><input type="number" class="score-input svelte-bgcrik" min="0" max="5"${add_attribute("value", scoresheetData.mouthfeel_score, 0)}> / 5</div></div> <div class="section-content svelte-bgcrik"><p style="font-size: 0.9rem; margin-bottom: 0.5rem; font-style: italic;" data-svelte-h="svelte-ur2ag2">Comment on body, carbonation, warmth, creaminess, astringency, and other palate sensations</p> <textarea class="comments-textarea svelte-bgcrik" placeholder="Describe the body, carbonation, and texture...">${escape(scoresheetData.mouthfeel_comments || "")}</textarea></div></div>  <div class="section svelte-bgcrik"><div class="section-header svelte-bgcrik"><span data-svelte-h="svelte-1oovfgs">Overall Impression</span> <div class="score-display svelte-bgcrik"><input type="number" class="score-input svelte-bgcrik" min="0" max="10"${add_attribute("value", scoresheetData.overall_score, 0)}> / 10</div></div> <div class="section-content svelte-bgcrik"><p style="font-size: 0.9rem; margin-bottom: 0.5rem; font-style: italic;" data-svelte-h="svelte-adkcra">Comment on overall drinking pleasure associated with entry, give suggestions for improvement</p> <textarea class="comments-textarea svelte-bgcrik" style="min-height: 120px;" placeholder="Overall assessment and suggestions for improvement...">${escape(scoresheetData.overall_comments || "")}</textarea></div></div>  <div class="section svelte-bgcrik"><div class="section-header svelte-bgcrik" data-svelte-h="svelte-fnih6q"><span>Descriptor Definitions (Mark all that apply)</span></div> <div class="section-content svelte-bgcrik"><div class="descriptors-grid svelte-bgcrik">${each(Object.entries(descriptorDefinitions), ([key, definition]) => {
    return `<div class="descriptor-item svelte-bgcrik"><input type="checkbox" class="descriptor-checkbox svelte-bgcrik" ${scoresheetData.descriptors[key] ? "checked" : ""}> <div class="descriptor-label svelte-bgcrik"><strong>${escape(key.replace("_", "/").replace(/\b\w/g, (l) => l.toUpperCase()))}</strong> <div class="descriptor-definition svelte-bgcrik">${escape(definition)}</div></div> </div>`;
  })}</div></div></div>  <div class="section svelte-bgcrik"><div class="section-header svelte-bgcrik" data-svelte-h="svelte-1mw4icu"><span>Overall Assessment</span></div> <div class="section-content svelte-bgcrik"><div class="assessment-sliders svelte-bgcrik"><div class="slider-group svelte-bgcrik"><div class="slider-labels svelte-bgcrik" data-svelte-h="svelte-1r0fe54"><span>Classic Example</span> <span><strong>Stylistic Accuracy</strong></span> <span>Not to Style</span></div> <input type="range" class="slider svelte-bgcrik" min="0" max="100"${add_attribute("value", scoresheetData.stylistic_accuracy, 0)}></div> <div class="slider-group svelte-bgcrik"><div class="slider-labels svelte-bgcrik" data-svelte-h="svelte-1l5h9v9"><span>Flawless</span> <span><strong>Technical Merit</strong></span> <span>Significant Flaws</span></div> <input type="range" class="slider svelte-bgcrik" min="0" max="100"${add_attribute("value", scoresheetData.technical_merit, 0)}></div> <div class="slider-group svelte-bgcrik"><div class="slider-labels svelte-bgcrik" data-svelte-h="svelte-h9kb65"><span>Wonderful</span> <span><strong>Intangibles</strong></span> <span>Lifeless</span></div> <input type="range" class="slider svelte-bgcrik" min="0" max="100"${add_attribute("value", scoresheetData.intangibles, 0)}></div></div></div></div>  <div class="section svelte-bgcrik"><div class="section-header svelte-bgcrik" data-svelte-h="svelte-bbom58"><span>Judge Private Notes</span></div> <div class="section-content svelte-bgcrik"><textarea class="comments-textarea svelte-bgcrik" placeholder="Private notes for your reference (not visible to entrant)...">${escape(scoresheetData.private_notes || "")}</textarea></div></div></div>  <div class="navigation svelte-bgcrik"><button class="nav-btn nav-btn-secondary svelte-bgcrik" ${"disabled"}>⬅️ Previous Entry</button> <button class="nav-btn nav-btn-secondary svelte-bgcrik" data-svelte-h="svelte-m96bn4">📝 Simple View</button> ${currentEntryIndex < $activeSession.assignedEntries.length - 1 ? `<button class="nav-btn nav-btn-primary svelte-bgcrik" data-svelte-h="svelte-pez3tg">Next Entry ➡️</button>` : `<button class="nav-btn nav-btn-primary svelte-bgcrik" data-svelte-h="svelte-icpn47">🏁 Finish Judging</button>`}</div>`}</div>`;
});

export { Page as default };
//# sourceMappingURL=_page.svelte-DldEJjKT.js.map

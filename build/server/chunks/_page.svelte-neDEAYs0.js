import { c as create_ssr_component, a as subscribe, d as escape } from './ssr-CFMHIens.js';
import './client-C3KLrhj1.js';
import { p as page } from './stores-C-uFbAzB.js';
import { u as userProfile } from './userProfile-BAUZwBX2.js';
import { a as activeSession, i as isJudging } from './competitionJudgingStore-Bi9TZcPs.js';
import './supabaseClient-D_8i9Ohq.js';
import './exports-DKuYoYKl.js';
import './index-Ct3aIOD7.js';
import './false-CRHihH2U.js';
import '@supabase/supabase-js';

const css = {
  code: ".rankings-container.svelte-zjv6iq.svelte-zjv6iq{max-width:1000px;margin:0 auto;padding:1rem;min-height:100vh;background:#f8fafc}.header.svelte-zjv6iq.svelte-zjv6iq{background:white;border-radius:12px;padding:1.5rem;margin-bottom:1rem;box-shadow:0 2px 8px rgba(0, 0, 0, 0.1)}.header.svelte-zjv6iq h1.svelte-zjv6iq{font-size:1.5rem;font-weight:600;color:#333;margin:0 0 0.5rem}.header.svelte-zjv6iq p.svelte-zjv6iq{color:#666;margin:0}.nav-buttons.svelte-zjv6iq.svelte-zjv6iq{display:flex;gap:1rem;margin-bottom:1rem}.nav-btn.svelte-zjv6iq.svelte-zjv6iq{padding:0.75rem 1.5rem;border:none;border-radius:8px;background:#6b7280;color:white;cursor:pointer;transition:background 0.2s ease;text-decoration:none;display:flex;align-items:center;gap:0.5rem}.nav-btn.svelte-zjv6iq.svelte-zjv6iq:hover{background:#4b5563}.nav-btn-primary.svelte-zjv6iq.svelte-zjv6iq{background:#ff3e00}.nav-btn-primary.svelte-zjv6iq.svelte-zjv6iq:hover{background:#e63600}.categories-section.svelte-zjv6iq.svelte-zjv6iq{background:white;border-radius:12px;padding:1.5rem;margin-bottom:1rem;box-shadow:0 2px 8px rgba(0, 0, 0, 0.1)}.categories-grid.svelte-zjv6iq.svelte-zjv6iq{display:grid;grid-template-columns:repeat(auto-fill, minmax(300px, 1fr));gap:1rem}.category-card.svelte-zjv6iq.svelte-zjv6iq{padding:1rem;border:2px solid #e5e7eb;border-radius:8px;cursor:pointer;transition:all 0.2s ease}.category-card.svelte-zjv6iq.svelte-zjv6iq:hover{border-color:#ff3e00;background:#fef7f0}.category-card.selected.svelte-zjv6iq.svelte-zjv6iq{border-color:#ff3e00;background:#fff2ed}.category-name.svelte-zjv6iq.svelte-zjv6iq{font-weight:600;color:#333;margin-bottom:0.25rem}.category-stats.svelte-zjv6iq.svelte-zjv6iq{font-size:0.875rem;color:#666}.rankings-section.svelte-zjv6iq.svelte-zjv6iq{background:white;border-radius:12px;padding:1.5rem;box-shadow:0 2px 8px rgba(0, 0, 0, 0.1)}.rankings-header.svelte-zjv6iq.svelte-zjv6iq{display:flex;justify-content:space-between;align-items:center;margin-bottom:1.5rem}.rankings-header.svelte-zjv6iq h2.svelte-zjv6iq{margin:0;color:#333}.save-btn.svelte-zjv6iq.svelte-zjv6iq{padding:0.75rem 1.5rem;border:none;border-radius:8px;background:linear-gradient(135deg, #059669 0%, #047857 100%);color:white;cursor:pointer;font-weight:500;transition:all 0.2s ease}.save-btn.svelte-zjv6iq.svelte-zjv6iq:hover:not(:disabled){background:linear-gradient(135deg, #047857 0%, #065f46 100%)}.save-btn.svelte-zjv6iq.svelte-zjv6iq:disabled{opacity:0.5;cursor:not-allowed}.rankings-list.svelte-zjv6iq.svelte-zjv6iq{display:flex;flex-direction:column;gap:1rem}.ranking-item.svelte-zjv6iq.svelte-zjv6iq{display:flex;align-items:center;gap:1rem;padding:1rem;background:#f9fafb;border-radius:8px;border:1px solid #e5e7eb;transition:all 0.2s ease}.ranking-item.own-entry.svelte-zjv6iq.svelte-zjv6iq{background:#eff6ff;border-color:#3b82f6}.ranking-item.invalid-own-entry.svelte-zjv6iq.svelte-zjv6iq{background:#fef2f2;border-color:#ef4444;animation:svelte-zjv6iq-pulse-error 2s ease-in-out}@keyframes svelte-zjv6iq-pulse-error{0%,100%{border-color:#ef4444}50%{border-color:#dc2626}}.rank-position.svelte-zjv6iq.svelte-zjv6iq{font-size:1.5rem;font-weight:600;min-width:60px;text-align:center}.entry-info.svelte-zjv6iq.svelte-zjv6iq{flex:1;min-width:0}.entry-number.svelte-zjv6iq.svelte-zjv6iq{font-weight:600;color:#ff3e00;margin-bottom:0.25rem}.entry-details.svelte-zjv6iq.svelte-zjv6iq{display:flex;flex-direction:column;gap:0.25rem;margin-bottom:0.25rem}.detail-text.svelte-zjv6iq.svelte-zjv6iq{font-size:0.875rem;color:#666}.score-display.svelte-zjv6iq.svelte-zjv6iq{display:flex;align-items:center;gap:0.5rem;margin-top:0.5rem}.score-badge.svelte-zjv6iq.svelte-zjv6iq{padding:0.25rem 0.75rem;border-radius:12px;font-size:0.875rem;font-weight:600;color:white}.ranking-controls.svelte-zjv6iq.svelte-zjv6iq{display:flex;flex-direction:column;gap:0.25rem}.rank-btn.svelte-zjv6iq.svelte-zjv6iq{width:40px;height:40px;border:none;border-radius:6px;background:#e5e7eb;color:#374151;cursor:pointer;display:flex;align-items:center;justify-content:center;transition:all 0.2s ease}.rank-btn.svelte-zjv6iq.svelte-zjv6iq:hover:not(:disabled){background:#d1d5db}.rank-btn.svelte-zjv6iq.svelte-zjv6iq:disabled{opacity:0.3;cursor:not-allowed}.validation-warning.svelte-zjv6iq.svelte-zjv6iq{background:#fef3cd;border:1px solid #f59e0b;border-radius:8px;padding:1rem;margin-bottom:1rem}.validation-warning.svelte-zjv6iq h4.svelte-zjv6iq{margin:0 0 0.5rem;color:#92400e;font-size:0.875rem;font-weight:600}.validation-error.svelte-zjv6iq.svelte-zjv6iq{font-size:0.875rem;color:#92400e;margin:0.25rem 0}.own-entry-indicator.svelte-zjv6iq.svelte-zjv6iq{display:inline-flex;align-items:center;gap:0.25rem;font-size:0.75rem;color:#3b82f6;background:#dbeafe;padding:0.125rem 0.5rem;border-radius:12px;font-weight:500}.loading.svelte-zjv6iq.svelte-zjv6iq,.error-state.svelte-zjv6iq.svelte-zjv6iq,.empty-state.svelte-zjv6iq.svelte-zjv6iq{text-align:center;padding:3rem;color:#666}.spinner.svelte-zjv6iq.svelte-zjv6iq{display:inline-block;width:40px;height:40px;border:4px solid #f3f3f3;border-top:4px solid #ff3e00;border-radius:50%;animation:svelte-zjv6iq-spin 1s linear infinite;margin-bottom:1rem}@keyframes svelte-zjv6iq-spin{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@media(max-width: 768px){.rankings-container.svelte-zjv6iq.svelte-zjv6iq{padding:0.5rem}.nav-buttons.svelte-zjv6iq.svelte-zjv6iq{flex-wrap:wrap}.categories-grid.svelte-zjv6iq.svelte-zjv6iq{grid-template-columns:1fr}.entry-details.svelte-zjv6iq.svelte-zjv6iq{gap:0.125rem}.ranking-item.svelte-zjv6iq.svelte-zjv6iq{flex-wrap:wrap;gap:0.5rem}.rankings-header.svelte-zjv6iq.svelte-zjv6iq{flex-direction:column;gap:1rem;align-items:stretch}}",
  map: `{"version":3,"file":"+page.svelte","sources":["+page.svelte"],"sourcesContent":["<!-- Category Ranking Interface -->\\r\\n<script>\\r\\n  import { onMount } from 'svelte';\\r\\n  import { goto } from '$app/navigation';\\r\\n  import { page } from '$app/stores';\\r\\n  import { userProfile } from '$lib/stores/userProfile';\\r\\n  import { \\r\\n    competitionJudgingStore, \\r\\n    activeSession,\\r\\n    isJudging\\r\\n  } from '$lib/stores/competitionJudgingStore';\\r\\n  import { supabase } from '$lib/supabaseClient';\\r\\n\\r\\n  // Get competition ID from URL\\r\\n  $: competitionId = $page.params.id;\\r\\n\\r\\n  let categories = [];\\r\\n  let selectedCategory = null;\\r\\n  let categoryEntries = [];\\r\\n  let rankings = [];\\r\\n  let isLoading = true;\\r\\n  let isSaving = false;\\r\\n  let error = null;\\r\\n  let competitionType = null;\\r\\n  let validationErrors = [];\\r\\n\\r\\n  // Check if current user is Comp Director for displaying beer names\\r\\n  $: isCompDirector = $userProfile?.role === 'competition_director';\\r\\n\\r\\n  // Helper function to get beer name display\\r\\n  function getBeerNameDisplay(beerName) {\\r\\n    if (isCompDirector) {\\r\\n      return beerName || 'No name provided';\\r\\n    }\\r\\n    return 'Hidden'; // Hidden for non-Comp Directors\\r\\n  }\\r\\n\\r\\n  onMount(async () => {\\r\\n    if (!$userProfile) {\\r\\n      goto('/auth');\\r\\n      return;\\r\\n    }\\r\\n\\r\\n    if (!$isJudging || $activeSession.activeCompetition?.id !== competitionId) {\\r\\n      try {\\r\\n        await competitionJudgingStore.startJudgingSession(competitionId, $userProfile.id);\\r\\n      } catch (err) {\\r\\n        console.error('Error starting judging session:', err);\\r\\n        error = 'Failed to start judging session';\\r\\n        isLoading = false;\\r\\n        return;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    await loadCategories();\\r\\n  });\\r\\n\\r\\n  async function loadCategories() {\\r\\n    isLoading = true;\\r\\n    error = null;\\r\\n\\r\\n    try {\\r\\n      // First load competition data including type\\r\\n      const { data: competitionData, error: compError } = await supabase\\r\\n        .from('competitions')\\r\\n        .select('category_system, competition_type')\\r\\n        .eq('id', competitionId)\\r\\n        .single();\\r\\n\\r\\n      if (compError) throw compError;\\r\\n\\r\\n      // Store competition type for validation\\r\\n      competitionType = competitionData.competition_type;\\r\\n\\r\\n      if (competitionData.category_system === 'custom') {\\r\\n        // Load custom ranking groups\\r\\n        const { data: rankingGroups, error: groupsError } = await supabase\\r\\n          .from('competition_ranking_groups')\\r\\n          .select(\`\\r\\n            id, group_name, group_description, bjcp_category_ids, group_order\\r\\n          \`)\\r\\n          .eq('competition_id', competitionId)\\r\\n          .order('group_order');\\r\\n\\r\\n        if (groupsError) throw groupsError;\\r\\n\\r\\n        // For each ranking group, count entries\\r\\n        const groupsWithCounts = [];\\r\\n        for (const group of rankingGroups || []) {\\r\\n          const categoryIds = group.bjcp_category_ids;\\r\\n          \\r\\n          const { data: entriesData, error: entriesError } = await supabase\\r\\n            .from('competition_entries')\\r\\n            .select('id, bjcp_category_id')\\r\\n            .eq('competition_id', competitionId)\\r\\n            .in('bjcp_category_id', categoryIds);\\r\\n\\r\\n          if (entriesError) throw entriesError;\\r\\n\\r\\n          if (entriesData && entriesData.length > 0) {\\r\\n            groupsWithCounts.push({\\r\\n              ...group,\\r\\n              isCustomGroup: true,\\r\\n              entryCount: entriesData.length,\\r\\n              displayName: group.group_name\\r\\n            });\\r\\n          }\\r\\n        }\\r\\n\\r\\n        categories = groupsWithCounts;\\r\\n      } else {\\r\\n        // Load individual categories (default system)\\r\\n        const { data: entriesData, error: entriesError } = await supabase\\r\\n          .from('competition_entries')\\r\\n          .select(\`\\r\\n            bjcp_category_id,\\r\\n            bjcp_categories(\\r\\n              id, category_number, subcategory_letter, \\r\\n              subcategory_name, category_name\\r\\n            )\\r\\n          \`)\\r\\n          .eq('competition_id', competitionId);\\r\\n\\r\\n        if (entriesError) throw entriesError;\\r\\n\\r\\n        // Group by category and count entries\\r\\n        const categoryMap = new Map();\\r\\n        entriesData.forEach(entry => {\\r\\n          const category = entry.bjcp_categories;\\r\\n          if (category) {\\r\\n            const key = category.id;\\r\\n            if (categoryMap.has(key)) {\\r\\n              categoryMap.get(key).entryCount++;\\r\\n            } else {\\r\\n              categoryMap.set(key, {\\r\\n                ...category,\\r\\n                isCustomGroup: false,\\r\\n                entryCount: 1,\\r\\n                displayName: \`\${category.category_number}\${category.subcategory_letter || ''} - \${category.category_name}\${category.subcategory_name ? \` (\${category.subcategory_name})\` : ''}\`\\r\\n              });\\r\\n            }\\r\\n          }\\r\\n        });\\r\\n\\r\\n        categories = Array.from(categoryMap.values())\\r\\n          .sort((a, b) => a.category_number.localeCompare(b.category_number));\\r\\n      }\\r\\n\\r\\n      // Auto-select first category if available\\r\\n      if (categories.length > 0) {\\r\\n        selectedCategory = categories[0];\\r\\n        await loadCategoryEntries();\\r\\n      }\\r\\n\\r\\n    } catch (err) {\\r\\n      console.error('Error loading categories:', err);\\r\\n      error = err.message;\\r\\n    } finally {\\r\\n      isLoading = false;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  async function loadCategoryEntries() {\\r\\n    if (!selectedCategory) return;\\r\\n\\r\\n    try {\\r\\n      let entriesData;\\r\\n      \\r\\n      if (selectedCategory.isCustomGroup) {\\r\\n        // Load entries for all categories in this ranking group\\r\\n        const { data: groupEntriesData, error: entriesError } = await supabase\\r\\n          .from('competition_entries')\\r\\n          .select(\`\\r\\n            id, entry_number, beer_name, beer_notes, bjcp_category_id, member_id,\\r\\n            members!competition_entries_member_id_fkey(name),\\r\\n            bjcp_categories!competition_entries_bjcp_category_id_fkey(\\r\\n              category_number, subcategory_letter, subcategory_name, category_name\\r\\n            )\\r\\n          \`)\\r\\n          .eq('competition_id', competitionId)\\r\\n          .in('bjcp_category_id', selectedCategory.bjcp_category_ids)\\r\\n          .order('entry_number');\\r\\n\\r\\n        if (entriesError) throw entriesError;\\r\\n        entriesData = groupEntriesData;\\r\\n      } else {\\r\\n        // Load entries for this single category\\r\\n        const { data: singleCategoryData, error: entriesError } = await supabase\\r\\n          .from('competition_entries')\\r\\n          .select(\`\\r\\n            id, entry_number, beer_name, beer_notes, bjcp_category_id, member_id,\\r\\n            members!competition_entries_member_id_fkey(name),\\r\\n            bjcp_categories!competition_entries_bjcp_category_id_fkey(\\r\\n              category_number, subcategory_letter, subcategory_name, category_name\\r\\n            )\\r\\n          \`)\\r\\n          .eq('competition_id', competitionId)\\r\\n          .eq('bjcp_category_id', selectedCategory.id)\\r\\n          .order('entry_number');\\r\\n\\r\\n        if (entriesError) throw entriesError;\\r\\n        entriesData = singleCategoryData;\\r\\n      }\\r\\n\\r\\n      if (!entriesData) throw new Error('No entries data loaded');\\r\\n\\r\\n      // Load existing judging scores for this judge\\r\\n      const entryIds = entriesData.map(e => e.id);\\r\\n      const { data: judgingData, error: judgingError } = await supabase\\r\\n        .from('competition_judging_sessions')\\r\\n        .select('entry_id, total_score, judge_notes')\\r\\n        .eq('competition_id', competitionId)\\r\\n        .eq('judge_id', $userProfile.id)\\r\\n        .in('entry_id', entryIds);\\r\\n\\r\\n      if (judgingError) {\\r\\n        console.warn('No judging data found:', judgingError);\\r\\n      }\\r\\n\\r\\n      // Load existing rankings for this judge and category/group\\r\\n      let rankingsData = [];\\r\\n      if (selectedCategory.isCustomGroup) {\\r\\n        // Load rankings for all categories in this group\\r\\n        const { data: groupRankingsData, error: rankingsError } = await supabase\\r\\n          .from('competition_rankings')\\r\\n          .select('*')\\r\\n          .eq('competition_id', competitionId)\\r\\n          .eq('judge_id', $userProfile.id)\\r\\n          .eq('ranking_group_id', selectedCategory.id)\\r\\n          .order('rank_position');\\r\\n\\r\\n        if (rankingsError) {\\r\\n          console.warn('No existing group rankings found:', rankingsError);\\r\\n        } else {\\r\\n          rankingsData = groupRankingsData;\\r\\n        }\\r\\n      } else {\\r\\n        // Load rankings for single category\\r\\n        const { data: categoryRankingsData, error: rankingsError } = await supabase\\r\\n          .from('competition_rankings')\\r\\n          .select('*')\\r\\n          .eq('competition_id', competitionId)\\r\\n          .eq('judge_id', $userProfile.id)\\r\\n          .eq('bjcp_category_id', selectedCategory.id)\\r\\n          .order('rank_position');\\r\\n\\r\\n        if (rankingsError) {\\r\\n          console.warn('No existing category rankings found:', rankingsError);\\r\\n        } else {\\r\\n          rankingsData = categoryRankingsData;\\r\\n        }\\r\\n      }\\r\\n\\r\\n      // Combine entry data with judging scores\\r\\n      categoryEntries = entriesData.map(entry => {\\r\\n        const judging = judgingData?.find(j => j.entry_id === entry.id);\\r\\n        const categoryInfo = entry.bjcp_categories;\\r\\n        return {\\r\\n          ...entry,\\r\\n          member_name: entry.members?.name || 'Unknown',\\r\\n          total_score: judging?.total_score || 0,\\r\\n          judge_notes: judging?.judge_notes || '',\\r\\n          hasScore: !!(judging?.total_score),\\r\\n          category_display: categoryInfo ? \`\${categoryInfo.category_number}\${categoryInfo.subcategory_letter || ''} - \${categoryInfo.subcategory_name || categoryInfo.category_name}\` : 'Unknown Category'\\r\\n        };\\r\\n      });\\r\\n\\r\\n      // Initialize rankings based on existing data or scores\\r\\n      if (rankingsData && rankingsData.length > 0) {\\r\\n        // Use existing rankings\\r\\n        rankings = rankingsData.map(ranking => {\\r\\n          const entry = categoryEntries.find(e => e.id === ranking.entry_id);\\r\\n          return {\\r\\n            ...ranking,\\r\\n            entry: entry\\r\\n          };\\r\\n        });\\r\\n      } else {\\r\\n        // Auto-rank by scores (highest to lowest)\\r\\n        const scoredEntries = categoryEntries\\r\\n          .filter(entry => entry.hasScore)\\r\\n          .sort((a, b) => b.total_score - a.total_score);\\r\\n\\r\\n        rankings = scoredEntries.map((entry, index) => ({\\r\\n          id: null, // Not saved yet\\r\\n          competition_id: competitionId,\\r\\n          judge_id: $userProfile.id,\\r\\n          bjcp_category_id: selectedCategory.isCustomGroup ? null : selectedCategory.id,\\r\\n          ranking_group_id: selectedCategory.isCustomGroup ? selectedCategory.id : null,\\r\\n          entry_id: entry.id,\\r\\n          rank_position: index + 1,\\r\\n          ranking_notes: '',\\r\\n          entry: entry\\r\\n        }));\\r\\n      }\\r\\n\\r\\n    } catch (err) {\\r\\n      console.error('Error loading category entries:', err);\\r\\n      error = err.message;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  async function selectCategory(category) {\\r\\n    selectedCategory = category;\\r\\n    await loadCategoryEntries();\\r\\n  }\\r\\n\\r\\n  function moveRanking(fromIndex, toIndex) {\\r\\n    if (fromIndex === toIndex || toIndex < 0 || toIndex >= rankings.length) return;\\r\\n\\r\\n    const newRankings = [...rankings];\\r\\n    const [movedItem] = newRankings.splice(fromIndex, 1);\\r\\n    newRankings.splice(toIndex, 0, movedItem);\\r\\n\\r\\n    // Update rank positions\\r\\n    newRankings.forEach((ranking, index) => {\\r\\n      ranking.rank_position = index + 1;\\r\\n    });\\r\\n\\r\\n    rankings = newRankings;\\r\\n  }\\r\\n\\r\\n  function moveUp(index) {\\r\\n    moveRanking(index, index - 1);\\r\\n  }\\r\\n\\r\\n  function moveDown(index) {\\r\\n    moveRanking(index, index + 1);\\r\\n  }\\r\\n\\r\\n  function validateIntraclubSelfRanking() {\\r\\n    validationErrors = [];\\r\\n\\r\\n    // Only validate for intraclub competitions\\r\\n    if (competitionType !== 'intraclub') {\\r\\n      return true;\\r\\n    }\\r\\n\\r\\n    // Check if user is ranking their own entries in top 3 positions\\r\\n    const top3Rankings = rankings.filter(r => r.rank_position <= 3);\\r\\n    const ownEntryViolations = top3Rankings.filter(r =>\\r\\n      r.entry && r.entry.member_id === $userProfile.id\\r\\n    );\\r\\n\\r\\n    if (ownEntryViolations.length > 0) {\\r\\n      ownEntryViolations.forEach(violation => {\\r\\n        validationErrors.push({\\r\\n          type: 'self_ranking',\\r\\n          message: \`You cannot rank your own entry (#\${violation.entry.entry_number}) in position \${violation.rank_position} during intraclub competitions.\`,\\r\\n          entryId: violation.entry_id,\\r\\n          position: violation.rank_position\\r\\n        });\\r\\n      });\\r\\n      return false;\\r\\n    }\\r\\n\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  async function saveRankings() {\\r\\n    if (!selectedCategory || rankings.length === 0) return;\\r\\n\\r\\n    // Validate rankings before saving\\r\\n    if (!validateIntraclubSelfRanking()) {\\r\\n      showToast('Cannot save: You cannot rank your own entries in positions 1-3 during intraclub competitions', 'error');\\r\\n      return;\\r\\n    }\\r\\n\\r\\n    isSaving = true;\\r\\n    try {\\r\\n      // First, delete existing rankings for this category/group and judge\\r\\n      if (selectedCategory.isCustomGroup) {\\r\\n        const { error: deleteError } = await supabase\\r\\n          .from('competition_rankings')\\r\\n          .delete()\\r\\n          .eq('competition_id', competitionId)\\r\\n          .eq('judge_id', $userProfile.id)\\r\\n          .eq('ranking_group_id', selectedCategory.id);\\r\\n\\r\\n        if (deleteError) throw deleteError;\\r\\n      } else {\\r\\n        const { error: deleteError } = await supabase\\r\\n          .from('competition_rankings')\\r\\n          .delete()\\r\\n          .eq('competition_id', competitionId)\\r\\n          .eq('judge_id', $userProfile.id)\\r\\n          .eq('bjcp_category_id', selectedCategory.id);\\r\\n\\r\\n        if (deleteError) throw deleteError;\\r\\n      }\\r\\n\\r\\n      // Insert new rankings\\r\\n      const rankingsToInsert = rankings.map(ranking => ({\\r\\n        competition_id: competitionId,\\r\\n        judge_id: $userProfile.id,\\r\\n        bjcp_category_id: selectedCategory.isCustomGroup ? null : selectedCategory.id,\\r\\n        ranking_group_id: selectedCategory.isCustomGroup ? selectedCategory.id : null,\\r\\n        entry_id: ranking.entry_id,\\r\\n        rank_position: ranking.rank_position,\\r\\n        ranking_notes: ranking.ranking_notes || null\\r\\n      }));\\r\\n\\r\\n      const { error: insertError } = await supabase\\r\\n        .from('competition_rankings')\\r\\n        .insert(rankingsToInsert);\\r\\n\\r\\n      if (insertError) throw insertError;\\r\\n\\r\\n      showToast('Rankings saved successfully!', 'success');\\r\\n\\r\\n    } catch (err) {\\r\\n      console.error('Error saving rankings:', err);\\r\\n      showToast('Failed to save rankings', 'error');\\r\\n    } finally {\\r\\n      isSaving = false;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function getRankIcon(position) {\\r\\n    switch (position) {\\r\\n      case 1: return '🥇';\\r\\n      case 2: return '🥈';\\r\\n      case 3: return '🥉';\\r\\n      default: return \`\${position}.\`;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function getScoreColor(score) {\\r\\n    if (score >= 45) return '#059669'; // Excellent\\r\\n    if (score >= 38) return '#0891b2'; // Very Good  \\r\\n    if (score >= 30) return '#eab308'; // Good\\r\\n    if (score >= 21) return '#f59e0b'; // Fair\\r\\n    return '#dc2626'; // Poor\\r\\n  }\\r\\n\\r\\n  function isOwnEntry(entry) {\\r\\n    return entry && entry.member_id === $userProfile?.id;\\r\\n  }\\r\\n\\r\\n  function getEntryValidationClass(ranking) {\\r\\n    if (competitionType === 'intraclub' && isOwnEntry(ranking.entry) && ranking.rank_position <= 3) {\\r\\n      return 'invalid-own-entry';\\r\\n    }\\r\\n    return '';\\r\\n  }\\r\\n\\r\\n  // Reactive validation check\\r\\n  $: if (rankings.length > 0) {\\r\\n    validateIntraclubSelfRanking();\\r\\n  }\\r\\n\\r\\n  function showToast(message, type = 'info') {\\r\\n    const toast = document.createElement('div');\\r\\n    toast.textContent = message;\\r\\n    toast.style.cssText = \`\\r\\n      position: fixed;\\r\\n      top: 20px;\\r\\n      right: 20px;\\r\\n      padding: 1rem 1.5rem;\\r\\n      border-radius: 6px;\\r\\n      color: white;\\r\\n      font-weight: 500;\\r\\n      z-index: 1000;\\r\\n      background: \${type === 'success' ? '#059669' : type === 'error' ? '#dc2626' : '#6b7280'};\\r\\n      box-shadow: 0 4px 12px rgba(0,0,0,0.15);\\r\\n    \`;\\r\\n\\r\\n    document.body.appendChild(toast);\\r\\n    setTimeout(() => document.body.removeChild(toast), 3000);\\r\\n  }\\r\\n<\/script>\\r\\n\\r\\n<style>\\r\\n  .rankings-container {\\r\\n    max-width: 1000px;\\r\\n    margin: 0 auto;\\r\\n    padding: 1rem;\\r\\n    min-height: 100vh;\\r\\n    background: #f8fafc;\\r\\n  }\\r\\n\\r\\n  /* Header */\\r\\n  .header {\\r\\n    background: white;\\r\\n    border-radius: 12px;\\r\\n    padding: 1.5rem;\\r\\n    margin-bottom: 1rem;\\r\\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\\r\\n  }\\r\\n\\r\\n  .header h1 {\\r\\n    font-size: 1.5rem;\\r\\n    font-weight: 600;\\r\\n    color: #333;\\r\\n    margin: 0 0 0.5rem;\\r\\n  }\\r\\n\\r\\n  .header p {\\r\\n    color: #666;\\r\\n    margin: 0;\\r\\n  }\\r\\n\\r\\n  /* Navigation */\\r\\n  .nav-buttons {\\r\\n    display: flex;\\r\\n    gap: 1rem;\\r\\n    margin-bottom: 1rem;\\r\\n  }\\r\\n\\r\\n  .nav-btn {\\r\\n    padding: 0.75rem 1.5rem;\\r\\n    border: none;\\r\\n    border-radius: 8px;\\r\\n    background: #6b7280;\\r\\n    color: white;\\r\\n    cursor: pointer;\\r\\n    transition: background 0.2s ease;\\r\\n    text-decoration: none;\\r\\n    display: flex;\\r\\n    align-items: center;\\r\\n    gap: 0.5rem;\\r\\n  }\\r\\n\\r\\n  .nav-btn:hover {\\r\\n    background: #4b5563;\\r\\n  }\\r\\n\\r\\n  .nav-btn-primary {\\r\\n    background: #ff3e00;\\r\\n  }\\r\\n\\r\\n  .nav-btn-primary:hover {\\r\\n    background: #e63600;\\r\\n  }\\r\\n\\r\\n  /* Categories */\\r\\n  .categories-section {\\r\\n    background: white;\\r\\n    border-radius: 12px;\\r\\n    padding: 1.5rem;\\r\\n    margin-bottom: 1rem;\\r\\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\\r\\n  }\\r\\n\\r\\n  .categories-grid {\\r\\n    display: grid;\\r\\n    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\\r\\n    gap: 1rem;\\r\\n  }\\r\\n\\r\\n  .category-card {\\r\\n    padding: 1rem;\\r\\n    border: 2px solid #e5e7eb;\\r\\n    border-radius: 8px;\\r\\n    cursor: pointer;\\r\\n    transition: all 0.2s ease;\\r\\n  }\\r\\n\\r\\n  .category-card:hover {\\r\\n    border-color: #ff3e00;\\r\\n    background: #fef7f0;\\r\\n  }\\r\\n\\r\\n  .category-card.selected {\\r\\n    border-color: #ff3e00;\\r\\n    background: #fff2ed;\\r\\n  }\\r\\n\\r\\n  .category-name {\\r\\n    font-weight: 600;\\r\\n    color: #333;\\r\\n    margin-bottom: 0.25rem;\\r\\n  }\\r\\n\\r\\n  .category-stats {\\r\\n    font-size: 0.875rem;\\r\\n    color: #666;\\r\\n  }\\r\\n\\r\\n  /* Rankings */\\r\\n  .rankings-section {\\r\\n    background: white;\\r\\n    border-radius: 12px;\\r\\n    padding: 1.5rem;\\r\\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\\r\\n  }\\r\\n\\r\\n  .rankings-header {\\r\\n    display: flex;\\r\\n    justify-content: space-between;\\r\\n    align-items: center;\\r\\n    margin-bottom: 1.5rem;\\r\\n  }\\r\\n\\r\\n  .rankings-header h2 {\\r\\n    margin: 0;\\r\\n    color: #333;\\r\\n  }\\r\\n\\r\\n  .save-btn {\\r\\n    padding: 0.75rem 1.5rem;\\r\\n    border: none;\\r\\n    border-radius: 8px;\\r\\n    background: linear-gradient(135deg, #059669 0%, #047857 100%);\\r\\n    color: white;\\r\\n    cursor: pointer;\\r\\n    font-weight: 500;\\r\\n    transition: all 0.2s ease;\\r\\n  }\\r\\n\\r\\n  .save-btn:hover:not(:disabled) {\\r\\n    background: linear-gradient(135deg, #047857 0%, #065f46 100%);\\r\\n  }\\r\\n\\r\\n  .save-btn:disabled {\\r\\n    opacity: 0.5;\\r\\n    cursor: not-allowed;\\r\\n  }\\r\\n\\r\\n  .rankings-list {\\r\\n    display: flex;\\r\\n    flex-direction: column;\\r\\n    gap: 1rem;\\r\\n  }\\r\\n\\r\\n  .ranking-item {\\r\\n    display: flex;\\r\\n    align-items: center;\\r\\n    gap: 1rem;\\r\\n    padding: 1rem;\\r\\n    background: #f9fafb;\\r\\n    border-radius: 8px;\\r\\n    border: 1px solid #e5e7eb;\\r\\n    transition: all 0.2s ease;\\r\\n  }\\r\\n\\r\\n  .ranking-item.own-entry {\\r\\n    background: #eff6ff;\\r\\n    border-color: #3b82f6;\\r\\n  }\\r\\n\\r\\n  .ranking-item.invalid-own-entry {\\r\\n    background: #fef2f2;\\r\\n    border-color: #ef4444;\\r\\n    animation: pulse-error 2s ease-in-out;\\r\\n  }\\r\\n\\r\\n  @keyframes pulse-error {\\r\\n    0%, 100% { border-color: #ef4444; }\\r\\n    50% { border-color: #dc2626; }\\r\\n  }\\r\\n\\r\\n  .rank-position {\\r\\n    font-size: 1.5rem;\\r\\n    font-weight: 600;\\r\\n    min-width: 60px;\\r\\n    text-align: center;\\r\\n  }\\r\\n\\r\\n  .entry-info {\\r\\n    flex: 1;\\r\\n    min-width: 0;\\r\\n  }\\r\\n\\r\\n  .entry-number {\\r\\n    font-weight: 600;\\r\\n    color: #ff3e00;\\r\\n    margin-bottom: 0.25rem;\\r\\n  }\\r\\n\\r\\n  .entry-details {\\r\\n    display: flex;\\r\\n    flex-direction: column;\\r\\n    gap: 0.25rem;\\r\\n    margin-bottom: 0.25rem;\\r\\n  }\\r\\n\\r\\n  .detail-text {\\r\\n    font-size: 0.875rem;\\r\\n    color: #666;\\r\\n  }\\r\\n\\r\\n  .score-display {\\r\\n    display: flex;\\r\\n    align-items: center;\\r\\n    gap: 0.5rem;\\r\\n    margin-top: 0.5rem;\\r\\n  }\\r\\n\\r\\n  .score-badge {\\r\\n    padding: 0.25rem 0.75rem;\\r\\n    border-radius: 12px;\\r\\n    font-size: 0.875rem;\\r\\n    font-weight: 600;\\r\\n    color: white;\\r\\n  }\\r\\n\\r\\n  .ranking-controls {\\r\\n    display: flex;\\r\\n    flex-direction: column;\\r\\n    gap: 0.25rem;\\r\\n  }\\r\\n\\r\\n  .rank-btn {\\r\\n    width: 40px;\\r\\n    height: 40px;\\r\\n    border: none;\\r\\n    border-radius: 6px;\\r\\n    background: #e5e7eb;\\r\\n    color: #374151;\\r\\n    cursor: pointer;\\r\\n    display: flex;\\r\\n    align-items: center;\\r\\n    justify-content: center;\\r\\n    transition: all 0.2s ease;\\r\\n  }\\r\\n\\r\\n  .rank-btn:hover:not(:disabled) {\\r\\n    background: #d1d5db;\\r\\n  }\\r\\n\\r\\n  .rank-btn:disabled {\\r\\n    opacity: 0.3;\\r\\n    cursor: not-allowed;\\r\\n  }\\r\\n\\r\\n  .validation-warning {\\r\\n    background: #fef3cd;\\r\\n    border: 1px solid #f59e0b;\\r\\n    border-radius: 8px;\\r\\n    padding: 1rem;\\r\\n    margin-bottom: 1rem;\\r\\n  }\\r\\n\\r\\n  .validation-warning h4 {\\r\\n    margin: 0 0 0.5rem;\\r\\n    color: #92400e;\\r\\n    font-size: 0.875rem;\\r\\n    font-weight: 600;\\r\\n  }\\r\\n\\r\\n  .validation-error {\\r\\n    font-size: 0.875rem;\\r\\n    color: #92400e;\\r\\n    margin: 0.25rem 0;\\r\\n  }\\r\\n\\r\\n  .own-entry-indicator {\\r\\n    display: inline-flex;\\r\\n    align-items: center;\\r\\n    gap: 0.25rem;\\r\\n    font-size: 0.75rem;\\r\\n    color: #3b82f6;\\r\\n    background: #dbeafe;\\r\\n    padding: 0.125rem 0.5rem;\\r\\n    border-radius: 12px;\\r\\n    font-weight: 500;\\r\\n  }\\r\\n\\r\\n  .loading, .error-state, .empty-state {\\r\\n    text-align: center;\\r\\n    padding: 3rem;\\r\\n    color: #666;\\r\\n  }\\r\\n\\r\\n  .spinner {\\r\\n    display: inline-block;\\r\\n    width: 40px;\\r\\n    height: 40px;\\r\\n    border: 4px solid #f3f3f3;\\r\\n    border-top: 4px solid #ff3e00;\\r\\n    border-radius: 50%;\\r\\n    animation: spin 1s linear infinite;\\r\\n    margin-bottom: 1rem;\\r\\n  }\\r\\n\\r\\n  @keyframes spin {\\r\\n    0% { transform: rotate(0deg); }\\r\\n    100% { transform: rotate(360deg); }\\r\\n  }\\r\\n\\r\\n  /* Mobile optimizations */\\r\\n  @media (max-width: 768px) {\\r\\n    .rankings-container {\\r\\n      padding: 0.5rem;\\r\\n    }\\r\\n\\r\\n    .nav-buttons {\\r\\n      flex-wrap: wrap;\\r\\n    }\\r\\n\\r\\n    .categories-grid {\\r\\n      grid-template-columns: 1fr;\\r\\n    }\\r\\n\\r\\n    .entry-details {\\r\\n      gap: 0.125rem;\\r\\n    }\\r\\n\\r\\n    .ranking-item {\\r\\n      flex-wrap: wrap;\\r\\n      gap: 0.5rem;\\r\\n    }\\r\\n\\r\\n    .rankings-header {\\r\\n      flex-direction: column;\\r\\n      gap: 1rem;\\r\\n      align-items: stretch;\\r\\n    }\\r\\n  }\\r\\n</style>\\r\\n\\r\\n<div class=\\"rankings-container\\">\\r\\n  <!-- Header -->\\r\\n  <div class=\\"header\\">\\r\\n    <h1>🏆 Category Rankings</h1>\\r\\n    <p>Rank entries within each category based on your judging scores</p>\\r\\n  </div>\\r\\n\\r\\n  <!-- Navigation -->\\r\\n  <div class=\\"nav-buttons\\">\\r\\n    <a href=\\"/judge/competition/{competitionId}\\" class=\\"nav-btn\\">\\r\\n      ⬅️ Back to Judging\\r\\n    </a>\\r\\n    <a href=\\"/judge\\" class=\\"nav-btn\\">\\r\\n      🏠 Judge Portal\\r\\n    </a>\\r\\n  </div>\\r\\n\\r\\n  {#if isLoading}\\r\\n    <div class=\\"loading\\">\\r\\n      <div class=\\"spinner\\"></div>\\r\\n      <p>Loading categories and rankings...</p>\\r\\n    </div>\\r\\n  {:else if error}\\r\\n    <div class=\\"error-state\\">\\r\\n      <h3>Error Loading Data</h3>\\r\\n      <p>{error}</p>\\r\\n      <button class=\\"nav-btn nav-btn-primary\\" on:click={() => window.location.reload()}>\\r\\n        🔄 Retry\\r\\n      </button>\\r\\n    </div>\\r\\n  {:else if categories.length === 0}\\r\\n    <div class=\\"empty-state\\">\\r\\n      <h3>No Categories Found</h3>\\r\\n      <p>No entries have been submitted for this competition yet.</p>\\r\\n    </div>\\r\\n  {:else}\\r\\n    <!-- Categories Selection -->\\r\\n    <div class=\\"categories-section\\">\\r\\n      <h2>Select Category to Rank ({categories.length} categories)</h2>\\r\\n      <div class=\\"categories-grid\\">\\r\\n        {#each categories as category}\\r\\n          <div \\r\\n            class=\\"category-card {selectedCategory?.id === category.id ? 'selected' : ''}\\"\\r\\n            on:click={() => selectCategory(category)}\\r\\n            role=\\"button\\"\\r\\n            tabindex=\\"0\\"\\r\\n          >\\r\\n            <div class=\\"category-name\\">{category.displayName}</div>\\r\\n            <div class=\\"category-stats\\">{category.entryCount} entries</div>\\r\\n          </div>\\r\\n        {/each}\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n    <!-- Rankings Section -->\\r\\n    {#if selectedCategory}\\r\\n      <div class=\\"rankings-section\\">\\r\\n        <div class=\\"rankings-header\\">\\r\\n          <h2>Rankings for {selectedCategory.displayName}</h2>\\r\\n          <button \\r\\n            class=\\"save-btn\\"\\r\\n            on:click={saveRankings}\\r\\n            disabled={isSaving || rankings.length === 0}\\r\\n          >\\r\\n            {isSaving ? 'Saving...' : 'Save Rankings'}\\r\\n          </button>\\r\\n        </div>\\r\\n\\r\\n        {#if validationErrors.length > 0}\\r\\n          <div class=\\"validation-warning\\">\\r\\n            <h4>⚠️ Ranking Restrictions</h4>\\r\\n            {#each validationErrors as error}\\r\\n              <div class=\\"validation-error\\">{error.message}</div>\\r\\n            {/each}\\r\\n          </div>\\r\\n        {/if}\\r\\n\\r\\n        {#if competitionType === 'intraclub'}\\r\\n          <div class=\\"validation-warning\\" style=\\"background: #f0f9ff; border-color: #3b82f6;\\">\\r\\n            <h4>ℹ️ Intraclub Competition Rules</h4>\\r\\n            <div style=\\"color: #1e40af; font-size: 0.875rem;\\">\\r\\n              You cannot rank your own entries in positions 1-3. Your entries are marked with a blue indicator.\\r\\n            </div>\\r\\n          </div>\\r\\n        {/if}\\r\\n\\r\\n        {#if rankings.length === 0}\\r\\n          <div class=\\"empty-state\\">\\r\\n            <h3>No Scored Entries</h3>\\r\\n            <p>You need to score entries in this category before you can rank them.</p>\\r\\n            <a href=\\"/judge/competition/{competitionId}\\" class=\\"nav-btn nav-btn-primary\\">\\r\\n              🏆 Start Judging\\r\\n            </a>\\r\\n          </div>\\r\\n        {:else}\\r\\n          <div class=\\"rankings-list\\">\\r\\n            {#each rankings as ranking, index}\\r\\n              <div class=\\"ranking-item {isOwnEntry(ranking.entry) ? 'own-entry' : ''} {getEntryValidationClass(ranking)}\\">\\r\\n                <div class=\\"rank-position\\">\\r\\n                  {getRankIcon(ranking.rank_position)}\\r\\n                </div>\\r\\n\\r\\n                <div class=\\"entry-info\\">\\r\\n                  <div class=\\"entry-number\\">\\r\\n                    Entry #{ranking.entry.entry_number}\\r\\n                    {#if isOwnEntry(ranking.entry)}\\r\\n                      <span class=\\"own-entry-indicator\\">👤 Your Entry</span>\\r\\n                    {/if}\\r\\n                  </div>\\r\\n                  <div class=\\"entry-details\\">\\r\\n                    <div class=\\"detail-text\\">\\r\\n                      <strong>{getBeerNameDisplay(ranking.entry.beer_name)}</strong>\\r\\n                    </div>\\r\\n                    {#if selectedCategory?.isCustomGroup}\\r\\n                      <div class=\\"detail-text\\">\\r\\n                        Category: {ranking.entry.category_display}\\r\\n                      </div>\\r\\n                    {/if}\\r\\n                  </div>\\r\\n                  \\r\\n                  <div class=\\"score-display\\">\\r\\n                    <span \\r\\n                      class=\\"score-badge\\"\\r\\n                      style=\\"background: {getScoreColor(ranking.entry.total_score)}\\"\\r\\n                    >\\r\\n                      {ranking.entry.total_score}/50\\r\\n                    </span>\\r\\n                    {#if ranking.entry.judge_notes}\\r\\n                      <span class=\\"detail-text\\">📝 Has notes</span>\\r\\n                    {/if}\\r\\n                  </div>\\r\\n                </div>\\r\\n\\r\\n                <div class=\\"ranking-controls\\">\\r\\n                  <button \\r\\n                    class=\\"rank-btn\\"\\r\\n                    on:click={() => moveUp(index)}\\r\\n                    disabled={index === 0}\\r\\n                    title=\\"Move up\\"\\r\\n                  >\\r\\n                    ⬆️\\r\\n                  </button>\\r\\n                  <button \\r\\n                    class=\\"rank-btn\\"\\r\\n                    on:click={() => moveDown(index)}\\r\\n                    disabled={index === rankings.length - 1}\\r\\n                    title=\\"Move down\\"\\r\\n                  >\\r\\n                    ⬇️\\r\\n                  </button>\\r\\n                </div>\\r\\n              </div>\\r\\n            {/each}\\r\\n          </div>\\r\\n        {/if}\\r\\n      </div>\\r\\n    {/if}\\r\\n  {/if}\\r\\n</div>"],"names":[],"mappings":"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"}`
};
const Page = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let competitionId;
  let $userProfile, $$unsubscribe_userProfile;
  let $$unsubscribe_activeSession;
  let $$unsubscribe_isJudging;
  let $page, $$unsubscribe_page;
  $$unsubscribe_userProfile = subscribe(userProfile, (value) => $userProfile = value);
  $$unsubscribe_activeSession = subscribe(activeSession, (value) => value);
  $$unsubscribe_isJudging = subscribe(isJudging, (value) => value);
  $$unsubscribe_page = subscribe(page, (value) => $page = value);
  $$result.css.add(css);
  competitionId = $page.params.id;
  $userProfile?.role === "competition_director";
  $$unsubscribe_userProfile();
  $$unsubscribe_activeSession();
  $$unsubscribe_isJudging();
  $$unsubscribe_page();
  return `   <div class="rankings-container svelte-zjv6iq"> <div class="header svelte-zjv6iq" data-svelte-h="svelte-k61t7l"><h1 class="svelte-zjv6iq">🏆 Category Rankings</h1> <p class="svelte-zjv6iq">Rank entries within each category based on your judging scores</p></div>  <div class="nav-buttons svelte-zjv6iq"><a href="${"/judge/competition/" + escape(competitionId, true)}" class="nav-btn svelte-zjv6iq">⬅️ Back to Judging</a> <a href="/judge" class="nav-btn svelte-zjv6iq" data-svelte-h="svelte-wz4wfi">🏠 Judge Portal</a></div> ${`<div class="loading svelte-zjv6iq" data-svelte-h="svelte-gsq85"><div class="spinner svelte-zjv6iq"></div> <p>Loading categories and rankings...</p></div>`}</div>`;
});

export { Page as default };
//# sourceMappingURL=_page.svelte-neDEAYs0.js.map

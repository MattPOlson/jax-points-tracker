import { c as create_ssr_component, a as subscribe } from './ssr-DUmth7AN.js';
import { g as goto } from './client-C3KLrhj1.js';
import { p as page } from './stores-CjFwPvAb.js';
import { u as userProfile } from './userProfile-BJElsKeo.js';
import './supabaseClient-D_8i9Ohq.js';
import './exports-DKuYoYKl.js';
import './index-D3y4l4qv.js';
import './false-CRHihH2U.js';
import '@supabase/supabase-js';

const css = {
  code: ".dashboard-container.svelte-d08yvj.svelte-d08yvj{max-width:1400px;margin:0 auto;padding:1rem}.header.svelte-d08yvj.svelte-d08yvj{background:white;padding:1.5rem;border-radius:12px;box-shadow:0 2px 8px rgba(0, 0, 0, 0.1);margin-bottom:2rem}.header.svelte-d08yvj h1.svelte-d08yvj{color:#ff3e00;font-size:2rem;font-weight:100;margin:0 0 0.5rem;text-transform:uppercase}.header-info.svelte-d08yvj.svelte-d08yvj{display:grid;grid-template-columns:repeat(auto-fit, minmax(200px, 1fr));gap:1rem;margin-top:1rem}.info-item.svelte-d08yvj.svelte-d08yvj{display:flex;flex-direction:column}.info-label.svelte-d08yvj.svelte-d08yvj{font-size:0.875rem;color:#666;margin-bottom:0.25rem}.info-value.svelte-d08yvj.svelte-d08yvj{font-size:1.1rem;font-weight:600;color:#333}.stats-grid.svelte-d08yvj.svelte-d08yvj{display:grid;grid-template-columns:repeat(auto-fit, minmax(200px, 1fr));gap:1rem;margin-bottom:2rem}.stat-card.svelte-d08yvj.svelte-d08yvj{background:white;padding:1.5rem;border-radius:12px;box-shadow:0 2px 8px rgba(0, 0, 0, 0.1);text-align:center}.stat-value.svelte-d08yvj.svelte-d08yvj{font-size:2.5rem;font-weight:100;margin:0;color:#ff3e00}.stat-label.svelte-d08yvj.svelte-d08yvj{font-size:0.875rem;color:#666;margin:0.5rem 0 0}.stat-description.svelte-d08yvj.svelte-d08yvj{font-size:0.75rem;color:#999;margin:0.25rem 0 0}.controls.svelte-d08yvj.svelte-d08yvj{display:flex;gap:1rem;margin-bottom:2rem;flex-wrap:wrap;align-items:center}.view-tabs.svelte-d08yvj.svelte-d08yvj{display:flex;gap:0.5rem}.tab-btn.svelte-d08yvj.svelte-d08yvj{padding:0.75rem 1.5rem;border:none;border-radius:8px;background:#e5e7eb;color:#374151;cursor:pointer;font-weight:500;transition:all 0.2s ease}.tab-btn.active.svelte-d08yvj.svelte-d08yvj{background:#ff3e00;color:white}.tab-btn.svelte-d08yvj.svelte-d08yvj:hover:not(.active){background:#d1d5db}.action-btn.svelte-d08yvj.svelte-d08yvj{padding:0.75rem 1.5rem;border:none;border-radius:8px;cursor:pointer;font-weight:500;transition:all 0.2s ease;display:flex;align-items:center;gap:0.5rem}.action-btn.svelte-d08yvj.svelte-d08yvj:disabled{opacity:0.5;cursor:not-allowed}.btn-success.svelte-d08yvj.svelte-d08yvj{background:linear-gradient(135deg, #059669 0%, #047857 100%);color:white}.btn-success.svelte-d08yvj.svelte-d08yvj:hover:not(:disabled){background:linear-gradient(135deg, #047857 0%, #065f46 100%)}.btn-primary.svelte-d08yvj.svelte-d08yvj{background:linear-gradient(135deg, #ff3e00 0%, #e63600 100%);color:white}.btn-primary.svelte-d08yvj.svelte-d08yvj:hover:not(:disabled){background:linear-gradient(135deg, #e63600 0%, #cc2900 100%)}.btn-secondary.svelte-d08yvj.svelte-d08yvj{background:#6b7280;color:white}.btn-secondary.svelte-d08yvj.svelte-d08yvj:hover:not(:disabled){background:#4b5563}.content-section.svelte-d08yvj.svelte-d08yvj{background:white;border-radius:12px;box-shadow:0 2px 8px rgba(0, 0, 0, 0.1);overflow:hidden}.section-header.svelte-d08yvj.svelte-d08yvj{padding:1.5rem;border-bottom:1px solid #e5e7eb;display:flex;justify-content:space-between;align-items:center}.section-title.svelte-d08yvj.svelte-d08yvj{font-size:1.25rem;font-weight:600;color:#333;margin:0}.section-content.svelte-d08yvj.svelte-d08yvj{padding:1.5rem}.data-table.svelte-d08yvj.svelte-d08yvj{width:100%;border-collapse:collapse}.data-table.svelte-d08yvj th.svelte-d08yvj{background:#f9fafb;padding:1rem;text-align:left;font-weight:600;color:#374151;border-bottom:2px solid #e5e7eb}.data-table.svelte-d08yvj td.svelte-d08yvj{padding:1rem;border-bottom:1px solid #e5e7eb;vertical-align:top}.data-table.svelte-d08yvj tr.svelte-d08yvj:hover{background:#f9fafb}.progress-bar.svelte-d08yvj.svelte-d08yvj{background:#e5e7eb;border-radius:8px;height:8px;overflow:hidden}.progress-fill.svelte-d08yvj.svelte-d08yvj{background:linear-gradient(90deg, #ff3e00, #059669);height:100%;border-radius:8px;transition:width 0.3s ease}.progress-text.svelte-d08yvj.svelte-d08yvj{font-size:0.875rem;color:#666;margin-top:0.25rem}.score-badge.svelte-d08yvj.svelte-d08yvj{display:inline-block;padding:0.25rem 0.5rem;border-radius:4px;font-size:0.875rem;font-weight:500;color:white}.loading.svelte-d08yvj.svelte-d08yvj{text-align:center;padding:3rem;color:#666}.spinner.svelte-d08yvj.svelte-d08yvj{display:inline-block;width:40px;height:40px;border:4px solid #f3f3f3;border-top:4px solid #ff3e00;border-radius:50%;animation:svelte-d08yvj-spin 1s linear infinite;margin-bottom:1rem}@keyframes svelte-d08yvj-spin{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}.mobile-cards.svelte-d08yvj.svelte-d08yvj{display:none}.mobile-card.svelte-d08yvj.svelte-d08yvj{background:white;border-radius:8px;padding:1.5rem;margin-bottom:1rem;box-shadow:0 2px 8px rgba(0, 0, 0, 0.1);border-left:4px solid #ff3e00}.mobile-card-header.svelte-d08yvj.svelte-d08yvj{display:flex;justify-content:space-between;align-items:flex-start;margin-bottom:1rem;flex-wrap:wrap;gap:0.5rem}.mobile-card-title.svelte-d08yvj.svelte-d08yvj{font-size:1.125rem;font-weight:600;color:#333;margin:0}.mobile-card-subtitle.svelte-d08yvj.svelte-d08yvj{font-size:0.875rem;color:#666;margin:0.25rem 0 0}.mobile-card-badge.svelte-d08yvj.svelte-d08yvj{padding:0.25rem 0.5rem;border-radius:4px;font-size:0.75rem;font-weight:500;flex-shrink:0}.mobile-card-details.svelte-d08yvj.svelte-d08yvj{display:grid;grid-template-columns:1fr 1fr;gap:1rem;margin-bottom:1rem;padding:1rem;background:#f9fafb;border-radius:6px}.mobile-detail-item.svelte-d08yvj.svelte-d08yvj{display:flex;flex-direction:column}.mobile-detail-label.svelte-d08yvj.svelte-d08yvj{font-size:0.75rem;color:#6b7280;margin-bottom:0.25rem;text-transform:uppercase;font-weight:600;letter-spacing:0.5px}.mobile-detail-value.svelte-d08yvj.svelte-d08yvj{font-size:1rem;color:#333;font-weight:600}.mobile-progress.svelte-d08yvj.svelte-d08yvj{margin-top:1rem}.mobile-progress-label.svelte-d08yvj.svelte-d08yvj{display:flex;justify-content:space-between;align-items:center;margin-bottom:0.5rem;font-size:0.875rem;color:#374151}.mobile-progress-bar.svelte-d08yvj.svelte-d08yvj{background:#e5e7eb;border-radius:8px;height:8px;overflow:hidden}.mobile-progress-fill.svelte-d08yvj.svelte-d08yvj{background:linear-gradient(90deg, #ff3e00, #059669);height:100%;border-radius:8px;transition:width 0.3s ease}.mobile-ranking-item.svelte-d08yvj.svelte-d08yvj{display:flex;align-items:center;gap:1rem;padding:1rem;background:#f9fafb;border-radius:6px;margin-bottom:0.5rem;border:1px solid #e5e7eb}.mobile-ranking-position.svelte-d08yvj.svelte-d08yvj{font-size:1.5rem;font-weight:600;min-width:2rem;text-align:center}.mobile-ranking-entry.svelte-d08yvj.svelte-d08yvj{flex:1;min-width:0}.mobile-ranking-entry-number.svelte-d08yvj.svelte-d08yvj{font-weight:600;color:#ff3e00;font-size:1.1rem}.mobile-ranking-beer-name.svelte-d08yvj.svelte-d08yvj{color:#666;font-size:0.9rem;margin-top:0.25rem}.mobile-ranking-points.svelte-d08yvj.svelte-d08yvj{font-size:1.25rem;font-weight:700;color:#059669;text-align:right;min-width:fit-content}@media(max-width: 768px){.dashboard-container.svelte-d08yvj.svelte-d08yvj{padding:0.5rem}.header.svelte-d08yvj h1.svelte-d08yvj{font-size:1.5rem}.header-info.svelte-d08yvj.svelte-d08yvj{grid-template-columns:1fr}.stats-grid.svelte-d08yvj.svelte-d08yvj{grid-template-columns:repeat(2, 1fr)}.controls.svelte-d08yvj.svelte-d08yvj{flex-direction:column;align-items:stretch}.view-tabs.svelte-d08yvj.svelte-d08yvj{width:100%;justify-content:space-between}.tab-btn.svelte-d08yvj.svelte-d08yvj{flex:1;text-align:center}.data-table.svelte-d08yvj.svelte-d08yvj{display:none}.mobile-cards.svelte-d08yvj.svelte-d08yvj{display:block}.mobile-card-details.svelte-d08yvj.svelte-d08yvj{grid-template-columns:1fr;gap:0.75rem}}@media(max-width: 480px){.mobile-card-header.svelte-d08yvj.svelte-d08yvj{flex-direction:column;align-items:flex-start;gap:1rem}.stats-grid.svelte-d08yvj.svelte-d08yvj{grid-template-columns:1fr}}@media(min-width: 769px){.mobile-cards.svelte-d08yvj.svelte-d08yvj{display:none}.data-table.svelte-d08yvj.svelte-d08yvj{display:table}}",
  map: `{"version":3,"file":"+page.svelte","sources":["+page.svelte"],"sourcesContent":["<!-- Competition Director Judging Dashboard -->\\r\\n<script>\\r\\n  import { onMount } from 'svelte';\\r\\n  import { goto } from '$app/navigation';\\r\\n  import { page } from '$app/stores';\\r\\n  import { userProfile } from '$lib/stores/userProfile';\\r\\n  import { supabase } from '$lib/supabaseClient';\\r\\n\\r\\n  // Check officer status\\r\\n  $: if ($userProfile && !$userProfile.is_officer) {\\r\\n    goto('/');\\r\\n  }\\r\\n\\r\\n  // Get competition ID from URL\\r\\n  $: competitionId = $page.params.id;\\r\\n\\r\\n  let competition = null;\\r\\n  let judges = [];\\r\\n  let entries = [];\\r\\n  let judgingSessions = [];\\r\\n  let rankings = [];\\r\\n  let categories = [];\\r\\n  let rankingGroups = [];\\r\\n  let selectedView = 'overview'; // overview, entries, judges, rankings\\r\\n  let selectedCategory = 'all';\\r\\n  let isLoading = true;\\r\\n  let isProcessing = false;\\r\\n\\r\\n  let judgingStats = {\\r\\n    totalEntries: 0,\\r\\n    totalJudges: 0,\\r\\n    completedSessions: 0,\\r\\n    averageScore: 0,\\r\\n    completionPercentage: 0\\r\\n  };\\r\\n\\r\\n  onMount(() => {\\r\\n    loadDashboardData();\\r\\n  });\\r\\n\\r\\n  async function loadDashboardData() {\\r\\n    isLoading = true;\\r\\n\\r\\n    try {\\r\\n      // Load competition details\\r\\n      const { data: compData, error: compError } = await supabase\\r\\n        .from('competitions')\\r\\n        .select('*')\\r\\n        .eq('id', competitionId)\\r\\n        .single();\\r\\n\\r\\n      if (compError) throw compError;\\r\\n      competition = compData;\\r\\n\\r\\n      // Load judges\\r\\n      const { data: judgesData, error: judgesError } = await supabase\\r\\n        .from('competition_judges')\\r\\n        .select(\`\\r\\n          *,\\r\\n          judge:members!competition_judges_judge_id_fkey(id, name, email, phone)\\r\\n        \`)\\r\\n        .eq('competition_id', competitionId)\\r\\n        .eq('active', true);\\r\\n\\r\\n      if (judgesError) throw judgesError;\\r\\n      judges = judgesData || [];\\r\\n\\r\\n      // Load entries with member and category details\\r\\n      const { data: entriesData, error: entriesError } = await supabase\\r\\n        .from('competition_entries')\\r\\n        .select(\`\\r\\n          *,\\r\\n          members!competition_entries_member_id_fkey(id, name, email),\\r\\n          bjcp_categories(id, category_number, subcategory_letter, category_name, subcategory_name)\\r\\n        \`)\\r\\n        .eq('competition_id', competitionId)\\r\\n        .order('entry_number');\\r\\n\\r\\n      if (entriesError) throw entriesError;\\r\\n      entries = entriesData || [];\\r\\n\\r\\n      // Load judging sessions\\r\\n      const { data: sessionsData, error: sessionsError } = await supabase\\r\\n        .from('competition_judging_sessions')\\r\\n        .select(\`\\r\\n          *,\\r\\n          entry:competition_entries!inner(id, entry_number, beer_name),\\r\\n          judge:members!competition_judging_sessions_judge_id_fkey(id, name)\\r\\n        \`)\\r\\n        .eq('competition_id', competitionId);\\r\\n\\r\\n      if (sessionsError) {\\r\\n        console.warn('No judging sessions found:', sessionsError);\\r\\n        judgingSessions = [];\\r\\n      } else {\\r\\n        judgingSessions = sessionsData || [];\\r\\n      }\\r\\n\\r\\n      // Load rankings\\r\\n      const { data: rankingsData, error: rankingsError } = await supabase\\r\\n        .from('competition_rankings')\\r\\n        .select(\`\\r\\n          *,\\r\\n          entry:competition_entries!inner(id, entry_number, beer_name),\\r\\n          judge:members!competition_rankings_judge_id_fkey(id, name),\\r\\n          category:bjcp_categories(category_name, category_number, subcategory_letter),\\r\\n          ranking_group:competition_ranking_groups(id, group_name, group_description)\\r\\n        \`)\\r\\n        .eq('competition_id', competitionId)\\r\\n        .order('bjcp_category_id')\\r\\n        .order('rank_position');\\r\\n\\r\\n      if (rankingsError) {\\r\\n        console.warn('No rankings found:', rankingsError);\\r\\n        rankings = [];\\r\\n      } else {\\r\\n        rankings = rankingsData || [];\\r\\n      }\\r\\n\\r\\n      // Load ranking groups for custom category system\\r\\n      const { data: groupsData, error: groupsError } = await supabase\\r\\n        .from('competition_ranking_groups')\\r\\n        .select('*')\\r\\n        .eq('competition_id', competitionId)\\r\\n        .order('group_order');\\r\\n\\r\\n      if (groupsError) {\\r\\n        console.warn('No ranking groups found:', groupsError);\\r\\n        rankingGroups = [];\\r\\n      } else {\\r\\n        rankingGroups = groupsData || [];\\r\\n      }\\r\\n\\r\\n      // Extract categories\\r\\n      const categoryMap = new Map();\\r\\n      entries.forEach(entry => {\\r\\n        if (entry.bjcp_categories) {\\r\\n          const cat = entry.bjcp_categories;\\r\\n          categoryMap.set(cat.id, {\\r\\n            id: cat.id,\\r\\n            name: \`\${cat.category_number}\${cat.subcategory_letter || ''} - \${cat.category_name}\`,\\r\\n            entryCount: (categoryMap.get(cat.id)?.entryCount || 0) + 1\\r\\n          });\\r\\n        }\\r\\n      });\\r\\n      categories = Array.from(categoryMap.values());\\r\\n\\r\\n      // Calculate stats\\r\\n      calculateStats();\\r\\n\\r\\n    } catch (err) {\\r\\n      console.error('Error loading dashboard data:', err);\\r\\n      alert('Failed to load judging dashboard');\\r\\n      goto('/officers/manage-competitions');\\r\\n    } finally {\\r\\n      isLoading = false;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function calculateStats() {\\r\\n    judgingStats.totalEntries = entries.length;\\r\\n    judgingStats.totalJudges = judges.length;\\r\\n    judgingStats.completedSessions = judgingSessions.filter(s => s.total_score > 0).length;\\r\\n    \\r\\n    const scoresWithValues = judgingSessions.filter(s => s.total_score > 0);\\r\\n    judgingStats.averageScore = scoresWithValues.length > 0 \\r\\n      ? Math.round(scoresWithValues.reduce((sum, s) => sum + s.total_score, 0) / scoresWithValues.length * 10) / 10\\r\\n      : 0;\\r\\n    \\r\\n    const expectedSessions = entries.length * judges.length;\\r\\n    judgingStats.completionPercentage = expectedSessions > 0 \\r\\n      ? Math.round((judgingStats.completedSessions / expectedSessions) * 100)\\r\\n      : 0;\\r\\n  }\\r\\n\\r\\n  function getJudgeProgress(judgeId) {\\r\\n    const judgesSessions = judgingSessions.filter(s => s.judge_id === judgeId);\\r\\n    const completedSessions = judgesSessions.filter(s => s.total_score > 0);\\r\\n    return {\\r\\n      total: entries.length,\\r\\n      completed: completedSessions.length,\\r\\n      percentage: entries.length > 0 ? Math.round((completedSessions.length / entries.length) * 100) : 0\\r\\n    };\\r\\n  }\\r\\n\\r\\n  function getEntryScores(entryId) {\\r\\n    const entryScores = judgingSessions.filter(s => s.entry_id === entryId && s.total_score > 0);\\r\\n    if (entryScores.length === 0) return { count: 0, average: 0, scores: [] };\\r\\n\\r\\n    const scores = entryScores.map(s => s.total_score);\\r\\n    const average = Math.round(scores.reduce((sum, score) => sum + score, 0) / scores.length * 10) / 10;\\r\\n\\r\\n    return {\\r\\n      count: entryScores.length,\\r\\n      average,\\r\\n      scores,\\r\\n      sessions: entryScores\\r\\n    };\\r\\n  }\\r\\n\\r\\n  function getCategoryRankings(categoryId) {\\r\\n    return rankings.filter(r => r.bjcp_category_id === categoryId);\\r\\n  }\\r\\n\\r\\n  function getGroupRankings(groupId) {\\r\\n    return rankings.filter(r => r.ranking_group_id === groupId);\\r\\n  }\\r\\n\\r\\n  function getGroupEntryCount(group) {\\r\\n    if (!group.bjcp_category_ids) return 0;\\r\\n    let categoryIds;\\r\\n    try {\\r\\n      categoryIds = Array.isArray(group.bjcp_category_ids) \\r\\n        ? group.bjcp_category_ids \\r\\n        : JSON.parse(group.bjcp_category_ids);\\r\\n    } catch (e) {\\r\\n      console.warn('Failed to parse bjcp_category_ids:', group.bjcp_category_ids);\\r\\n      return 0;\\r\\n    }\\r\\n    return entries.filter(entry => categoryIds.includes(entry.bjcp_category_id)).length;\\r\\n  }\\r\\n\\r\\n  function hasMultipleJudges(rankings) {\\r\\n    const judgeIds = new Set(rankings.map(r => r.judge_id));\\r\\n    return judgeIds.size > 1;\\r\\n  }\\r\\n\\r\\n  function getEntryPointsSummary(entryId, categoryId, groupId = null) {\\r\\n    return compileMultiJudgeRankings(entryId, categoryId, groupId);\\r\\n  }\\r\\n\\r\\n  function getUniqueEntriesFromRankings(rankings) {\\r\\n    const entryMap = new Map();\\r\\n    rankings.forEach(ranking => {\\r\\n      if (ranking.entry_id && !entryMap.has(ranking.entry_id)) {\\r\\n        entryMap.set(ranking.entry_id, ranking.entry);\\r\\n      }\\r\\n    });\\r\\n    return Array.from(entryMap.values());\\r\\n  }\\r\\n\\r\\n  async function finalizeResults() {\\r\\n    if (!confirm('Are you sure you want to finalize all results? This will aggregate scores and create final standings.')) {\\r\\n      return;\\r\\n    }\\r\\n\\r\\n    isProcessing = true;\\r\\n    try {\\r\\n      await processAndFinalizeResults();\\r\\n      showToast('Results finalized successfully!', 'success');\\r\\n      await loadDashboardData(); // Refresh data\\r\\n    } catch (err) {\\r\\n      console.error('Error finalizing results:', err);\\r\\n      showToast('Failed to finalize results', 'error');\\r\\n    } finally {\\r\\n      isProcessing = false;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function getPointsForRanking(rankPosition) {\\r\\n    // Point system: 1st=3pts, 2nd=2pts, 3rd=1pt, others=0pts\\r\\n    switch (rankPosition) {\\r\\n      case 1: return 3;\\r\\n      case 2: return 2;\\r\\n      case 3: return 1;\\r\\n      default: return 0;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function compileMultiJudgeRankings(entryId, categoryId, groupId = null) {\\r\\n    // Get all rankings for this entry from all judges\\r\\n    let entryRankings = [];\\r\\n    \\r\\n    if (groupId) {\\r\\n      // For custom ranking groups\\r\\n      entryRankings = rankings.filter(r => \\r\\n        r.entry_id === entryId && r.ranking_group_id === groupId\\r\\n      );\\r\\n    } else {\\r\\n      // For individual categories\\r\\n      entryRankings = rankings.filter(r => \\r\\n        r.entry_id === entryId && r.bjcp_category_id === categoryId\\r\\n      );\\r\\n    }\\r\\n\\r\\n    // Calculate total points from all judges\\r\\n    const totalPoints = entryRankings.reduce((sum, ranking) => {\\r\\n      return sum + getPointsForRanking(ranking.rank_position);\\r\\n    }, 0);\\r\\n\\r\\n    return {\\r\\n      totalPoints,\\r\\n      judgeCount: entryRankings.length,\\r\\n      rankings: entryRankings\\r\\n    };\\r\\n  }\\r\\n\\r\\n  async function processAndFinalizeResults() {\\r\\n    // This function aggregates all judging data and creates final results using multi-judge point compilation\\r\\n    \\r\\n    const finalResults = [];\\r\\n\\r\\n    // Group entries by category or ranking group for proper compilation\\r\\n    const entriesByGroup = new Map();\\r\\n    \\r\\n    for (const entry of entries) {\\r\\n      const entryScores = getEntryScores(entry.id);\\r\\n      \\r\\n      if (entryScores.count > 0) {\\r\\n        // Determine the grouping key (category or custom group)\\r\\n        let groupKey = entry.bjcp_category_id;\\r\\n        let isCustomGroup = false;\\r\\n        \\r\\n        // Check if entry belongs to a custom ranking group\\r\\n        for (const group of rankingGroups) {\\r\\n          let categoryIds;\\r\\n          try {\\r\\n            categoryIds = Array.isArray(group.bjcp_category_ids) \\r\\n              ? group.bjcp_category_ids \\r\\n              : JSON.parse(group.bjcp_category_ids);\\r\\n          } catch (e) {\\r\\n            console.warn('Failed to parse bjcp_category_ids for group:', group.id);\\r\\n            continue;\\r\\n          }\\r\\n          \\r\\n          if (categoryIds.includes(entry.bjcp_category_id)) {\\r\\n            groupKey = \`group_\${group.id}\`;\\r\\n            isCustomGroup = true;\\r\\n            break;\\r\\n          }\\r\\n        }\\r\\n\\r\\n        if (!entriesByGroup.has(groupKey)) {\\r\\n          entriesByGroup.set(groupKey, []);\\r\\n        }\\r\\n        \\r\\n        entriesByGroup.get(groupKey).push({\\r\\n          ...entry,\\r\\n          entryScores,\\r\\n          isCustomGroup,\\r\\n          groupId: isCustomGroup ? groupKey.split('_')[1] : null\\r\\n        });\\r\\n      }\\r\\n    }\\r\\n\\r\\n    // Process each group separately to determine rankings\\r\\n    for (const [groupKey, groupEntries] of entriesByGroup) {\\r\\n      // Calculate points for each entry in this group\\r\\n      const entriesWithPoints = groupEntries.map(entry => {\\r\\n        const compilation = compileMultiJudgeRankings(\\r\\n          entry.id, \\r\\n          entry.bjcp_category_id, \\r\\n          entry.groupId\\r\\n        );\\r\\n        \\r\\n        return {\\r\\n          ...entry,\\r\\n          compilation\\r\\n        };\\r\\n      });\\r\\n\\r\\n      // Sort by total points (highest first), then by average score as tiebreaker\\r\\n      entriesWithPoints.sort((a, b) => {\\r\\n        if (b.compilation.totalPoints !== a.compilation.totalPoints) {\\r\\n          return b.compilation.totalPoints - a.compilation.totalPoints;\\r\\n        }\\r\\n        // Tiebreaker: use average score\\r\\n        return b.entryScores.average - a.entryScores.average;\\r\\n      });\\r\\n\\r\\n      // Assign placements based on final ranking\\r\\n      entriesWithPoints.forEach((entry, index) => {\\r\\n        // Calculate final score (average of all judges)\\r\\n        const finalScore = entry.entryScores.average;\\r\\n        \\r\\n        // Get any judge notes\\r\\n        const allNotes = entry.entryScores.sessions\\r\\n          .filter(s => s.judge_notes)\\r\\n          .map(s => s.judge_notes)\\r\\n          .join('\\\\n\\\\n---\\\\n\\\\n');\\r\\n\\r\\n        // Determine placement based on compiled ranking position\\r\\n        let placement = null;\\r\\n        if (entry.compilation.totalPoints > 0) {\\r\\n          const rankPosition = index + 1;\\r\\n          if (rankPosition === 1) placement = '1';\\r\\n          else if (rankPosition === 2) placement = '2';\\r\\n          else if (rankPosition === 3) placement = '3';\\r\\n          else if (rankPosition <= 5) placement = 'HM'; // Honorable mention for top 5\\r\\n        }\\r\\n\\r\\n        finalResults.push({\\r\\n          competition_id: competitionId,\\r\\n          entry_id: entry.id,\\r\\n          score: Math.round(finalScore),\\r\\n          placement: placement,\\r\\n          judge_notes: allNotes || null,\\r\\n          updated_at: new Date().toISOString()\\r\\n        });\\r\\n      });\\r\\n    }\\r\\n\\r\\n    // Upsert results into competition_results table\\r\\n    for (const result of finalResults) {\\r\\n      // Check if result exists\\r\\n      const { data: existing } = await supabase\\r\\n        .from('competition_results')\\r\\n        .select('id')\\r\\n        .eq('competition_id', competitionId)\\r\\n        .eq('entry_id', result.entry_id)\\r\\n        .single();\\r\\n\\r\\n      if (existing) {\\r\\n        // Update existing\\r\\n        const { error } = await supabase\\r\\n          .from('competition_results')\\r\\n          .update(result)\\r\\n          .eq('id', existing.id);\\r\\n        if (error) throw error;\\r\\n      } else {\\r\\n        // Insert new\\r\\n        const { error } = await supabase\\r\\n          .from('competition_results')\\r\\n          .insert([result]);\\r\\n        if (error) throw error;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  async function publishResults() {\\r\\n    if (!confirm('Are you sure you want to publish results? This will make them visible to all members.')) {\\r\\n      return;\\r\\n    }\\r\\n\\r\\n    try {\\r\\n      const { error } = await supabase\\r\\n        .from('competitions')\\r\\n        .update({ \\r\\n          results_published: true,\\r\\n          updated_at: new Date().toISOString()\\r\\n        })\\r\\n        .eq('id', competitionId);\\r\\n\\r\\n      if (error) throw error;\\r\\n\\r\\n      competition.results_published = true;\\r\\n      showToast('Results published successfully!', 'success');\\r\\n\\r\\n    } catch (err) {\\r\\n      console.error('Error publishing results:', err);\\r\\n      showToast('Failed to publish results', 'error');\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function showToast(message, type = 'info') {\\r\\n    const toast = document.createElement('div');\\r\\n    toast.textContent = message;\\r\\n    toast.style.cssText = \`\\r\\n      position: fixed;\\r\\n      top: 20px;\\r\\n      right: 20px;\\r\\n      padding: 1rem 1.5rem;\\r\\n      border-radius: 6px;\\r\\n      color: white;\\r\\n      font-weight: 500;\\r\\n      z-index: 1000;\\r\\n      background: \${type === 'success' ? '#059669' : type === 'error' ? '#dc2626' : '#6b7280'};\\r\\n      box-shadow: 0 4px 12px rgba(0,0,0,0.15);\\r\\n    \`;\\r\\n\\r\\n    document.body.appendChild(toast);\\r\\n    setTimeout(() => document.body.removeChild(toast), 3000);\\r\\n  }\\r\\n\\r\\n  function formatDate(dateString) {\\r\\n    return new Date(dateString).toLocaleDateString('en-US', {\\r\\n      month: 'short',\\r\\n      day: 'numeric',\\r\\n      year: 'numeric',\\r\\n      hour: '2-digit',\\r\\n      minute: '2-digit'\\r\\n    });\\r\\n  }\\r\\n\\r\\n  function getScoreColor(score) {\\r\\n    if (score >= 45) return '#059669'; // Excellent\\r\\n    if (score >= 38) return '#0891b2'; // Very Good  \\r\\n    if (score >= 30) return '#eab308'; // Good\\r\\n    if (score >= 21) return '#f59e0b'; // Fair\\r\\n    return '#dc2626'; // Poor\\r\\n  }\\r\\n<\/script>\\r\\n\\r\\n<style>\\r\\n  .dashboard-container {\\r\\n    max-width: 1400px;\\r\\n    margin: 0 auto;\\r\\n    padding: 1rem;\\r\\n  }\\r\\n\\r\\n  /* Header */\\r\\n  .header {\\r\\n    background: white;\\r\\n    padding: 1.5rem;\\r\\n    border-radius: 12px;\\r\\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\\r\\n    margin-bottom: 2rem;\\r\\n  }\\r\\n\\r\\n  .header h1 {\\r\\n    color: #ff3e00;\\r\\n    font-size: 2rem;\\r\\n    font-weight: 100;\\r\\n    margin: 0 0 0.5rem;\\r\\n    text-transform: uppercase;\\r\\n  }\\r\\n\\r\\n  .header-info {\\r\\n    display: grid;\\r\\n    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\\r\\n    gap: 1rem;\\r\\n    margin-top: 1rem;\\r\\n  }\\r\\n\\r\\n  .info-item {\\r\\n    display: flex;\\r\\n    flex-direction: column;\\r\\n  }\\r\\n\\r\\n  .info-label {\\r\\n    font-size: 0.875rem;\\r\\n    color: #666;\\r\\n    margin-bottom: 0.25rem;\\r\\n  }\\r\\n\\r\\n  .info-value {\\r\\n    font-size: 1.1rem;\\r\\n    font-weight: 600;\\r\\n    color: #333;\\r\\n  }\\r\\n\\r\\n  /* Stats Cards */\\r\\n  .stats-grid {\\r\\n    display: grid;\\r\\n    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\\r\\n    gap: 1rem;\\r\\n    margin-bottom: 2rem;\\r\\n  }\\r\\n\\r\\n  .stat-card {\\r\\n    background: white;\\r\\n    padding: 1.5rem;\\r\\n    border-radius: 12px;\\r\\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\\r\\n    text-align: center;\\r\\n  }\\r\\n\\r\\n  .stat-value {\\r\\n    font-size: 2.5rem;\\r\\n    font-weight: 100;\\r\\n    margin: 0;\\r\\n    color: #ff3e00;\\r\\n  }\\r\\n\\r\\n  .stat-label {\\r\\n    font-size: 0.875rem;\\r\\n    color: #666;\\r\\n    margin: 0.5rem 0 0;\\r\\n  }\\r\\n\\r\\n  .stat-description {\\r\\n    font-size: 0.75rem;\\r\\n    color: #999;\\r\\n    margin: 0.25rem 0 0;\\r\\n  }\\r\\n\\r\\n  /* Controls */\\r\\n  .controls {\\r\\n    display: flex;\\r\\n    gap: 1rem;\\r\\n    margin-bottom: 2rem;\\r\\n    flex-wrap: wrap;\\r\\n    align-items: center;\\r\\n  }\\r\\n\\r\\n  .view-tabs {\\r\\n    display: flex;\\r\\n    gap: 0.5rem;\\r\\n  }\\r\\n\\r\\n  .tab-btn {\\r\\n    padding: 0.75rem 1.5rem;\\r\\n    border: none;\\r\\n    border-radius: 8px;\\r\\n    background: #e5e7eb;\\r\\n    color: #374151;\\r\\n    cursor: pointer;\\r\\n    font-weight: 500;\\r\\n    transition: all 0.2s ease;\\r\\n  }\\r\\n\\r\\n  .tab-btn.active {\\r\\n    background: #ff3e00;\\r\\n    color: white;\\r\\n  }\\r\\n\\r\\n  .tab-btn:hover:not(.active) {\\r\\n    background: #d1d5db;\\r\\n  }\\r\\n\\r\\n  .action-btn {\\r\\n    padding: 0.75rem 1.5rem;\\r\\n    border: none;\\r\\n    border-radius: 8px;\\r\\n    cursor: pointer;\\r\\n    font-weight: 500;\\r\\n    transition: all 0.2s ease;\\r\\n    display: flex;\\r\\n    align-items: center;\\r\\n    gap: 0.5rem;\\r\\n  }\\r\\n\\r\\n  .action-btn:disabled {\\r\\n    opacity: 0.5;\\r\\n    cursor: not-allowed;\\r\\n  }\\r\\n\\r\\n  .btn-success {\\r\\n    background: linear-gradient(135deg, #059669 0%, #047857 100%);\\r\\n    color: white;\\r\\n  }\\r\\n\\r\\n  .btn-success:hover:not(:disabled) {\\r\\n    background: linear-gradient(135deg, #047857 0%, #065f46 100%);\\r\\n  }\\r\\n\\r\\n  .btn-primary {\\r\\n    background: linear-gradient(135deg, #ff3e00 0%, #e63600 100%);\\r\\n    color: white;\\r\\n  }\\r\\n\\r\\n  .btn-primary:hover:not(:disabled) {\\r\\n    background: linear-gradient(135deg, #e63600 0%, #cc2900 100%);\\r\\n  }\\r\\n\\r\\n  .btn-secondary {\\r\\n    background: #6b7280;\\r\\n    color: white;\\r\\n  }\\r\\n\\r\\n  .btn-secondary:hover:not(:disabled) {\\r\\n    background: #4b5563;\\r\\n  }\\r\\n\\r\\n  /* Content Sections */\\r\\n  .content-section {\\r\\n    background: white;\\r\\n    border-radius: 12px;\\r\\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\\r\\n    overflow: hidden;\\r\\n  }\\r\\n\\r\\n  .section-header {\\r\\n    padding: 1.5rem;\\r\\n    border-bottom: 1px solid #e5e7eb;\\r\\n    display: flex;\\r\\n    justify-content: space-between;\\r\\n    align-items: center;\\r\\n  }\\r\\n\\r\\n  .section-title {\\r\\n    font-size: 1.25rem;\\r\\n    font-weight: 600;\\r\\n    color: #333;\\r\\n    margin: 0;\\r\\n  }\\r\\n\\r\\n  .section-content {\\r\\n    padding: 1.5rem;\\r\\n  }\\r\\n\\r\\n  /* Tables */\\r\\n  .data-table {\\r\\n    width: 100%;\\r\\n    border-collapse: collapse;\\r\\n  }\\r\\n\\r\\n  .data-table th {\\r\\n    background: #f9fafb;\\r\\n    padding: 1rem;\\r\\n    text-align: left;\\r\\n    font-weight: 600;\\r\\n    color: #374151;\\r\\n    border-bottom: 2px solid #e5e7eb;\\r\\n  }\\r\\n\\r\\n  .data-table td {\\r\\n    padding: 1rem;\\r\\n    border-bottom: 1px solid #e5e7eb;\\r\\n    vertical-align: top;\\r\\n  }\\r\\n\\r\\n  .data-table tr:hover {\\r\\n    background: #f9fafb;\\r\\n  }\\r\\n\\r\\n  /* Progress bars */\\r\\n  .progress-bar {\\r\\n    background: #e5e7eb;\\r\\n    border-radius: 8px;\\r\\n    height: 8px;\\r\\n    overflow: hidden;\\r\\n  }\\r\\n\\r\\n  .progress-fill {\\r\\n    background: linear-gradient(90deg, #ff3e00, #059669);\\r\\n    height: 100%;\\r\\n    border-radius: 8px;\\r\\n    transition: width 0.3s ease;\\r\\n  }\\r\\n\\r\\n  .progress-text {\\r\\n    font-size: 0.875rem;\\r\\n    color: #666;\\r\\n    margin-top: 0.25rem;\\r\\n  }\\r\\n\\r\\n  /* Score badges */\\r\\n  .score-badge {\\r\\n    display: inline-block;\\r\\n    padding: 0.25rem 0.5rem;\\r\\n    border-radius: 4px;\\r\\n    font-size: 0.875rem;\\r\\n    font-weight: 500;\\r\\n    color: white;\\r\\n  }\\r\\n\\r\\n  .loading, .empty-state {\\r\\n    text-align: center;\\r\\n    padding: 3rem;\\r\\n    color: #666;\\r\\n  }\\r\\n\\r\\n  .spinner {\\r\\n    display: inline-block;\\r\\n    width: 40px;\\r\\n    height: 40px;\\r\\n    border: 4px solid #f3f3f3;\\r\\n    border-top: 4px solid #ff3e00;\\r\\n    border-radius: 50%;\\r\\n    animation: spin 1s linear infinite;\\r\\n    margin-bottom: 1rem;\\r\\n  }\\r\\n\\r\\n  @keyframes spin {\\r\\n    0% { transform: rotate(0deg); }\\r\\n    100% { transform: rotate(360deg); }\\r\\n  }\\r\\n\\r\\n  /* Mobile Cards */\\r\\n  .mobile-cards {\\r\\n    display: none;\\r\\n  }\\r\\n\\r\\n  .mobile-card {\\r\\n    background: white;\\r\\n    border-radius: 8px;\\r\\n    padding: 1.5rem;\\r\\n    margin-bottom: 1rem;\\r\\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\\r\\n    border-left: 4px solid #ff3e00;\\r\\n  }\\r\\n\\r\\n  .mobile-card-header {\\r\\n    display: flex;\\r\\n    justify-content: space-between;\\r\\n    align-items: flex-start;\\r\\n    margin-bottom: 1rem;\\r\\n    flex-wrap: wrap;\\r\\n    gap: 0.5rem;\\r\\n  }\\r\\n\\r\\n  .mobile-card-title {\\r\\n    font-size: 1.125rem;\\r\\n    font-weight: 600;\\r\\n    color: #333;\\r\\n    margin: 0;\\r\\n  }\\r\\n\\r\\n  .mobile-card-subtitle {\\r\\n    font-size: 0.875rem;\\r\\n    color: #666;\\r\\n    margin: 0.25rem 0 0;\\r\\n  }\\r\\n\\r\\n  .mobile-card-badge {\\r\\n    padding: 0.25rem 0.5rem;\\r\\n    border-radius: 4px;\\r\\n    font-size: 0.75rem;\\r\\n    font-weight: 500;\\r\\n    flex-shrink: 0;\\r\\n  }\\r\\n\\r\\n  .mobile-card-details {\\r\\n    display: grid;\\r\\n    grid-template-columns: 1fr 1fr;\\r\\n    gap: 1rem;\\r\\n    margin-bottom: 1rem;\\r\\n    padding: 1rem;\\r\\n    background: #f9fafb;\\r\\n    border-radius: 6px;\\r\\n  }\\r\\n\\r\\n  .mobile-detail-item {\\r\\n    display: flex;\\r\\n    flex-direction: column;\\r\\n  }\\r\\n\\r\\n  .mobile-detail-label {\\r\\n    font-size: 0.75rem;\\r\\n    color: #6b7280;\\r\\n    margin-bottom: 0.25rem;\\r\\n    text-transform: uppercase;\\r\\n    font-weight: 600;\\r\\n    letter-spacing: 0.5px;\\r\\n  }\\r\\n\\r\\n  .mobile-detail-value {\\r\\n    font-size: 1rem;\\r\\n    color: #333;\\r\\n    font-weight: 600;\\r\\n  }\\r\\n\\r\\n  .mobile-progress {\\r\\n    margin-top: 1rem;\\r\\n  }\\r\\n\\r\\n  .mobile-progress-label {\\r\\n    display: flex;\\r\\n    justify-content: space-between;\\r\\n    align-items: center;\\r\\n    margin-bottom: 0.5rem;\\r\\n    font-size: 0.875rem;\\r\\n    color: #374151;\\r\\n  }\\r\\n\\r\\n  .mobile-progress-bar {\\r\\n    background: #e5e7eb;\\r\\n    border-radius: 8px;\\r\\n    height: 8px;\\r\\n    overflow: hidden;\\r\\n  }\\r\\n\\r\\n  .mobile-progress-fill {\\r\\n    background: linear-gradient(90deg, #ff3e00, #059669);\\r\\n    height: 100%;\\r\\n    border-radius: 8px;\\r\\n    transition: width 0.3s ease;\\r\\n  }\\r\\n\\r\\n  .mobile-ranking-item {\\r\\n    display: flex;\\r\\n    align-items: center;\\r\\n    gap: 1rem;\\r\\n    padding: 1rem;\\r\\n    background: #f9fafb;\\r\\n    border-radius: 6px;\\r\\n    margin-bottom: 0.5rem;\\r\\n    border: 1px solid #e5e7eb;\\r\\n  }\\r\\n\\r\\n  .mobile-ranking-position {\\r\\n    font-size: 1.5rem;\\r\\n    font-weight: 600;\\r\\n    min-width: 2rem;\\r\\n    text-align: center;\\r\\n  }\\r\\n\\r\\n  .mobile-ranking-entry {\\r\\n    flex: 1;\\r\\n    min-width: 0;\\r\\n  }\\r\\n\\r\\n  .mobile-ranking-entry-number {\\r\\n    font-weight: 600;\\r\\n    color: #ff3e00;\\r\\n    font-size: 1.1rem;\\r\\n  }\\r\\n\\r\\n  .mobile-ranking-beer-name {\\r\\n    color: #666;\\r\\n    font-size: 0.9rem;\\r\\n    margin-top: 0.25rem;\\r\\n  }\\r\\n\\r\\n  .mobile-ranking-points {\\r\\n    font-size: 1.25rem;\\r\\n    font-weight: 700;\\r\\n    color: #059669;\\r\\n    text-align: right;\\r\\n    min-width: fit-content;\\r\\n  }\\r\\n\\r\\n  /* Mobile responsiveness */\\r\\n  @media (max-width: 768px) {\\r\\n    .dashboard-container {\\r\\n      padding: 0.5rem;\\r\\n    }\\r\\n\\r\\n    .header h1 {\\r\\n      font-size: 1.5rem;\\r\\n    }\\r\\n\\r\\n    .header-info {\\r\\n      grid-template-columns: 1fr;\\r\\n    }\\r\\n\\r\\n    .stats-grid {\\r\\n      grid-template-columns: repeat(2, 1fr);\\r\\n    }\\r\\n\\r\\n    .controls {\\r\\n      flex-direction: column;\\r\\n      align-items: stretch;\\r\\n    }\\r\\n\\r\\n    .view-tabs {\\r\\n      width: 100%;\\r\\n      justify-content: space-between;\\r\\n    }\\r\\n\\r\\n    .tab-btn {\\r\\n      flex: 1;\\r\\n      text-align: center;\\r\\n    }\\r\\n\\r\\n    .data-table {\\r\\n      display: none;\\r\\n    }\\r\\n\\r\\n    .mobile-cards {\\r\\n      display: block;\\r\\n    }\\r\\n\\r\\n    .mobile-card-details {\\r\\n      grid-template-columns: 1fr;\\r\\n      gap: 0.75rem;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  @media (max-width: 480px) {\\r\\n    .mobile-card-header {\\r\\n      flex-direction: column;\\r\\n      align-items: flex-start;\\r\\n      gap: 1rem;\\r\\n    }\\r\\n\\r\\n    .stats-grid {\\r\\n      grid-template-columns: 1fr;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /* Ensure tables are hidden on mobile */\\r\\n  @media (min-width: 769px) {\\r\\n    .mobile-cards {\\r\\n      display: none;\\r\\n    }\\r\\n    \\r\\n    .data-table {\\r\\n      display: table;\\r\\n    }\\r\\n  }\\r\\n</style>\\r\\n\\r\\n<div class=\\"dashboard-container\\">\\r\\n  {#if isLoading}\\r\\n    <div class=\\"loading\\">\\r\\n      <div class=\\"spinner\\"></div>\\r\\n      <p>Loading judging dashboard...</p>\\r\\n    </div>\\r\\n  {:else if competition}\\r\\n    <!-- Header -->\\r\\n    <div class=\\"header\\">\\r\\n      <h1>Judging Dashboard</h1>\\r\\n      <p>{competition.name}</p>\\r\\n      \\r\\n      <div class=\\"header-info\\">\\r\\n        <div class=\\"info-item\\">\\r\\n          <span class=\\"info-label\\">Status</span>\\r\\n          <span class=\\"info-value\\">\\r\\n            {competition.results_published ? 'Results Published' : 'Judging In Progress'}\\r\\n          </span>\\r\\n        </div>\\r\\n        <div class=\\"info-item\\">\\r\\n          <span class=\\"info-label\\">Judging Date</span>\\r\\n          <span class=\\"info-value\\">{formatDate(competition.judging_date)}</span>\\r\\n        </div>\\r\\n        <div class=\\"info-item\\">\\r\\n          <span class=\\"info-label\\">Last Updated</span>\\r\\n          <span class=\\"info-value\\">{formatDate(competition.updated_at)}</span>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n    <!-- Stats -->\\r\\n    <div class=\\"stats-grid\\">\\r\\n      <div class=\\"stat-card\\">\\r\\n        <h3 class=\\"stat-value\\">{judgingStats.totalEntries}</h3>\\r\\n        <p class=\\"stat-label\\">Total Entries</p>\\r\\n      </div>\\r\\n      <div class=\\"stat-card\\">\\r\\n        <h3 class=\\"stat-value\\">{judgingStats.totalJudges}</h3>\\r\\n        <p class=\\"stat-label\\">Assigned Judges</p>\\r\\n      </div>\\r\\n      <div class=\\"stat-card\\">\\r\\n        <h3 class=\\"stat-value\\">{judgingStats.completedSessions}</h3>\\r\\n        <p class=\\"stat-label\\">Completed Sessions</p>\\r\\n        <p class=\\"stat-description\\">Out of {judgingStats.totalEntries * judgingStats.totalJudges} possible</p>\\r\\n      </div>\\r\\n      <div class=\\"stat-card\\">\\r\\n        <h3 class=\\"stat-value\\">{judgingStats.averageScore}</h3>\\r\\n        <p class=\\"stat-label\\">Average Score</p>\\r\\n        <p class=\\"stat-description\\">Across all judged entries</p>\\r\\n      </div>\\r\\n      <div class=\\"stat-card\\">\\r\\n        <h3 class=\\"stat-value\\">{judgingStats.completionPercentage}%</h3>\\r\\n        <p class=\\"stat-label\\">Completion Rate</p>\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n    <!-- Controls -->\\r\\n    <div class=\\"controls\\">\\r\\n      <div class=\\"view-tabs\\">\\r\\n        <button class=\\"tab-btn {selectedView === 'overview' ? 'active' : ''}\\" on:click={() => selectedView = 'overview'}>\\r\\n          📊 Overview\\r\\n        </button>\\r\\n        <button class=\\"tab-btn {selectedView === 'judges' ? 'active' : ''}\\" on:click={() => selectedView = 'judges'}>\\r\\n          👩‍⚖️ Judges\\r\\n        </button>\\r\\n        <button class=\\"tab-btn {selectedView === 'entries' ? 'active' : ''}\\" on:click={() => selectedView = 'entries'}>\\r\\n          🍺 Entries\\r\\n        </button>\\r\\n        <button class=\\"tab-btn {selectedView === 'rankings' ? 'active' : ''}\\" on:click={() => selectedView = 'rankings'}>\\r\\n          🏆 Rankings\\r\\n        </button>\\r\\n      </div>\\r\\n\\r\\n      <button \\r\\n        class=\\"action-btn btn-success\\"\\r\\n        on:click={finalizeResults}\\r\\n        disabled={isProcessing || judgingStats.completedSessions === 0}\\r\\n      >\\r\\n        {isProcessing ? '⏳ Processing...' : '📊 Finalize Results'}\\r\\n      </button>\\r\\n\\r\\n      <button \\r\\n        class=\\"action-btn btn-primary\\"\\r\\n        on:click={publishResults}\\r\\n        disabled={competition.results_published}\\r\\n      >\\r\\n        {competition.results_published ? '✅ Published' : '📢 Publish Results'}\\r\\n      </button>\\r\\n\\r\\n      <button class=\\"action-btn btn-secondary\\" on:click={() => goto('/officers/manage-competitions')}>\\r\\n        ⬅️ Back\\r\\n      </button>\\r\\n    </div>\\r\\n\\r\\n    <!-- Content -->\\r\\n    <div class=\\"content-section\\">\\r\\n      {#if selectedView === 'overview'}\\r\\n        <div class=\\"section-header\\">\\r\\n          <h2 class=\\"section-title\\">Judging Overview</h2>\\r\\n        </div>\\r\\n        <div class=\\"section-content\\">\\r\\n          <div style=\\"margin-bottom: 2rem;\\">\\r\\n            <h3>Overall Progress</h3>\\r\\n            <div class=\\"progress-bar\\">\\r\\n              <div class=\\"progress-fill\\" style=\\"width: {judgingStats.completionPercentage}%\\"></div>\\r\\n            </div>\\r\\n            <p class=\\"progress-text\\">\\r\\n              {judgingStats.completedSessions} of {judgingStats.totalEntries * judgingStats.totalJudges} judging sessions completed\\r\\n            </p>\\r\\n          </div>\\r\\n\\r\\n          <div style=\\"display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 2rem;\\">\\r\\n            <div>\\r\\n              {#if competition?.category_system === 'custom' && rankingGroups.length > 0}\\r\\n                <h4>Custom Ranking Groups ({rankingGroups.length})</h4>\\r\\n                {#each rankingGroups as group}\\r\\n                  <div style=\\"display: flex; justify-content: space-between; margin-bottom: 0.5rem;\\">\\r\\n                    <span>{group.group_name}</span>\\r\\n                    <span>{getGroupEntryCount(group)} entries</span>\\r\\n                  </div>\\r\\n                {/each}\\r\\n              {:else}\\r\\n                <h4>Categories ({categories.length})</h4>\\r\\n                {#each categories as category}\\r\\n                  <div style=\\"display: flex; justify-content: space-between; margin-bottom: 0.5rem;\\">\\r\\n                    <span>{category.name}</span>\\r\\n                    <span>{category.entryCount} entries</span>\\r\\n                  </div>\\r\\n                {/each}\\r\\n              {/if}\\r\\n            </div>\\r\\n\\r\\n            <div>\\r\\n              <h4>Score Distribution</h4>\\r\\n              <!-- Add score distribution chart here if needed -->\\r\\n              <p>Average score: {judgingStats.averageScore}/50</p>\\r\\n              <p>Completed judging sessions: {judgingStats.completedSessions}</p>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n\\r\\n      {:else if selectedView === 'judges'}\\r\\n        <div class=\\"section-header\\">\\r\\n          <h2 class=\\"section-title\\">Judge Progress ({judges.length})</h2>\\r\\n        </div>\\r\\n        <div class=\\"section-content\\">\\r\\n          <table class=\\"data-table\\">\\r\\n            <thead>\\r\\n              <tr>\\r\\n                <th>Judge</th>\\r\\n                <th>Role</th>\\r\\n                <th>Progress</th>\\r\\n                <th>Completion</th>\\r\\n                <th>Assigned</th>\\r\\n              </tr>\\r\\n            </thead>\\r\\n            <tbody>\\r\\n              {#each judges as judge}\\r\\n                {@const progress = getJudgeProgress(judge.judge_id)}\\r\\n                <tr>\\r\\n                  <td>\\r\\n                    <div>\\r\\n                      <div style=\\"font-weight: 600;\\">{judge.judge?.name}</div>\\r\\n                      <div style=\\"font-size: 0.875rem; color: #666;\\">{judge.judge?.email}</div>\\r\\n                    </div>\\r\\n                  </td>\\r\\n                  <td>\\r\\n                    <span style=\\"text-transform: capitalize;\\">\\r\\n                      {judge.judge_role.replace('_', ' ')}\\r\\n                    </span>\\r\\n                  </td>\\r\\n                  <td>\\r\\n                    <div class=\\"progress-bar\\" style=\\"width: 120px;\\">\\r\\n                      <div class=\\"progress-fill\\" style=\\"width: {progress.percentage}%\\"></div>\\r\\n                    </div>\\r\\n                    <div class=\\"progress-text\\">{progress.percentage}%</div>\\r\\n                  </td>\\r\\n                  <td>{progress.completed} / {progress.total}</td>\\r\\n                  <td>{formatDate(judge.assigned_at)}</td>\\r\\n                </tr>\\r\\n              {/each}\\r\\n            </tbody>\\r\\n          </table>\\r\\n\\r\\n          <!-- Mobile Cards for Judges -->\\r\\n          <div class=\\"mobile-cards\\">\\r\\n            {#each judges as judge}\\r\\n              {@const progress = getJudgeProgress(judge.judge_id)}\\r\\n              <div class=\\"mobile-card\\">\\r\\n                <div class=\\"mobile-card-header\\">\\r\\n                  <div>\\r\\n                    <h3 class=\\"mobile-card-title\\">{judge.judge?.name}</h3>\\r\\n                    <div class=\\"mobile-card-subtitle\\">{judge.judge?.email}</div>\\r\\n                  </div>\\r\\n                  <div class=\\"mobile-card-badge\\" style=\\"background: #e5e7eb; color: #374151;\\">\\r\\n                    {judge.judge_role.replace('_', ' ')}\\r\\n                  </div>\\r\\n                </div>\\r\\n                \\r\\n                <div class=\\"mobile-card-details\\">\\r\\n                  <div class=\\"mobile-detail-item\\">\\r\\n                    <span class=\\"mobile-detail-label\\">Assigned</span>\\r\\n                    <span class=\\"mobile-detail-value\\">{formatDate(judge.assigned_at)}</span>\\r\\n                  </div>\\r\\n                  <div class=\\"mobile-detail-item\\">\\r\\n                    <span class=\\"mobile-detail-label\\">Completed</span>\\r\\n                    <span class=\\"mobile-detail-value\\">{progress.completed} / {progress.total}</span>\\r\\n                  </div>\\r\\n                </div>\\r\\n\\r\\n                <div class=\\"mobile-progress\\">\\r\\n                  <div class=\\"mobile-progress-label\\">\\r\\n                    <span>Progress</span>\\r\\n                    <span>{progress.percentage}%</span>\\r\\n                  </div>\\r\\n                  <div class=\\"mobile-progress-bar\\">\\r\\n                    <div class=\\"mobile-progress-fill\\" style=\\"width: {progress.percentage}%\\"></div>\\r\\n                  </div>\\r\\n                </div>\\r\\n              </div>\\r\\n            {/each}\\r\\n          </div>\\r\\n        </div>\\r\\n\\r\\n      {:else if selectedView === 'entries'}\\r\\n        <div class=\\"section-header\\">\\r\\n          <h2 class=\\"section-title\\">Entry Scores ({entries.length})</h2>\\r\\n        </div>\\r\\n        <div class=\\"section-content\\">\\r\\n          <table class=\\"data-table\\">\\r\\n            <thead>\\r\\n              <tr>\\r\\n                <th>Entry</th>\\r\\n                <th>Brewer</th>\\r\\n                <th>Category</th>\\r\\n                <th>Judges</th>\\r\\n                <th>Average Score</th>\\r\\n                <th>Status</th>\\r\\n              </tr>\\r\\n            </thead>\\r\\n            <tbody>\\r\\n              {#each entries as entry}\\r\\n                {@const scores = getEntryScores(entry.id)}\\r\\n                <tr>\\r\\n                  <td>\\r\\n                    <div>\\r\\n                      <div style=\\"font-weight: 600; color: #ff3e00;\\">#{entry.entry_number}</div>\\r\\n                      <div style=\\"font-size: 0.875rem;\\">{entry.beer_name || 'No name'}</div>\\r\\n                    </div>\\r\\n                  </td>\\r\\n                  <td>{entry.members?.name}</td>\\r\\n                  <td>\\r\\n                    {#if entry.bjcp_categories}\\r\\n                      {entry.bjcp_categories.category_number}{entry.bjcp_categories.subcategory_letter || ''} - {entry.bjcp_categories.category_name}\\r\\n                    {:else}\\r\\n                      Unknown\\r\\n                    {/if}\\r\\n                  </td>\\r\\n                  <td>{scores.count} / {judges.length}</td>\\r\\n                  <td>\\r\\n                    {#if scores.count > 0}\\r\\n                      <span class=\\"score-badge\\" style=\\"background: {getScoreColor(scores.average)}\\">\\r\\n                        {scores.average}/50\\r\\n                      </span>\\r\\n                    {:else}\\r\\n                      <span style=\\"color: #666;\\">Not scored</span>\\r\\n                    {/if}\\r\\n                  </td>\\r\\n                  <td>\\r\\n                    {#if scores.count === judges.length}\\r\\n                      <span style=\\"color: #059669;\\">✅ Complete</span>\\r\\n                    {:else if scores.count > 0}\\r\\n                      <span style=\\"color: #f59e0b;\\">⏳ Partial</span>\\r\\n                    {:else}\\r\\n                      <span style=\\"color: #dc2626;\\">❌ Pending</span>\\r\\n                    {/if}\\r\\n                  </td>\\r\\n                </tr>\\r\\n              {/each}\\r\\n            </tbody>\\r\\n          </table>\\r\\n\\r\\n          <!-- Mobile Cards for Entries -->\\r\\n          <div class=\\"mobile-cards\\">\\r\\n            {#each entries as entry}\\r\\n              {@const scores = getEntryScores(entry.id)}\\r\\n              <div class=\\"mobile-card\\">\\r\\n                <div class=\\"mobile-card-header\\">\\r\\n                  <div>\\r\\n                    <h3 class=\\"mobile-card-title\\">#{entry.entry_number}</h3>\\r\\n                    <div class=\\"mobile-card-subtitle\\">{entry.beer_name || 'No name'}</div>\\r\\n                  </div>\\r\\n                  <div class=\\"mobile-card-badge\\" style=\\"background: {scores.count === judges.length ? '#dcfce7' : scores.count > 0 ? '#fef3c7' : '#fee2e2'}; color: {scores.count === judges.length ? '#059669' : scores.count > 0 ? '#f59e0b' : '#dc2626'};\\">\\r\\n                    {scores.count === judges.length ? 'Complete' : scores.count > 0 ? 'Partial' : 'Pending'}\\r\\n                  </div>\\r\\n                </div>\\r\\n                \\r\\n                <div class=\\"mobile-card-details\\">\\r\\n                  <div class=\\"mobile-detail-item\\">\\r\\n                    <span class=\\"mobile-detail-label\\">Brewer</span>\\r\\n                    <span class=\\"mobile-detail-value\\">{entry.members?.name}</span>\\r\\n                  </div>\\r\\n                  <div class=\\"mobile-detail-item\\">\\r\\n                    <span class=\\"mobile-detail-label\\">Category</span>\\r\\n                    <span class=\\"mobile-detail-value\\">\\r\\n                      {#if entry.bjcp_categories}\\r\\n                        {entry.bjcp_categories.category_number}{entry.bjcp_categories.subcategory_letter || ''}\\r\\n                      {:else}\\r\\n                        Unknown\\r\\n                      {/if}\\r\\n                    </span>\\r\\n                  </div>\\r\\n                  <div class=\\"mobile-detail-item\\">\\r\\n                    <span class=\\"mobile-detail-label\\">Judges</span>\\r\\n                    <span class=\\"mobile-detail-value\\">{scores.count} / {judges.length}</span>\\r\\n                  </div>\\r\\n                  <div class=\\"mobile-detail-item\\">\\r\\n                    <span class=\\"mobile-detail-label\\">Score</span>\\r\\n                    <span class=\\"mobile-detail-value\\">\\r\\n                      {#if scores.count > 0}\\r\\n                        <span style=\\"background: {getScoreColor(scores.average)}; color: white; padding: 0.25rem 0.5rem; border-radius: 4px; font-size: 0.875rem;\\">\\r\\n                          {scores.average}/50\\r\\n                        </span>\\r\\n                      {:else}\\r\\n                        <span style=\\"color: #666;\\">Not scored</span>\\r\\n                      {/if}\\r\\n                    </span>\\r\\n                  </div>\\r\\n                </div>\\r\\n\\r\\n                {#if entry.bjcp_categories?.category_name}\\r\\n                  <div style=\\"margin-top: 0.5rem; padding: 0.5rem; background: #f3f4f6; border-radius: 4px;\\">\\r\\n                    <div style=\\"font-size: 0.875rem; color: #666;\\">\\r\\n                      {entry.bjcp_categories.category_name}\\r\\n                    </div>\\r\\n                  </div>\\r\\n                {/if}\\r\\n              </div>\\r\\n            {/each}\\r\\n          </div>\\r\\n        </div>\\r\\n\\r\\n      {:else if selectedView === 'rankings'}\\r\\n        <div class=\\"section-header\\">\\r\\n          <h2 class=\\"section-title\\">\\r\\n            {#if rankingGroups.length > 0}\\r\\n              Rankings\\r\\n            {:else}\\r\\n              Category Rankings\\r\\n            {/if}\\r\\n          </h2>\\r\\n        </div>\\r\\n        <div class=\\"section-content\\">\\r\\n          <!-- Show individual categories OR custom groups, not both -->\\r\\n          {#if competition?.category_system === 'custom' && rankingGroups.length > 0}\\r\\n            <!-- Custom Ranking Group Rankings -->\\r\\n            {#each rankingGroups as group}\\r\\n              {@const groupRankings = getGroupRankings(group.id)}\\r\\n              <div style=\\"margin-bottom: 2rem;\\">\\r\\n                <h4>{group.group_name}</h4>\\r\\n                {#if group.group_description}\\r\\n                  <p style=\\"color: #666; font-size: 0.875rem; margin-bottom: 1rem;\\">{group.group_description}</p>\\r\\n                {/if}\\r\\n                {#if groupRankings.length === 0}\\r\\n                  <p style=\\"color: #666; font-style: italic;\\">No rankings submitted yet</p>\\r\\n                {:else}\\r\\n                  {#if groupRankings.length > 1 && hasMultipleJudges(groupRankings)}\\r\\n                    <div style=\\"background: #dcfce7; border: 1px solid #22c55e; border-radius: 6px; padding: 1rem; margin-bottom: 1rem;\\">\\r\\n                      <div style=\\"display: flex; align-items: center; gap: 0.5rem; font-weight: 600; color: #166534;\\">\\r\\n                        ✅ Multi-Judge Point Compilation\\r\\n                      </div>\\r\\n                      <p style=\\"color: #166534; margin: 0.5rem 0 0; font-size: 0.875rem;\\">\\r\\n                        Rankings from {new Set(groupRankings.map(r => r.judge_id)).size} judges will be compiled using point system: 1st=3pts, 2nd=2pts, 3rd=1pt. Final placement determined by highest total points.\\r\\n                      </p>\\r\\n                    </div>\\r\\n                  {/if}\\r\\n                  {#if hasMultipleJudges(groupRankings)}\\r\\n                    <!-- Show compiled results for multiple judges -->\\r\\n                    <table class=\\"data-table\\">\\r\\n                      <thead>\\r\\n                        <tr>\\r\\n                          <th>Rank</th>\\r\\n                          <th>Entry</th>\\r\\n                          <th>Total Points</th>\\r\\n                          <th>Judges</th>\\r\\n                          <th>Placement</th>\\r\\n                        </tr>\\r\\n                      </thead>\\r\\n                      <tbody>\\r\\n                        {#each getUniqueEntriesFromRankings(groupRankings)\\r\\n                          .map(entry => ({ ...entry, summary: getEntryPointsSummary(entry.id, entry.bjcp_category_id, group.id) }))\\r\\n                          .sort((a, b) => b.summary.totalPoints - a.summary.totalPoints) as entry, index}\\r\\n                          {@const placement = index + 1 === 1 ? '1st' : index + 1 === 2 ? '2nd' : index + 1 === 3 ? '3rd' : index + 1 <= 5 ? 'HM' : '-'}\\r\\n                          <tr>\\r\\n                            <td>\\r\\n                              <span style=\\"font-size: 1.2rem; font-weight: 600;\\">\\r\\n                                {index + 1 === 1 ? '🥇' : index + 1 === 2 ? '🥈' : index + 1 === 3 ? '🥉' : \`\${index + 1}.\`}\\r\\n                              </span>\\r\\n                            </td>\\r\\n                            <td>\\r\\n                              <div>\\r\\n                                <div style=\\"font-weight: 600; color: #ff3e00;\\">#{entry.entry_number}</div>\\r\\n                                <div style=\\"font-size: 0.875rem;\\">{entry.beer_name || 'No name'}</div>\\r\\n                              </div>\\r\\n                            </td>\\r\\n                            <td>\\r\\n                              <span style=\\"font-weight: 700; font-size: 1.1rem; color: #059669;\\">\\r\\n                                {entry.summary.totalPoints} {entry.summary.totalPoints === 1 ? 'pt' : 'pts'}\\r\\n                              </span>\\r\\n                            </td>\\r\\n                            <td>\\r\\n                              <span style=\\"color: #666;\\">\\r\\n                                {entry.summary.judgeCount} judge{entry.summary.judgeCount === 1 ? '' : 's'}\\r\\n                              </span>\\r\\n                            </td>\\r\\n                            <td>\\r\\n                              <span style=\\"font-weight: 600; color: {placement === '1st' ? '#d4af37' : placement === '2nd' ? '#c0c0c0' : placement === '3rd' ? '#cd7f32' : placement === 'HM' ? '#059669' : '#666'};\\">\\r\\n                                {placement}\\r\\n                              </span>\\r\\n                            </td>\\r\\n                          </tr>\\r\\n                        {/each}\\r\\n                      </tbody>\\r\\n                    </table>\\r\\n                  {:else}\\r\\n                    <!-- Show individual rankings for single judge -->\\r\\n                    <table class=\\"data-table\\">\\r\\n                      <thead>\\r\\n                        <tr>\\r\\n                          <th>Rank</th>\\r\\n                          <th>Entry</th>\\r\\n                          <th>Points</th>\\r\\n                          <th>Judge</th>\\r\\n                          <th>Notes</th>\\r\\n                        </tr>\\r\\n                      </thead>\\r\\n                      <tbody>\\r\\n                        {#each groupRankings as ranking}\\r\\n                          {@const entryPoints = getPointsForRanking(ranking.rank_position)}\\r\\n                          <tr>\\r\\n                            <td>\\r\\n                              <span style=\\"font-size: 1.2rem; font-weight: 600;\\">\\r\\n                                {ranking.rank_position === 1 ? '🥇' : ranking.rank_position === 2 ? '🥈' : ranking.rank_position === 3 ? '🥉' : \`\${ranking.rank_position}.\`}\\r\\n                              </span>\\r\\n                            </td>\\r\\n                            <td>\\r\\n                              <div>\\r\\n                                <div style=\\"font-weight: 600; color: #ff3e00;\\">#{ranking.entry?.entry_number}</div>\\r\\n                                <div style=\\"font-size: 0.875rem;\\">{ranking.entry?.beer_name || 'No name'}</div>\\r\\n                              </div>\\r\\n                            </td>\\r\\n                            <td>\\r\\n                              <span style=\\"font-weight: 600; color: {entryPoints > 0 ? '#059669' : '#666'};\\">\\r\\n                                {entryPoints} {entryPoints === 1 ? 'pt' : 'pts'}\\r\\n                              </span>\\r\\n                            </td>\\r\\n                            <td>{ranking.judge?.name}</td>\\r\\n                            <td>{ranking.ranking_notes || '-'}</td>\\r\\n                          </tr>\\r\\n                        {/each}\\r\\n                      </tbody>\\r\\n                    </table>\\r\\n                  {/if}\\r\\n                {/if}\\r\\n              </div>\\r\\n            {/each}\\r\\n          {:else}\\r\\n            <!-- Individual Category Rankings (default system) -->\\r\\n            {#each categories as category}\\r\\n              {@const categoryRankings = getCategoryRankings(category.id)}\\r\\n              <div style=\\"margin-bottom: 2rem;\\">\\r\\n                <h4>{category.name}</h4>\\r\\n                {#if categoryRankings.length === 0}\\r\\n                  <p style=\\"color: #666; font-style: italic;\\">No rankings submitted yet</p>\\r\\n                {:else}\\r\\n                  {#if categoryRankings.length > 1 && hasMultipleJudges(categoryRankings)}\\r\\n                    <div style=\\"background: #dcfce7; border: 1px solid #22c55e; border-radius: 6px; padding: 1rem; margin-bottom: 1rem;\\">\\r\\n                      <div style=\\"display: flex; align-items: center; gap: 0.5rem; font-weight: 600; color: #166534;\\">\\r\\n                        ✅ Multi-Judge Point Compilation\\r\\n                      </div>\\r\\n                      <p style=\\"color: #166534; margin: 0.5rem 0 0; font-size: 0.875rem;\\">\\r\\n                        Rankings from {new Set(categoryRankings.map(r => r.judge_id)).size} judges will be compiled using point system: 1st=3pts, 2nd=2pts, 3rd=1pt. Final placement determined by highest total points.\\r\\n                      </p>\\r\\n                    </div>\\r\\n                  {/if}\\r\\n                  {#if hasMultipleJudges(categoryRankings)}\\r\\n                    <!-- Show compiled results for multiple judges -->\\r\\n                    <table class=\\"data-table\\">\\r\\n                      <thead>\\r\\n                        <tr>\\r\\n                          <th>Rank</th>\\r\\n                          <th>Entry</th>\\r\\n                          <th>Total Points</th>\\r\\n                          <th>Judges</th>\\r\\n                          <th>Placement</th>\\r\\n                        </tr>\\r\\n                      </thead>\\r\\n                      <tbody>\\r\\n                        {#each getUniqueEntriesFromRankings(categoryRankings)\\r\\n                          .map(entry => ({ ...entry, summary: getEntryPointsSummary(entry.id, category.id, null) }))\\r\\n                          .sort((a, b) => b.summary.totalPoints - a.summary.totalPoints) as entry, index}\\r\\n                          {@const placement = index + 1 === 1 ? '1st' : index + 1 === 2 ? '2nd' : index + 1 === 3 ? '3rd' : index + 1 <= 5 ? 'HM' : '-'}\\r\\n                          <tr>\\r\\n                            <td>\\r\\n                              <span style=\\"font-size: 1.2rem; font-weight: 600;\\">\\r\\n                                {index + 1 === 1 ? '🥇' : index + 1 === 2 ? '🥈' : index + 1 === 3 ? '🥉' : \`\${index + 1}.\`}\\r\\n                              </span>\\r\\n                            </td>\\r\\n                            <td>\\r\\n                              <div>\\r\\n                                <div style=\\"font-weight: 600; color: #ff3e00;\\">#{entry.entry_number}</div>\\r\\n                                <div style=\\"font-size: 0.875rem;\\">{entry.beer_name || 'No name'}</div>\\r\\n                              </div>\\r\\n                            </td>\\r\\n                            <td>\\r\\n                              <span style=\\"font-weight: 700; font-size: 1.1rem; color: #059669;\\">\\r\\n                                {entry.summary.totalPoints} {entry.summary.totalPoints === 1 ? 'pt' : 'pts'}\\r\\n                              </span>\\r\\n                            </td>\\r\\n                            <td>\\r\\n                              <span style=\\"color: #666;\\">\\r\\n                                {entry.summary.judgeCount} judge{entry.summary.judgeCount === 1 ? '' : 's'}\\r\\n                              </span>\\r\\n                            </td>\\r\\n                            <td>\\r\\n                              <span style=\\"font-weight: 600; color: {placement === '1st' ? '#d4af37' : placement === '2nd' ? '#c0c0c0' : placement === '3rd' ? '#cd7f32' : placement === 'HM' ? '#059669' : '#666'};\\">\\r\\n                                {placement}\\r\\n                              </span>\\r\\n                            </td>\\r\\n                          </tr>\\r\\n                        {/each}\\r\\n                      </tbody>\\r\\n                    </table>\\r\\n                  {:else}\\r\\n                    <!-- Show individual rankings for single judge -->\\r\\n                    <table class=\\"data-table\\">\\r\\n                      <thead>\\r\\n                        <tr>\\r\\n                          <th>Rank</th>\\r\\n                          <th>Entry</th>\\r\\n                          <th>Points</th>\\r\\n                          <th>Judge</th>\\r\\n                          <th>Notes</th>\\r\\n                        </tr>\\r\\n                      </thead>\\r\\n                      <tbody>\\r\\n                        {#each categoryRankings as ranking}\\r\\n                          {@const entryPoints = getPointsForRanking(ranking.rank_position)}\\r\\n                          <tr>\\r\\n                            <td>\\r\\n                              <span style=\\"font-size: 1.2rem; font-weight: 600;\\">\\r\\n                                {ranking.rank_position === 1 ? '🥇' : ranking.rank_position === 2 ? '🥈' : ranking.rank_position === 3 ? '🥉' : \`\${ranking.rank_position}.\`}\\r\\n                              </span>\\r\\n                            </td>\\r\\n                            <td>\\r\\n                              <div>\\r\\n                                <div style=\\"font-weight: 600; color: #ff3e00;\\">#{ranking.entry?.entry_number}</div>\\r\\n                                <div style=\\"font-size: 0.875rem;\\">{ranking.entry?.beer_name || 'No name'}</div>\\r\\n                              </div>\\r\\n                            </td>\\r\\n                            <td>\\r\\n                              <span style=\\"font-weight: 600; color: {entryPoints > 0 ? '#059669' : '#666'};\\">\\r\\n                                {entryPoints} {entryPoints === 1 ? 'pt' : 'pts'}\\r\\n                              </span>\\r\\n                            </td>\\r\\n                            <td>{ranking.judge?.name}</td>\\r\\n                            <td>{ranking.ranking_notes || '-'}</td>\\r\\n                          </tr>\\r\\n                        {/each}\\r\\n                      </tbody>\\r\\n                    </table>\\r\\n                  {/if}\\r\\n                {/if}\\r\\n              </div>\\r\\n            {/each}\\r\\n          {/if}\\r\\n\\r\\n          <!-- Mobile Rankings -->\\r\\n          <div class=\\"mobile-cards\\">\\r\\n            {#if competition?.category_system === 'custom' && rankingGroups.length > 0}\\r\\n              <!-- Custom Ranking Groups Mobile -->\\r\\n              {#each rankingGroups as group}\\r\\n                {@const groupRankings = getGroupRankings(group.id)}\\r\\n                <div class=\\"mobile-card\\">\\r\\n                  <div class=\\"mobile-card-header\\">\\r\\n                    <div>\\r\\n                      <h3 class=\\"mobile-card-title\\">{group.group_name}</h3>\\r\\n                      {#if group.group_description}\\r\\n                        <div class=\\"mobile-card-subtitle\\">{group.group_description}</div>\\r\\n                      {/if}\\r\\n                    </div>\\r\\n                    <div class=\\"mobile-card-badge\\" style=\\"background: #e5e7eb; color: #374151;\\">\\r\\n                      {getGroupEntryCount(group)} entries\\r\\n                    </div>\\r\\n                  </div>\\r\\n\\r\\n                  {#if groupRankings.length === 0}\\r\\n                    <div style=\\"padding: 1rem; text-align: center; color: #666; font-style: italic;\\">\\r\\n                      No rankings submitted yet\\r\\n                    </div>\\r\\n                  {:else}\\r\\n                    {#if groupRankings.length > 1 && hasMultipleJudges(groupRankings)}\\r\\n                      <div style=\\"background: #dcfce7; border: 1px solid #22c55e; border-radius: 6px; padding: 1rem; margin-bottom: 1rem; font-size: 0.875rem; color: #166534;\\">\\r\\n                        ✅ Multi-Judge Point Compilation - {new Set(groupRankings.map(r => r.judge_id)).size} judges\\r\\n                      </div>\\r\\n                    {/if}\\r\\n\\r\\n                    <div style=\\"margin-top: 1rem;\\">\\r\\n                      {#if hasMultipleJudges(groupRankings)}\\r\\n                        {#each getUniqueEntriesFromRankings(groupRankings)\\r\\n                          .map(entry => ({ ...entry, summary: getEntryPointsSummary(entry.id, entry.bjcp_category_id, group.id) }))\\r\\n                          .sort((a, b) => b.summary.totalPoints - a.summary.totalPoints) as entry, index}\\r\\n                          {@const placement = index + 1 === 1 ? '1st' : index + 1 === 2 ? '2nd' : index + 1 === 3 ? '3rd' : index + 1 <= 5 ? 'HM' : '-'}\\r\\n                          <div class=\\"mobile-ranking-item\\">\\r\\n                            <div class=\\"mobile-ranking-position\\">\\r\\n                              {index + 1 === 1 ? '🥇' : index + 1 === 2 ? '🥈' : index + 1 === 3 ? '🥉' : \`\${index + 1}.\`}\\r\\n                            </div>\\r\\n                            <div class=\\"mobile-ranking-entry\\">\\r\\n                              <div class=\\"mobile-ranking-entry-number\\">#{entry.entry_number}</div>\\r\\n                              <div class=\\"mobile-ranking-beer-name\\">{entry.beer_name || 'No name'}</div>\\r\\n                              <div style=\\"font-size: 0.8rem; color: #666; margin-top: 0.25rem;\\">\\r\\n                                {entry.summary.judgeCount} judge{entry.summary.judgeCount === 1 ? '' : 's'} • {placement}\\r\\n                              </div>\\r\\n                            </div>\\r\\n                            <div class=\\"mobile-ranking-points\\">\\r\\n                              {entry.summary.totalPoints} {entry.summary.totalPoints === 1 ? 'pt' : 'pts'}\\r\\n                            </div>\\r\\n                          </div>\\r\\n                        {/each}\\r\\n                      {:else}\\r\\n                        {#each groupRankings as ranking}\\r\\n                          {@const entryPoints = getPointsForRanking(ranking.rank_position)}\\r\\n                          <div class=\\"mobile-ranking-item\\">\\r\\n                            <div class=\\"mobile-ranking-position\\">\\r\\n                              {ranking.rank_position === 1 ? '🥇' : ranking.rank_position === 2 ? '🥈' : ranking.rank_position === 3 ? '🥉' : \`\${ranking.rank_position}.\`}\\r\\n                            </div>\\r\\n                            <div class=\\"mobile-ranking-entry\\">\\r\\n                              <div class=\\"mobile-ranking-entry-number\\">#{ranking.entry?.entry_number}</div>\\r\\n                              <div class=\\"mobile-ranking-beer-name\\">{ranking.entry?.beer_name || 'No name'}</div>\\r\\n                              <div style=\\"font-size: 0.8rem; color: #666; margin-top: 0.25rem;\\">\\r\\n                                {ranking.judge?.name}{#if ranking.ranking_notes} • {ranking.ranking_notes}{/if}\\r\\n                              </div>\\r\\n                            </div>\\r\\n                            <div class=\\"mobile-ranking-points\\">\\r\\n                              {entryPoints} {entryPoints === 1 ? 'pt' : 'pts'}\\r\\n                            </div>\\r\\n                          </div>\\r\\n                        {/each}\\r\\n                      {/if}\\r\\n                    </div>\\r\\n                  {/if}\\r\\n                </div>\\r\\n              {/each}\\r\\n            {:else}\\r\\n              <!-- Individual Categories Mobile -->\\r\\n              {#each categories as category}\\r\\n                {@const categoryRankings = getCategoryRankings(category.id)}\\r\\n                <div class=\\"mobile-card\\">\\r\\n                  <div class=\\"mobile-card-header\\">\\r\\n                    <div>\\r\\n                      <h3 class=\\"mobile-card-title\\">{category.name}</h3>\\r\\n                    </div>\\r\\n                    <div class=\\"mobile-card-badge\\" style=\\"background: #e5e7eb; color: #374151;\\">\\r\\n                      {category.entryCount} entries\\r\\n                    </div>\\r\\n                  </div>\\r\\n\\r\\n                  {#if categoryRankings.length === 0}\\r\\n                    <div style=\\"padding: 1rem; text-align: center; color: #666; font-style: italic;\\">\\r\\n                      No rankings submitted yet\\r\\n                    </div>\\r\\n                  {:else}\\r\\n                    {#if categoryRankings.length > 1 && hasMultipleJudges(categoryRankings)}\\r\\n                      <div style=\\"background: #dcfce7; border: 1px solid #22c55e; border-radius: 6px; padding: 1rem; margin-bottom: 1rem; font-size: 0.875rem; color: #166534;\\">\\r\\n                        ✅ Multi-Judge Point Compilation - {new Set(categoryRankings.map(r => r.judge_id)).size} judges\\r\\n                      </div>\\r\\n                    {/if}\\r\\n\\r\\n                    <div style=\\"margin-top: 1rem;\\">\\r\\n                      {#if hasMultipleJudges(categoryRankings)}\\r\\n                        {#each getUniqueEntriesFromRankings(categoryRankings)\\r\\n                          .map(entry => ({ ...entry, summary: getEntryPointsSummary(entry.id, category.id, null) }))\\r\\n                          .sort((a, b) => b.summary.totalPoints - a.summary.totalPoints) as entry, index}\\r\\n                          {@const placement = index + 1 === 1 ? '1st' : index + 1 === 2 ? '2nd' : index + 1 === 3 ? '3rd' : index + 1 <= 5 ? 'HM' : '-'}\\r\\n                          <div class=\\"mobile-ranking-item\\">\\r\\n                            <div class=\\"mobile-ranking-position\\">\\r\\n                              {index + 1 === 1 ? '🥇' : index + 1 === 2 ? '🥈' : index + 1 === 3 ? '🥉' : \`\${index + 1}.\`}\\r\\n                            </div>\\r\\n                            <div class=\\"mobile-ranking-entry\\">\\r\\n                              <div class=\\"mobile-ranking-entry-number\\">#{entry.entry_number}</div>\\r\\n                              <div class=\\"mobile-ranking-beer-name\\">{entry.beer_name || 'No name'}</div>\\r\\n                              <div style=\\"font-size: 0.8rem; color: #666; margin-top: 0.25rem;\\">\\r\\n                                {entry.summary.judgeCount} judge{entry.summary.judgeCount === 1 ? '' : 's'} • {placement}\\r\\n                              </div>\\r\\n                            </div>\\r\\n                            <div class=\\"mobile-ranking-points\\">\\r\\n                              {entry.summary.totalPoints} {entry.summary.totalPoints === 1 ? 'pt' : 'pts'}\\r\\n                            </div>\\r\\n                          </div>\\r\\n                        {/each}\\r\\n                      {:else}\\r\\n                        {#each categoryRankings as ranking}\\r\\n                          {@const entryPoints = getPointsForRanking(ranking.rank_position)}\\r\\n                          <div class=\\"mobile-ranking-item\\">\\r\\n                            <div class=\\"mobile-ranking-position\\">\\r\\n                              {ranking.rank_position === 1 ? '🥇' : ranking.rank_position === 2 ? '🥈' : ranking.rank_position === 3 ? '🥉' : \`\${ranking.rank_position}.\`}\\r\\n                            </div>\\r\\n                            <div class=\\"mobile-ranking-entry\\">\\r\\n                              <div class=\\"mobile-ranking-entry-number\\">#{ranking.entry?.entry_number}</div>\\r\\n                              <div class=\\"mobile-ranking-beer-name\\">{ranking.entry?.beer_name || 'No name'}</div>\\r\\n                              <div style=\\"font-size: 0.8rem; color: #666; margin-top: 0.25rem;\\">\\r\\n                                {ranking.judge?.name}{#if ranking.ranking_notes} • {ranking.ranking_notes}{/if}\\r\\n                              </div>\\r\\n                            </div>\\r\\n                            <div class=\\"mobile-ranking-points\\">\\r\\n                              {entryPoints} {entryPoints === 1 ? 'pt' : 'pts'}\\r\\n                            </div>\\r\\n                          </div>\\r\\n                        {/each}\\r\\n                      {/if}\\r\\n                    </div>\\r\\n                  {/if}\\r\\n                </div>\\r\\n              {/each}\\r\\n            {/if}\\r\\n          </div>\\r\\n        </div>\\r\\n      {/if}\\r\\n    </div>\\r\\n  {/if}\\r\\n</div>"],"names":[],"mappings":"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"}`
};
const Page = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $page, $$unsubscribe_page;
  let $userProfile, $$unsubscribe_userProfile;
  $$unsubscribe_page = subscribe(page, (value) => $page = value);
  $$unsubscribe_userProfile = subscribe(userProfile, (value) => $userProfile = value);
  $$result.css.add(css);
  {
    if ($userProfile && !$userProfile.is_officer) {
      goto();
    }
  }
  $page.params.id;
  $$unsubscribe_page();
  $$unsubscribe_userProfile();
  return `   <div class="dashboard-container svelte-d08yvj">${`<div class="loading svelte-d08yvj" data-svelte-h="svelte-1ob5ucp"><div class="spinner svelte-d08yvj"></div> <p>Loading judging dashboard...</p></div>`}</div>`;
});

export { Page as default };
//# sourceMappingURL=_page.svelte-Dxc-xcyp.js.map

import { c as create_ssr_component, a as subscribe, o as onDestroy, v as validate_component, d as escape, b as add_attribute, e as each, l as get_store_value } from './ssr-CFMHIens.js';
import './client-C3KLrhj1.js';
import { u as userProfile } from './userProfile-BAUZwBX2.js';
import { d as derived, w as writable } from './index-Ct3aIOD7.js';
import { s as supabase } from './supabaseClient-D_8i9Ohq.js';
import { B as Button } from './Button-DfG06A7O.js';
import { H as Hero } from './Hero-B5bq0fDE.js';
import { L as LoadingSpinner } from './LoadingSpinner-DyPK4ei8.js';
import { E as EmptyState } from './EmptyState-OwOXOni3.js';
import { C as Container } from './Container-C5rGKtUK.js';
import './exports-DKuYoYKl.js';
import './false-CRHihH2U.js';
import '@supabase/supabase-js';

const members = writable([]);
const isLoading = writable(false);
const error = writable(null);
const lastRefresh = writable(null);
const searchTerm = writable("");
const roleFilter = writable("all");
const activityFilter = writable("all");
const filteredMembers = derived(
  [members, searchTerm, roleFilter, activityFilter],
  ([$members, $searchTerm, $roleFilter, $activityFilter]) => {
    if (!$members || $members.length === 0) return [];
    let filtered = $members;
    if ($searchTerm.trim()) {
      const term = $searchTerm.toLowerCase().trim();
      filtered = filtered.filter(
        (member) => member.name?.toLowerCase().includes(term) || member.email?.toLowerCase().includes(term) || member.role_display?.toLowerCase().includes(term)
      );
    }
    if ($roleFilter !== "all") {
      filtered = filtered.filter((member) => member.role === $roleFilter);
    }
    if ($activityFilter !== "all") {
      const ninetyDaysAgo = /* @__PURE__ */ new Date();
      ninetyDaysAgo.setDate(ninetyDaysAgo.getDate() - 90);
      filtered = filtered.filter((member) => {
        const parseTimestamp = (timestamp) => {
          if (!timestamp) return /* @__PURE__ */ new Date(0);
          try {
            let isoString = timestamp;
            if (timestamp.includes(" ") && !timestamp.includes("T")) {
              isoString = timestamp.replace(" ", "T");
              if (!isoString.includes("+") && !isoString.includes("Z")) {
                isoString += "Z";
              }
            }
            return new Date(isoString);
          } catch {
            return /* @__PURE__ */ new Date(0);
          }
        };
        const lastActivity = member.last_submission_date ? parseTimestamp(member.last_submission_date) : parseTimestamp(member.created_at);
        if ($activityFilter === "active") {
          return lastActivity >= ninetyDaysAgo;
        } else if ($activityFilter === "inactive") {
          return lastActivity < ninetyDaysAgo;
        }
        return true;
      });
    }
    return filtered;
  }
);
const memberStats = derived(
  [members],
  ([$members]) => {
    if (!$members || $members.length === 0) {
      return {
        totalMembers: 0,
        totalOfficers: 0,
        activeMembers: 0,
        inactiveMembers: 0,
        totalPoints: 0,
        avgPointsPerMember: 0
      };
    }
    const ninetyDaysAgo = /* @__PURE__ */ new Date();
    ninetyDaysAgo.setDate(ninetyDaysAgo.getDate() - 90);
    const stats = $members.reduce((acc, member) => {
      acc.totalMembers++;
      if (member.is_officer) {
        acc.totalOfficers++;
      }
      const parseTimestamp = (timestamp) => {
        if (!timestamp) return /* @__PURE__ */ new Date(0);
        try {
          let isoString = timestamp;
          if (timestamp.includes(" ") && !timestamp.includes("T")) {
            isoString = timestamp.replace(" ", "T");
            if (!isoString.includes("+") && !isoString.includes("Z")) {
              isoString += "Z";
            }
          }
          return new Date(isoString);
        } catch {
          return /* @__PURE__ */ new Date(0);
        }
      };
      const lastActivity = member.last_submission_date ? parseTimestamp(member.last_submission_date) : parseTimestamp(member.created_at);
      if (lastActivity >= ninetyDaysAgo) {
        acc.activeMembers++;
      } else {
        acc.inactiveMembers++;
      }
      acc.totalPoints += member.total_points || 0;
      return acc;
    }, {
      totalMembers: 0,
      totalOfficers: 0,
      activeMembers: 0,
      inactiveMembers: 0,
      totalPoints: 0
    });
    stats.avgPointsPerMember = stats.totalMembers > 0 ? Math.round(stats.totalPoints / stats.totalMembers) : 0;
    return stats;
  }
);
const canManageOfficers = derived(
  [userProfile],
  ([$userProfile]) => {
    if (!$userProfile) return false;
    return $userProfile.role === "president" || $userProfile.role === "vice_president";
  }
);
const memberManagementStore = {
  // Load all members with their points and stats
  async loadMembers(forceRefresh = false) {
    const currentData = get_store_value(members);
    const lastRefreshTime = get_store_value(lastRefresh);
    if (!forceRefresh && currentData.length > 0 && lastRefreshTime) {
      const timeSinceRefresh = Date.now() - lastRefreshTime;
      if (timeSinceRefresh < 3e4) {
        return currentData;
      }
    }
    isLoading.set(true);
    error.set(null);
    try {
      console.log("🔄 Loading members with points...");
      const { data, error: fetchError } = await supabase.rpc("get_members_with_points");
      if (fetchError) {
        throw fetchError;
      }
      console.log(`✅ Loaded ${data?.length || 0} members`);
      members.set(data || []);
      lastRefresh.set(Date.now());
      return data || [];
    } catch (err) {
      console.error("❌ Error loading members:", err);
      error.set(err.message || "Failed to load members");
      return [];
    } finally {
      isLoading.set(false);
    }
  },
  // Update a member's role
  async updateMemberRole(memberId, newRole) {
    const currentUser = get_store_value(userProfile);
    if (!currentUser || !["president", "vice_president"].includes(currentUser.role)) {
      throw new Error("Insufficient permissions to manage member roles");
    }
    if (currentUser.id === memberId && currentUser.role === "president" && newRole !== "president") {
      throw new Error("Presidents cannot demote themselves");
    }
    if (newRole === "president" && currentUser.role !== "president") {
      throw new Error("Only presidents can promote members to president");
    }
    isLoading.set(true);
    error.set(null);
    try {
      console.log(`🔄 Updating member ${memberId} role to ${newRole}...`);
      const officerRoles = ["officer", "competition_director", "vice_president", "president"];
      const isOfficer = officerRoles.includes(newRole);
      const { data, error: updateError } = await supabase.from("members").update({
        role: newRole,
        is_officer: isOfficer
      }).eq("id", memberId).select();
      if (updateError) {
        throw updateError;
      }
      console.log("✅ Member role updated successfully");
      await this.loadMembers(true);
      return data;
    } catch (err) {
      console.error("❌ Error updating member role:", err);
      error.set(err.message || "Failed to update member role");
      throw err;
    } finally {
      isLoading.set(false);
    }
  },
  // Get member details with recent activity
  async getMemberDetails(memberId) {
    isLoading.set(true);
    error.set(null);
    try {
      console.log(`🔄 Loading details for member ${memberId}...`);
      const { data: memberData, error: memberError } = await supabase.from("members").select(`
          *,
          join_date
        `).eq("id", memberId).single();
      if (memberError) {
        throw memberError;
      }
      const { data: submissions, error: submissionsError } = await supabase.from("point_submissions").select(`
          *,
          submitted_at
        `).eq("member_id", memberId).order("submitted_at", { ascending: false }).limit(10);
      if (submissionsError) {
        throw submissionsError;
      }
      console.log(`✅ Loaded member details with ${submissions?.length || 0} recent submissions`);
      return {
        member: memberData,
        recentSubmissions: submissions || []
      };
    } catch (err) {
      console.error("❌ Error loading member details:", err);
      error.set(err.message || "Failed to load member details");
      throw err;
    } finally {
      isLoading.set(false);
    }
  },
  // Export members data for printing/reporting
  async exportMembersData() {
    const membersData = get_store_value(members);
    if (membersData.length === 0) {
      await this.loadMembers();
    }
    const exportData = get_store_value(members).map((member) => ({
      name: member.name,
      email: member.email,
      role: member.role_display,
      totalPoints: member.total_points,
      monthlyPoints: member.monthly_points,
      joinDate: (() => {
        if (!member.created_at) return "N/A";
        try {
          let isoString = member.created_at;
          if (member.created_at.includes(" ") && !member.created_at.includes("T")) {
            isoString = member.created_at.replace(" ", "T");
            if (!isoString.includes("+") && !isoString.includes("Z")) {
              isoString += "Z";
            }
          }
          return new Date(isoString).toLocaleDateString();
        } catch {
          return "Invalid Date";
        }
      })(),
      lastActivity: member.last_submission_date ? (() => {
        try {
          let isoString = member.last_submission_date;
          if (member.last_submission_date.includes(" ") && !member.last_submission_date.includes("T")) {
            isoString = member.last_submission_date.replace(" ", "T");
            if (!isoString.includes("+") && !isoString.includes("Z")) {
              isoString += "Z";
            }
          }
          return new Date(isoString).toLocaleDateString();
        } catch {
          return "Invalid Date";
        }
      })() : "Never",
      totalSubmissions: member.total_approved_submissions
    }));
    return exportData;
  },
  // Reset all filters
  resetFilters() {
    searchTerm.set("");
    roleFilter.set("all");
    activityFilter.set("all");
  },
  // Refresh data
  async refresh() {
    return await this.loadMembers(true);
  },
  // Clear all data (for logout)
  clear() {
    members.set([]);
    error.set(null);
    lastRefresh.set(null);
    this.resetFilters();
  }
};
userProfile.subscribe(($userProfile) => {
  if ($userProfile?.is_officer) {
    memberManagementStore.loadMembers();
  } else {
    memberManagementStore.clear();
  }
});
const css = {
  code: ".stats-grid.svelte-jfip4b.svelte-jfip4b{display:grid;grid-template-columns:repeat(auto-fit, minmax(200px, 1fr));gap:1rem;margin-bottom:2rem;text-align:center}.stat-card.svelte-jfip4b.svelte-jfip4b{background:white;border-radius:6px;padding:1.5rem;box-shadow:0 4px 6px rgba(0, 0, 0, 0.1);border-left:4px solid}.stat-card.orange.svelte-jfip4b.svelte-jfip4b{border-left-color:#ff3e00}.stat-card.blue.svelte-jfip4b.svelte-jfip4b{border-left-color:#2563eb}.stat-card.green.svelte-jfip4b.svelte-jfip4b{border-left-color:#059669}.stat-card.red.svelte-jfip4b.svelte-jfip4b{border-left-color:#dc2626}.stat-value.svelte-jfip4b.svelte-jfip4b{font-size:2rem;font-weight:bold;margin-bottom:0.5rem}.stat-card.orange.svelte-jfip4b .stat-value.svelte-jfip4b{color:#ff3e00}.stat-card.blue.svelte-jfip4b .stat-value.svelte-jfip4b{color:#2563eb}.stat-card.green.svelte-jfip4b .stat-value.svelte-jfip4b{color:#059669}.stat-card.red.svelte-jfip4b .stat-value.svelte-jfip4b{color:#dc2626}.stat-label.svelte-jfip4b.svelte-jfip4b{font-size:0.875rem;color:#6b7280;font-weight:500}.controls-section.svelte-jfip4b.svelte-jfip4b{background:white;border-radius:6px;padding:1.5rem;box-shadow:0 4px 6px rgba(0, 0, 0, 0.1);margin-bottom:2rem;text-align:left}.controls-container.svelte-jfip4b.svelte-jfip4b{display:flex;justify-content:space-between;align-items:flex-start;gap:2rem;flex-wrap:wrap}.filters-group.svelte-jfip4b.svelte-jfip4b{display:flex;flex-direction:column;gap:1rem;flex:1;min-width:300px}.filters-row.svelte-jfip4b.svelte-jfip4b{display:flex;gap:1rem;align-items:center}.search-box.svelte-jfip4b.svelte-jfip4b{position:relative;width:100%;max-width:350px}.search-box.svelte-jfip4b input.svelte-jfip4b{width:100%;padding:0.75rem 0.75rem 0.75rem 2.5rem;border:1px solid #d1d5db;border-radius:6px;font-size:1rem;transition:border-color 0.2s, box-shadow 0.2s;box-sizing:border-box}.search-box.svelte-jfip4b input.svelte-jfip4b:focus{outline:none;border-color:#ff3e00;box-shadow:0 0 0 1px #ff3e00}.search-icon.svelte-jfip4b.svelte-jfip4b{position:absolute;left:0.75rem;top:50%;transform:translateY(-50%);color:#6b7280}.filter-select.svelte-jfip4b.svelte-jfip4b{padding:0.75rem;border:1px solid #d1d5db;border-radius:6px;font-size:1rem;background:white;cursor:pointer;min-width:140px;box-sizing:border-box}.filter-select.svelte-jfip4b.svelte-jfip4b:focus{outline:none;border-color:#ff3e00;box-shadow:0 0 0 1px #ff3e00}.action-buttons.svelte-jfip4b.svelte-jfip4b{display:flex;gap:0.5rem;flex-shrink:0}.reset-button.svelte-jfip4b.svelte-jfip4b,.export-button.svelte-jfip4b.svelte-jfip4b{padding:0.75rem 1rem;border:1px solid #d1d5db;border-radius:6px;font-size:0.875rem;font-weight:500;cursor:pointer;transition:all 0.2s ease}.reset-button.svelte-jfip4b.svelte-jfip4b{background:white;color:#6b7280}.reset-button.svelte-jfip4b.svelte-jfip4b:hover{background:#f9fafb;border-color:#9ca3af}.export-button.svelte-jfip4b.svelte-jfip4b{background:#2563eb;color:white;border-color:#2563eb}.export-button.svelte-jfip4b.svelte-jfip4b:hover{background:#1d4ed8}.members-container.svelte-jfip4b.svelte-jfip4b{background:white;border-radius:6px;box-shadow:0 4px 6px rgba(0, 0, 0, 0.1);overflow:hidden}.desktop-table.svelte-jfip4b.svelte-jfip4b{display:block}.members-table.svelte-jfip4b.svelte-jfip4b{width:100%;border-collapse:collapse}.members-table.svelte-jfip4b th.svelte-jfip4b{background:#f8fafc;padding:1rem;text-align:left;font-weight:600;color:#374151;font-size:0.75rem;text-transform:uppercase;letter-spacing:0.05em;border-bottom:1px solid #e5e7eb}.members-table.svelte-jfip4b td.svelte-jfip4b{padding:1rem;border-bottom:1px solid #f1f5f9}.members-table.svelte-jfip4b tr.svelte-jfip4b:hover{background:#f8fafc}.member-info.svelte-jfip4b.svelte-jfip4b{display:flex;align-items:center;gap:0.75rem}.member-avatar.svelte-jfip4b.svelte-jfip4b{width:40px;height:40px;border-radius:50%;background:linear-gradient(135deg, #ff3e00 0%, #e63600 100%);display:flex;align-items:center;justify-content:center;font-size:1rem;font-weight:700;color:white;flex-shrink:0}.member-details.svelte-jfip4b.svelte-jfip4b{min-width:0}.member-name.svelte-jfip4b.svelte-jfip4b{font-weight:600;color:#111827;font-size:0.875rem}.member-email.svelte-jfip4b.svelte-jfip4b{color:#6b7280;font-size:0.75rem}.role-badge.svelte-jfip4b.svelte-jfip4b{display:inline-flex;align-items:center;padding:0.25rem 0.75rem;border-radius:9999px;font-size:0.75rem;font-weight:500;border:1px solid}.role-badge.president.svelte-jfip4b.svelte-jfip4b{background:#faf5ff;color:#7c3aed;border-color:#c4b5fd}.role-badge.vice_president.svelte-jfip4b.svelte-jfip4b{background:#eff6ff;color:#2563eb;border-color:#93c5fd}.role-badge.officer.svelte-jfip4b.svelte-jfip4b{background:#fff7ed;color:#ea580c;border-color:#fed7aa}.role-badge.competition_director.svelte-jfip4b.svelte-jfip4b{background:#fef3c7;color:#d97706;border-color:#fde68a}.role-badge.member.svelte-jfip4b.svelte-jfip4b{background:#f9fafb;color:#374151;border-color:#d1d5db}.points-info.svelte-jfip4b.svelte-jfip4b{min-width:0}.total-points.svelte-jfip4b.svelte-jfip4b{font-weight:600;color:#111827;font-size:0.875rem}.monthly-points.svelte-jfip4b.svelte-jfip4b{color:#6b7280;font-size:0.75rem}.activity-info.svelte-jfip4b.svelte-jfip4b{min-width:0}.activity-badge.svelte-jfip4b.svelte-jfip4b{display:inline-flex;align-items:center;padding:0.25rem 0.5rem;border-radius:9999px;font-size:0.75rem;font-weight:500;border:1px solid;margin-bottom:0.25rem}.activity-badge.active.svelte-jfip4b.svelte-jfip4b{background:#f0fdf4;color:#059669;border-color:#bbf7d0}.activity-badge.inactive.svelte-jfip4b.svelte-jfip4b{background:#fef2f2;color:#dc2626;border-color:#fecaca}.last-activity.svelte-jfip4b.svelte-jfip4b{color:#6b7280;font-size:0.75rem}.join-date.svelte-jfip4b.svelte-jfip4b{color:#6b7280;font-size:0.875rem}.action-buttons-cell.svelte-jfip4b.svelte-jfip4b{display:flex;gap:0.5rem;flex-wrap:wrap}.view-button.svelte-jfip4b.svelte-jfip4b,.manage-button.svelte-jfip4b.svelte-jfip4b,.edit-button.svelte-jfip4b.svelte-jfip4b{padding:0.375rem 0.75rem;border:none;border-radius:4px;font-size:0.75rem;font-weight:500;cursor:pointer;transition:all 0.2s ease;text-decoration:none}.view-button.svelte-jfip4b.svelte-jfip4b{background:#2563eb;color:white}.view-button.svelte-jfip4b.svelte-jfip4b:hover{background:#1d4ed8}.edit-button.svelte-jfip4b.svelte-jfip4b{background:#059669;color:white}.edit-button.svelte-jfip4b.svelte-jfip4b:hover{background:#047857}.manage-button.svelte-jfip4b.svelte-jfip4b{background:#ff3e00;color:white}.manage-button.svelte-jfip4b.svelte-jfip4b:hover{background:#e63600}.mobile-cards.svelte-jfip4b.svelte-jfip4b{display:none;gap:1rem;padding:1rem}.member-card.svelte-jfip4b.svelte-jfip4b{background:white;border:1px solid #e5e7eb;border-left:4px solid #ff3e00;border-radius:6px;padding:1rem}.card-header.svelte-jfip4b.svelte-jfip4b{display:flex;align-items:center;justify-content:space-between;margin-bottom:1rem}.card-stats.svelte-jfip4b.svelte-jfip4b{display:grid;grid-template-columns:1fr 1fr;gap:0.75rem;margin-bottom:1rem}.stat-item.svelte-jfip4b.svelte-jfip4b{display:flex;flex-direction:column;gap:0.25rem}.stat-item.svelte-jfip4b .stat-label.svelte-jfip4b{color:#6b7280;font-size:0.75rem}.stat-item.svelte-jfip4b .stat-value.svelte-jfip4b{font-weight:600;color:#111827}.card-actions.svelte-jfip4b.svelte-jfip4b{display:flex;gap:0.5rem;padding-top:0.75rem;border-top:1px solid #f1f5f9}.view-button-mobile.svelte-jfip4b.svelte-jfip4b,.manage-button-mobile.svelte-jfip4b.svelte-jfip4b,.edit-button-mobile.svelte-jfip4b.svelte-jfip4b{flex:1;padding:0.75rem;border:none;border-radius:6px;font-size:0.875rem;font-weight:500;cursor:pointer;transition:all 0.2s ease}.view-button-mobile.svelte-jfip4b.svelte-jfip4b{background:#2563eb;color:white}.view-button-mobile.svelte-jfip4b.svelte-jfip4b:hover{background:#1d4ed8}.edit-button-mobile.svelte-jfip4b.svelte-jfip4b{background:#059669;color:white}.edit-button-mobile.svelte-jfip4b.svelte-jfip4b:hover{background:#047857}.manage-button-mobile.svelte-jfip4b.svelte-jfip4b{background:#ff3e00;color:white}.manage-button-mobile.svelte-jfip4b.svelte-jfip4b:hover{background:#e63600}.modal-backdrop.svelte-jfip4b.svelte-jfip4b{position:fixed;top:0;left:0;right:0;bottom:0;background:rgba(0, 0, 0, 0.5);display:flex;align-items:center;justify-content:center;padding:1rem;z-index:50}.modal-content.svelte-jfip4b.svelte-jfip4b{background:white;border-radius:6px;max-width:42rem;width:100%;max-height:90vh;overflow:auto;box-shadow:0 20px 25px -5px rgba(0, 0, 0, 0.1)}.modal-content.small.svelte-jfip4b.svelte-jfip4b{max-width:28rem}.modal-header.svelte-jfip4b.svelte-jfip4b{display:flex;align-items:center;justify-content:space-between;padding:1.5rem;border-bottom:1px solid #e5e7eb}.modal-header.svelte-jfip4b h2.svelte-jfip4b{color:#111827;font-size:1.25rem;font-weight:700;margin:0;text-transform:none}.close-button.svelte-jfip4b.svelte-jfip4b{background:none;border:none;color:#9ca3af;font-size:1.5rem;cursor:pointer;padding:0;line-height:1}.close-button.svelte-jfip4b.svelte-jfip4b:hover{color:#6b7280}.modal-body.svelte-jfip4b.svelte-jfip4b{padding:1.5rem}.member-profile.svelte-jfip4b.svelte-jfip4b{display:flex;align-items:center;gap:1rem;margin-bottom:1.5rem}.profile-avatar.svelte-jfip4b.svelte-jfip4b{width:64px;height:64px;border-radius:50%;background:linear-gradient(135deg, #ff3e00 0%, #e63600 100%);display:flex;align-items:center;justify-content:center;font-size:1.5rem;font-weight:700;color:white;flex-shrink:0}.profile-info.svelte-jfip4b h3.svelte-jfip4b{color:#111827;font-size:1.25rem;font-weight:600;margin:0 0 0.25rem 0;text-transform:none}.profile-info.svelte-jfip4b p.svelte-jfip4b{color:#6b7280;margin:0 0 0.5rem 0}.member-stats.svelte-jfip4b.svelte-jfip4b{display:grid;grid-template-columns:repeat(auto-fit, minmax(120px, 1fr));gap:1rem;margin-bottom:1.5rem;text-align:center}.member-stats.svelte-jfip4b .stat-item.svelte-jfip4b{align-items:center}.member-stats.svelte-jfip4b .stat-value.svelte-jfip4b{font-size:1.5rem;font-weight:bold;margin-bottom:0.25rem}.member-stats.svelte-jfip4b .stat-value.orange.svelte-jfip4b{color:#ff3e00}.member-stats.svelte-jfip4b .stat-value.blue.svelte-jfip4b{color:#2563eb}.member-stats.svelte-jfip4b .stat-value.green.svelte-jfip4b{color:#059669}.member-stats.svelte-jfip4b .stat-value.red.svelte-jfip4b{color:#dc2626}.submissions-section.svelte-jfip4b h4.svelte-jfip4b{color:#111827;font-size:1.125rem;font-weight:600;margin:0 0 1rem 0;text-transform:none}.no-submissions.svelte-jfip4b.svelte-jfip4b{color:#6b7280;font-style:italic;text-align:center;padding:2rem}.submissions-list.svelte-jfip4b.svelte-jfip4b{display:flex;flex-direction:column;gap:0.75rem;max-height:15rem;overflow-y:auto}.submission-item.svelte-jfip4b.svelte-jfip4b{background:#f8fafc;border-radius:6px;padding:0.75rem;display:flex;justify-content:space-between;align-items:flex-start;gap:1rem}.submission-category.svelte-jfip4b.svelte-jfip4b{font-weight:600;color:#111827;font-size:0.875rem}.submission-description.svelte-jfip4b.svelte-jfip4b{color:#6b7280;font-size:0.75rem;margin:0.25rem 0}.submission-date.svelte-jfip4b.svelte-jfip4b{color:#9ca3af;font-size:0.75rem}.submission-status.svelte-jfip4b.svelte-jfip4b{text-align:right;flex-shrink:0}.submission-points.svelte-jfip4b.svelte-jfip4b{font-weight:bold;color:#ff3e00;font-size:0.875rem;margin-bottom:0.25rem}.status-badge.svelte-jfip4b.svelte-jfip4b{display:inline-flex;align-items:center;padding:0.125rem 0.5rem;border-radius:9999px;font-size:0.75rem;font-weight:500;border:1px solid}.status-badge.approved.svelte-jfip4b.svelte-jfip4b{background:#f0fdf4;color:#059669;border-color:#bbf7d0}.status-badge.rejected.svelte-jfip4b.svelte-jfip4b{background:#fef2f2;color:#dc2626;border-color:#fecaca}.status-badge.pending.svelte-jfip4b.svelte-jfip4b{background:#fffbeb;color:#d97706;border-color:#fed7aa}.edit-member-header.svelte-jfip4b.svelte-jfip4b{display:flex;align-items:center;gap:0.75rem;margin-bottom:1.5rem}.edit-form.svelte-jfip4b.svelte-jfip4b{display:flex;flex-direction:column;gap:1rem;margin-bottom:1.5rem}.form-group.svelte-jfip4b.svelte-jfip4b{display:flex;flex-direction:column}.form-group.svelte-jfip4b label.svelte-jfip4b{font-weight:500;color:#374151;margin-bottom:0.5rem;font-size:0.875rem}.form-group.svelte-jfip4b input.svelte-jfip4b{padding:0.75rem;border:1px solid #d1d5db;border-radius:6px;font-size:1rem;transition:border-color 0.2s, box-shadow 0.2s}.form-group.svelte-jfip4b input.svelte-jfip4b:focus{outline:none;border-color:#ff3e00;box-shadow:0 0 0 1px #ff3e00}.form-group.svelte-jfip4b input.svelte-jfip4b:disabled{background-color:#f9fafb;color:#6b7280;cursor:not-allowed}.role-change-member.svelte-jfip4b.svelte-jfip4b{display:flex;align-items:center;gap:0.75rem;margin-bottom:1.5rem}.member-avatar.small.svelte-jfip4b.svelte-jfip4b{width:48px;height:48px;font-size:1.125rem}.current-role.svelte-jfip4b.svelte-jfip4b{color:#6b7280;font-size:0.875rem}.role-selection.svelte-jfip4b.svelte-jfip4b{margin-bottom:1.5rem}.role-selection.svelte-jfip4b label.svelte-jfip4b{display:block;font-weight:500;color:#374151;margin-bottom:0.5rem}.role-selection.svelte-jfip4b select.svelte-jfip4b{width:100%;padding:0.75rem;border:1px solid #d1d5db;border-radius:6px;font-size:1rem;background:white;cursor:pointer}.role-selection.svelte-jfip4b select.svelte-jfip4b:focus{outline:none;border-color:#ff3e00;box-shadow:0 0 0 1px #ff3e00}.role-description.svelte-jfip4b.svelte-jfip4b{color:#6b7280;font-size:0.875rem;margin-top:0.5rem}.warning-message.svelte-jfip4b.svelte-jfip4b{background:#fffbeb;border:1px solid #fed7aa;border-radius:6px;padding:0.75rem;margin-bottom:1rem}.warning-message.svelte-jfip4b p.svelte-jfip4b{color:#92400e;font-size:0.875rem;margin:0}.error-message.svelte-jfip4b.svelte-jfip4b{background:#fef2f2;border:1px solid #fecaca;border-radius:6px;padding:0.75rem;margin-bottom:1rem}.error-message.svelte-jfip4b p.svelte-jfip4b{color:#991b1b;font-size:0.875rem;margin:0}.modal-actions.svelte-jfip4b.svelte-jfip4b{display:flex;gap:0.75rem;justify-content:flex-end}.cancel-button.svelte-jfip4b.svelte-jfip4b{padding:0.75rem 1rem;border:1px solid #d1d5db;border-radius:6px;background:white;color:#374151;font-size:1rem;font-weight:500;cursor:pointer;transition:all 0.2s ease}.cancel-button.svelte-jfip4b.svelte-jfip4b:hover{background:#f9fafb;border-color:#9ca3af}.save-button.svelte-jfip4b.svelte-jfip4b{padding:0.75rem 1rem;border:none;border-radius:6px;background:#ff3e00;color:white;font-size:1rem;font-weight:500;cursor:pointer;transition:all 0.2s ease}.save-button.svelte-jfip4b.svelte-jfip4b:hover:not(:disabled){background:#e63600}.save-button.svelte-jfip4b.svelte-jfip4b:disabled{background:#d1d5db;cursor:not-allowed}@media(max-width: 768px){.desktop-table.svelte-jfip4b.svelte-jfip4b{display:none}.mobile-cards.svelte-jfip4b.svelte-jfip4b{display:flex;flex-direction:column}.filters-row.svelte-jfip4b.svelte-jfip4b{flex-direction:column;align-items:stretch}.filters-group.svelte-jfip4b.svelte-jfip4b{min-width:100%}.controls-container.svelte-jfip4b.svelte-jfip4b{flex-direction:column;gap:1rem}.action-buttons.svelte-jfip4b.svelte-jfip4b{justify-content:stretch;width:100%}.action-buttons.svelte-jfip4b button.svelte-jfip4b{flex:1}.filter-select.svelte-jfip4b.svelte-jfip4b{width:100%}.stats-grid.svelte-jfip4b.svelte-jfip4b{grid-template-columns:repeat(2, 1fr)}.member-stats.svelte-jfip4b.svelte-jfip4b{grid-template-columns:repeat(2, 1fr)}.modal-content.svelte-jfip4b.svelte-jfip4b{margin:1rem;max-height:calc(100vh - 2rem)}.modal-actions.svelte-jfip4b.svelte-jfip4b{flex-direction:column}.card-actions.svelte-jfip4b.svelte-jfip4b{flex-direction:column;gap:0.5rem}.card-actions.svelte-jfip4b button.svelte-jfip4b{width:100%}}@media(min-width: 640px){.card-stats.svelte-jfip4b.svelte-jfip4b{grid-template-columns:repeat(4, 1fr)}}",
  map: `{"version":3,"file":"+page.svelte","sources":["+page.svelte"],"sourcesContent":["<!-- src/routes/officer-tools/manage-members/+page.svelte -->\\n<script>\\n  import { onMount, onDestroy } from 'svelte';\\n  import { goto } from '$app/navigation';\\n  import { userProfile } from '$lib/stores/userProfile';\\n  import memberManagementStore, {\\n    members,\\n    filteredMembers,\\n    memberStats,\\n    isLoading,\\n    error,\\n    searchTerm,\\n    roleFilter,\\n    activityFilter,\\n    canManageOfficers\\n  } from '$lib/stores/memberManagementStore';\\n  import { Hero, Container, LoadingSpinner, EmptyState, Button } from '$lib/components/ui';\\n\\n  // Removed tab switching reload - causes issues with Supabase tab switching\\n  function setupEventHandlers() {\\n    // Tab visibility handling removed for better Supabase compatibility\\n    return () => {\\n      // No cleanup needed now\\n    };\\n  }\\n\\n  // Component state\\n  let selectedMember = null;\\n  let showMemberModal = false;\\n  let showRoleChangeModal = false;\\n  let showEditModal = false;\\n  let memberToPromote = null;\\n  let memberToEdit = null;\\n  let newRole = '';\\n  let editedName = '';\\n  let editedPhone = '';\\n  let editedEmail = '';\\n  let memberDetails = null;\\n  let loadingDetails = false;\\n  let isUpdatingMember = false;\\n  let unsubscribeVisibility = null;\\n\\n  // Role options for promotion/demotion\\n  const roleOptions = [\\n    { value: 'member', label: 'Member', description: 'Standard member privileges' },\\n    { value: 'officer', label: 'Officer', description: 'Can approve submissions and access officer tools' },\\n    { value: 'competition_director', label: 'Competition Director', description: 'Can manage competition entries and see brewer names' },\\n    { value: 'vice_president', label: 'Vice President', description: 'Can manage officers and access all tools' },\\n    { value: 'president', label: 'President', description: 'Full administrative access' }\\n  ];\\n\\n  // Helper function to format role display\\n  function formatRoleDisplay(role) {\\n    const roleMap = {\\n      'member': 'Member',\\n      'officer': 'Officer',\\n      'competition_director': 'Competition Director',\\n      'vice_president': 'Vice President',\\n      'president': 'President'\\n    };\\n    return roleMap[role] || 'Unknown';\\n  }\\n\\n  // Reactive variables for UI state\\n  $: isOfficer = $userProfile?.is_officer || false;\\n  $: hasManagePermissions = $canManageOfficers;\\n\\n  // Filter role options based on current user permissions\\n  $: availableRoleOptions = roleOptions.filter(option => {\\n    if ($userProfile?.role === 'president') {\\n      return true;\\n    } else if ($userProfile?.role === 'vice_president') {\\n      return option.value !== 'president';\\n    }\\n    return false;\\n  });\\n\\n  // Format date helper\\n  function formatDate(dateString) {\\n    if (!dateString) return 'Never';\\n    try {\\n      // Handle space-separated datetime format (e.g., \\"2025-08-29 03:43:21.894974\\")\\n      let isoString = dateString;\\n      if (dateString.includes(' ') && !dateString.includes('T')) {\\n        // Replace space with 'T' and add timezone if missing\\n        isoString = dateString.replace(' ', 'T');\\n        if (!isoString.includes('+') && !isoString.includes('Z')) {\\n          // Assume local timezone if no timezone specified\\n          isoString += 'Z';\\n        }\\n      }\\n\\n      const date = new Date(isoString);\\n      // Check if date is valid\\n      if (isNaN(date.getTime())) {\\n        console.warn('Invalid date after parsing:', dateString, '->', isoString);\\n        return 'Invalid Date';\\n      }\\n\\n      return date.toLocaleDateString('en-US', {\\n        year: 'numeric',\\n        month: 'short',\\n        day: 'numeric'\\n      });\\n    } catch (error) {\\n      console.warn('Error formatting date:', dateString, error);\\n      return 'Invalid Date';\\n    }\\n  }\\n\\n  // Get activity status\\n  function getActivityStatus(member) {\\n    if (!member.last_submission_date) return 'inactive';\\n    \\n    const ninetyDaysAgo = new Date();\\n    ninetyDaysAgo.setDate(ninetyDaysAgo.getDate() - 90);\\n    const lastActivity = new Date(member.last_submission_date);\\n    \\n    return lastActivity >= ninetyDaysAgo ? 'active' : 'inactive';\\n  }\\n\\n  // Open member details modal\\n  async function openMemberDetails(member) {\\n    selectedMember = member;\\n    showMemberModal = true;\\n    loadingDetails = true;\\n    memberDetails = null;\\n\\n    try {\\n      memberDetails = await memberManagementStore.getMemberDetails(member.id);\\n    } catch (err) {\\n      console.error('Failed to load member details:', err);\\n    } finally {\\n      loadingDetails = false;\\n    }\\n  }\\n\\n  // Open role change modal\\n  function openRoleChangeModal(member) {\\n    if (!hasManagePermissions) return;\\n    \\n    memberToPromote = member;\\n    newRole = member.role;\\n    showRoleChangeModal = true;\\n  }\\n\\n  // Open edit member modal\\n  function openEditModal(member) {\\n    if (!hasManagePermissions) return;\\n    memberToEdit = member;\\n    editedName = member.name || '';\\n    editedPhone = member.phone || '';\\n    editedEmail = member.email || '';\\n    showEditModal = true;\\n  }\\n  // Handle role change\\n  async function handleRoleChange() {\\n    if (!memberToPromote || !newRole) return;\\n\\n    try {\\n      await memberManagementStore.updateMemberRole(memberToPromote.id, newRole);\\n      showRoleChangeModal = false;\\n      memberToPromote = null;\\n      newRole = '';\\n      \\n      console.log('✅ Role updated successfully');\\n    } catch (err) {\\n      console.error('❌ Failed to update role:', err);\\n    }\\n  }\\n  // Handle member edit\\n  async function handleMemberEdit() {\\n    if (!memberToEdit || isUpdatingMember) return;\\n    // Validate inputs\\n    if (!editedName.trim()) {\\n      alert('Name cannot be empty');\\n      return;\\n    }\\n    // Validate email format\\n    const emailRegex = /^[^\\\\s@]+@[^\\\\s@]+\\\\.[^\\\\s@]+$/;\\n    if (editedEmail && !emailRegex.test(editedEmail)) {\\n      alert('Please enter a valid email address');\\n      return;\\n    }\\n    isUpdatingMember = true;\\n    try {\\n      const updates = {\\n        name: editedName.trim(),\\n        phone: editedPhone.trim() || null,\\n        email: editedEmail.trim() || null\\n      };\\n      const { data, error } = await supabase\\n        .from('members')\\n        .update(updates)\\n        .eq('id', memberToEdit.id)\\n        .select();\\n      if (error) throw error;\\n      console.log('✅ Member updated successfully');\\n      // Close modal and reset\\n      showEditModal = false;\\n      memberToEdit = null;\\n      editedName = '';\\n      editedPhone = '';\\n      editedEmail = '';\\n      // Refresh the members list\\n      await memberManagementStore.loadMembers(true);\\n    } catch (err) {\\n      console.error('❌ Failed to update member:', err);\\n      alert('Failed to update member. Please try again.');\\n    } finally {\\n      isUpdatingMember = false;\\n    }\\n  }\\n\\n  // Export members data\\n  async function exportData() {\\n    try {\\n      const data = await memberManagementStore.exportMembersData();\\n      const csv = [\\n        ['Name', 'Email', 'Role', 'Total Points', 'Monthly Points', 'Join Date', 'Last Activity', 'Total Submissions'],\\n        ...data.map(member => [\\n          member.name,\\n          member.email,\\n          member.role,\\n          member.totalPoints,\\n          member.monthlyPoints,\\n          member.joinDate,\\n          member.lastActivity,\\n          member.totalSubmissions\\n        ])\\n      ].map(row => row.join(',')).join('\\\\n');\\n\\n      const blob = new Blob([csv], { type: 'text/csv' });\\n      const url = window.URL.createObjectURL(blob);\\n      const a = document.createElement('a');\\n      a.href = url;\\n      a.download = \`jax-members-roster-\${new Date().toISOString().split('T')[0]}.csv\`;\\n      a.click();\\n      window.URL.revokeObjectURL(url);\\n    } catch (err) {\\n      console.error('Failed to export data:', err);\\n    }\\n  }\\n\\n  // Lifecycle\\n  onMount(async () => {\\n    unsubscribeVisibility = setupEventHandlers();\\n    \\n    if (!isOfficer) {\\n      goto('/');\\n      return;\\n    }\\n\\n    await memberManagementStore.loadMembers();\\n  });\\n\\n  onDestroy(() => {\\n    if (unsubscribeVisibility) {\\n      unsubscribeVisibility();\\n    }\\n  });\\n  // Import supabase for direct database operations\\n  import { supabase } from '../../../lib/supabaseClient';\\n<\/script>\\n\\n<Container size=\\"xl\\">\\n  {#if !isOfficer}\\n    <EmptyState\\n      icon=\\"🔒\\"\\n      title=\\"Access Denied\\"\\n      message=\\"You need officer privileges to access this page.\\"\\n    />\\n  {:else}\\n    <Hero title=\\"Manage Members\\" subtitle=\\"View and manage club members, their roles, activity, and point standings\\" icon=\\"👥\\" center={true} />\\n\\n    {#if $isLoading && $members.length === 0}\\n      <LoadingSpinner message=\\"Loading members...\\" />\\n    {:else if $error}\\n      <EmptyState\\n        icon=\\"❌\\"\\n        title=\\"Error loading members\\"\\n        message={$error}\\n      >\\n        <Button variant=\\"secondary\\" on:click={() => memberManagementStore.refresh()}>\\n          🔄 Try Again\\n        </Button>\\n      </EmptyState>\\n    {:else}\\n      <!-- Statistics Cards -->\\n      <div class=\\"stats-grid\\">\\n        <div class=\\"stat-card orange\\">\\n          <div class=\\"stat-value\\">{$memberStats.totalMembers}</div>\\n          <div class=\\"stat-label\\">Total Members</div>\\n        </div>\\n        <div class=\\"stat-card blue\\">\\n          <div class=\\"stat-value\\">{$memberStats.totalOfficers}</div>\\n          <div class=\\"stat-label\\">Officers</div>\\n        </div>\\n        <div class=\\"stat-card green\\">\\n          <div class=\\"stat-value\\">{$memberStats.activeMembers}</div>\\n          <div class=\\"stat-label\\">Active (90 days)</div>\\n        </div>\\n        <div class=\\"stat-card red\\">\\n          <div class=\\"stat-value\\">{$memberStats.avgPointsPerMember}</div>\\n          <div class=\\"stat-label\\">Avg Points</div>\\n        </div>\\n      </div>\\n\\n      <!-- Controls Section -->\\n      <div class=\\"controls-section\\">\\n        <div class=\\"controls-container\\">\\n          <div class=\\"filters-group\\">\\n          <div class=\\"search-box\\">\\n            <input \\n              type=\\"text\\" \\n              placeholder=\\"Search members...\\" \\n              bind:value={$searchTerm}\\n            />\\n            <span class=\\"search-icon\\">🔍</span>\\n          </div>\\n\\n            <div class=\\"filters-row\\">\\n          <select bind:value={$roleFilter} class=\\"filter-select\\">\\n            <option value=\\"all\\">All Roles</option>\\n            <option value=\\"president\\">Presidents</option>\\n            <option value=\\"vice_president\\">Vice Presidents</option>\\n            <option value=\\"competition_director\\">Competition Directors</option>\\n            <option value=\\"officer\\">Officers</option>\\n            <option value=\\"member\\">Members</option>\\n          </select>\\n\\n          <select bind:value={$activityFilter} class=\\"filter-select\\">\\n            <option value=\\"all\\">All Activity</option>\\n            <option value=\\"active\\">Active (90 days)</option>\\n            <option value=\\"inactive\\">Inactive (90+ days)</option>\\n          </select>\\n        </div>\\n          </div>\\n\\n        <div class=\\"action-buttons\\">\\n          <button on:click={() => memberManagementStore.resetFilters()} class=\\"reset-button\\">\\n            🔄 Reset\\n          </button>\\n          <button on:click={exportData} class=\\"export-button\\">\\n            📊 Export\\n          </button>\\n          </div>\\n        </div>\\n      </div>\\n\\n      {#if $filteredMembers.length === 0 && $members.length > 0}\\n        <EmptyState\\n          icon=\\"🔍\\"\\n          title=\\"No members found\\"\\n          message=\\"Try adjusting your search or filter criteria\\"\\n        >\\n          <Button variant=\\"secondary\\" on:click={() => memberManagementStore.resetFilters()}>\\n            Clear Filters\\n          </Button>\\n        </EmptyState>\\n      {:else if $members.length === 0}\\n        <EmptyState\\n          icon=\\"👥\\"\\n          title=\\"No members yet\\"\\n          message=\\"Members will appear here once they join the club\\"\\n        />\\n      {:else}\\n        <!-- Members List -->\\n        <div class=\\"members-container\\">\\n          <!-- Desktop Table -->\\n          <div class=\\"desktop-table\\">\\n            <table class=\\"members-table\\">\\n              <thead>\\n                <tr>\\n                  <th>Member</th>\\n                  <th>Role</th>\\n                  <th>Points</th>\\n                  <th>Activity</th>\\n                  <th>Joined</th>\\n                  <th>Actions</th>\\n                </tr>\\n              </thead>\\n              <tbody>\\n                {#each $filteredMembers as member}\\n                  <tr>\\n                    <td>\\n                      <div class=\\"member-info\\">\\n                        <div class=\\"member-avatar\\">\\n                          {member.name?.charAt(0) || '?'}\\n                        </div>\\n                        <div class=\\"member-details\\">\\n                          <div class=\\"member-name\\">{member.name}</div>\\n                          <div class=\\"member-email\\">{member.email}</div>\\n                        </div>\\n                      </div>\\n                    </td>\\n                    <td>\\n                      <span class=\\"role-badge {member.role}\\">\\n                        {formatRoleDisplay(member.role)}\\n                      </span>\\n                    </td>\\n                    <td>\\n                      <div class=\\"points-info\\">\\n                        <div class=\\"total-points\\">{member.total_points} total</div>\\n                        <div class=\\"monthly-points\\">{member.monthly_points} this month</div>\\n                      </div>\\n                    </td>\\n                    <td>\\n                      <div class=\\"activity-info\\">\\n                        <span class=\\"activity-badge {getActivityStatus(member)}\\">\\n                          {getActivityStatus(member) === 'active' ? '✅ Active' : '💤 Inactive'}\\n                        </span>\\n                        <div class=\\"last-activity\\">Last: {formatDate(member.last_submission_date)}</div>\\n                      </div>\\n                    </td>\\n                    <td class=\\"join-date\\">\\n                      {formatDate(member.join_date)}\\n                    </td>\\n                    <td>\\n                      <div class=\\"action-buttons-cell\\">\\n                        <button on:click={() => openMemberDetails(member)} class=\\"view-button\\">\\n                          👁️ View\\n                        </button>\\n                        {#if hasManagePermissions && member.id !== $userProfile?.id}\\n                          <button on:click={() => openEditModal(member)} class=\\"edit-button\\">\\n                            ✏️ Edit\\n                          </button>\\n                          <button on:click={() => openRoleChangeModal(member)} class=\\"manage-button\\">\\n                            ⚡ Manage Role\\n                          </button>\\n                        {/if}\\n                      </div>\\n                    </td>\\n                  </tr>\\n                {/each}\\n              </tbody>\\n            </table>\\n          </div>\\n\\n          <!-- Mobile Cards -->\\n          <div class=\\"mobile-cards\\">\\n            {#each $filteredMembers as member}\\n              <div class=\\"member-card\\">\\n                <div class=\\"card-header\\">\\n                  <div class=\\"member-info\\">\\n                    <div class=\\"member-avatar\\">\\n                      {member.name?.charAt(0) || '?'}\\n                    </div>\\n                    <div class=\\"member-details\\">\\n                      <div class=\\"member-name\\">{member.name}</div>\\n                      <div class=\\"member-email\\">{member.email}</div>\\n                    </div>\\n                  </div>\\n                  <span class=\\"role-badge {member.role}\\">\\n                    {formatRoleDisplay(member.role)}\\n                  </span>\\n                </div>\\n                \\n                <div class=\\"card-stats\\">\\n                  <div class=\\"stat-item\\">\\n                    <span class=\\"stat-label\\">Total Points</span>\\n                    <span class=\\"stat-value\\">{member.total_points}</span>\\n                  </div>\\n                  <div class=\\"stat-item\\">\\n                    <span class=\\"stat-label\\">Monthly Points</span>\\n                    <span class=\\"stat-value\\">{member.monthly_points}</span>\\n                  </div>\\n                  <div class=\\"stat-item\\">\\n                    <span class=\\"stat-label\\">Activity</span>\\n                    <span class=\\"activity-badge {getActivityStatus(member)}\\">\\n                      {getActivityStatus(member) === 'active' ? '✅ Active' : '💤 Inactive'}\\n                    </span>\\n                  </div>\\n                  <div class=\\"stat-item\\">\\n                    <span class=\\"stat-label\\">Joined</span>\\n                    <span class=\\"stat-value\\">{formatDate(member.join_date)}</span>\\n                  </div>\\n                </div>\\n                \\n                <div class=\\"card-actions\\">\\n                  <button on:click={() => openMemberDetails(member)} class=\\"view-button-mobile\\">\\n                    👁️ View Details\\n                  </button>\\n                  {#if hasManagePermissions && member.id !== $userProfile?.id}\\n                    <button on:click={() => openEditModal(member)} class=\\"edit-button-mobile\\">\\n                      ✏️ Edit\\n                    </button>\\n                    <button on:click={() => openRoleChangeModal(member)} class=\\"manage-button-mobile\\">\\n                      ⚡ Manage Role\\n                    </button>\\n                  {/if}\\n                </div>\\n              </div>\\n            {/each}\\n          </div>\\n        </div>\\n      {/if}\\n    {/if}\\n  {/if}\\n</Container>\\n\\n<!-- Member Details Modal -->\\n{#if showMemberModal && selectedMember}\\n  <div class=\\"modal-backdrop\\" on:click={() => { showMemberModal = false; selectedMember = null; memberDetails = null; }}>\\n    <div class=\\"modal-content\\" on:click|stopPropagation>\\n      <div class=\\"modal-header\\">\\n        <h2>Member Details</h2>\\n        <button class=\\"close-button\\" on:click={() => { showMemberModal = false; selectedMember = null; memberDetails = null; }}>\\n          ✕\\n        </button>\\n      </div>\\n\\n      <div class=\\"modal-body\\">\\n        <div class=\\"member-profile\\">\\n          <div class=\\"profile-avatar\\">\\n            {selectedMember.name?.charAt(0) || '?'}\\n          </div>\\n          <div class=\\"profile-info\\">\\n            <h3>{selectedMember.name}</h3>\\n            <p>{selectedMember.email}</p>\\n            <span class=\\"role-badge {selectedMember.role}\\">\\n              {formatRoleDisplay(selectedMember.role)}\\n            </span>\\n          </div>\\n        </div>\\n\\n        <div class=\\"member-stats\\">\\n          <div class=\\"stat-item\\">\\n            <div class=\\"stat-value orange\\">{selectedMember.total_points}</div>\\n            <div class=\\"stat-label\\">Total Points</div>\\n          </div>\\n          <div class=\\"stat-item\\">\\n            <div class=\\"stat-value blue\\">{selectedMember.monthly_points}</div>\\n            <div class=\\"stat-label\\">Monthly Points</div>\\n          </div>\\n          <div class=\\"stat-item\\">\\n            <div class=\\"stat-value green\\">{selectedMember.total_approved_submissions}</div>\\n            <div class=\\"stat-label\\">Submissions</div>\\n          </div>\\n          <div class=\\"stat-item\\">\\n            <div class=\\"stat-value red\\">\\n              {formatDate(selectedMember.last_submission_date).split(',')[0]}\\n            </div>\\n            <div class=\\"stat-label\\">Last Activity</div>\\n          </div>\\n        </div>\\n\\n        {#if loadingDetails}\\n          <div class=\\"loading-state\\">\\n            <div class=\\"spinner\\"></div>\\n            <p>Loading details...</p>\\n          </div>\\n        {:else if memberDetails?.recentSubmissions}\\n          <div class=\\"submissions-section\\">\\n            <h4>Recent Submissions</h4>\\n            {#if memberDetails.recentSubmissions.length === 0}\\n              <p class=\\"no-submissions\\">No submissions yet</p>\\n            {:else}\\n              <div class=\\"submissions-list\\">\\n                {#each memberDetails.recentSubmissions as submission}\\n                  <div class=\\"submission-item\\">\\n                    <div class=\\"submission-info\\">\\n                      <div class=\\"submission-category\\">{submission.category}</div>\\n                      <div class=\\"submission-description\\">{submission.description || 'No description'}</div>\\n                      <div class=\\"submission-date\\">{formatDate(submission.submitted_at)}</div>\\n                    </div>\\n                    <div class=\\"submission-status\\">\\n                      <div class=\\"submission-points\\">{submission.points} pts</div>\\n                      <span class=\\"status-badge {submission.approved ? 'approved' : submission.approved === false ? 'rejected' : 'pending'}\\">\\n                        {submission.approved ? '✅ Approved' : submission.approved === false ? '❌ Rejected' : '⏳ Pending'}\\n                      </span>\\n                    </div>\\n                  </div>\\n                {/each}\\n              </div>\\n            {/if}\\n          </div>\\n        {/if}\\n      </div>\\n    </div>\\n  </div>\\n{/if}\\n\\n<!-- Edit Member Modal -->\\n{#if showEditModal && memberToEdit}\\n  <div class=\\"modal-backdrop\\" on:click={() => { showEditModal = false; memberToEdit = null; editedName = ''; editedPhone = ''; editedEmail = ''; }}>\\n    <div class=\\"modal-content small\\" on:click|stopPropagation>\\n      <div class=\\"modal-header\\">\\n        <h2>Edit Member Information</h2>\\n        <button class=\\"close-button\\" on:click={() => { showEditModal = false; memberToEdit = null; editedName = ''; editedPhone = ''; editedEmail = ''; }}>\\n          ✕\\n        </button>\\n      </div>\\n      <div class=\\"modal-body\\">\\n        <div class=\\"edit-member-header\\">\\n          <div class=\\"member-avatar small\\">\\n            {memberToEdit.name?.charAt(0) || '?'}\\n          </div>\\n          <div class=\\"member-info\\">\\n            <div class=\\"member-name\\">{memberToEdit.name}</div>\\n            <div class=\\"current-role\\">Currently: {formatRoleDisplay(memberToEdit.role)}</div>\\n          </div>\\n        </div>\\n        <div class=\\"edit-form\\">\\n          <div class=\\"form-group\\">\\n            <label for=\\"editName\\">Full Name *</label>\\n            <input \\n              id=\\"editName\\"\\n              type=\\"text\\" \\n              bind:value={editedName} \\n              placeholder=\\"Enter full name\\"\\n              disabled={isUpdatingMember}\\n            />\\n          </div>\\n          <div class=\\"form-group\\">\\n            <label for=\\"editEmail\\">Email Address *</label>\\n            <input \\n              id=\\"editEmail\\"\\n              type=\\"email\\" \\n              bind:value={editedEmail} \\n              placeholder=\\"Enter email address\\"\\n              disabled={isUpdatingMember}\\n            />\\n          </div>\\n          <div class=\\"form-group\\">\\n            <label for=\\"editPhone\\">Phone Number</label>\\n            <input \\n              id=\\"editPhone\\"\\n              type=\\"tel\\" \\n              bind:value={editedPhone} \\n              placeholder=\\"(555) 123-4567\\"\\n              disabled={isUpdatingMember}\\n            />\\n          </div>\\n        </div>\\n        <div class=\\"modal-actions\\">\\n          <button \\n            class=\\"cancel-button\\" \\n            on:click={() => { showEditModal = false; memberToEdit = null; editedName = ''; editedPhone = ''; editedEmail = ''; }}\\n            disabled={isUpdatingMember}\\n          >\\n            Cancel\\n          </button>\\n          <button \\n            class=\\"save-button\\"\\n            on:click={handleMemberEdit}\\n            disabled={isUpdatingMember || !editedName.trim() || !editedEmail.trim()}\\n          >\\n            {isUpdatingMember ? '⏳ Saving...' : '💾 Save Changes'}\\n          </button>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n{/if}\\n<!-- Role Change Modal -->\\n{#if showRoleChangeModal && memberToPromote}\\n  <div class=\\"modal-backdrop\\" on:click={() => { showRoleChangeModal = false; memberToPromote = null; newRole = ''; }}>\\n    <div class=\\"modal-content small\\" on:click|stopPropagation>\\n      <div class=\\"modal-header\\">\\n        <h2>Change Member Role</h2>\\n        <button class=\\"close-button\\" on:click={() => { showRoleChangeModal = false; memberToPromote = null; newRole = ''; }}>\\n          ✕\\n        </button>\\n      </div>\\n\\n      <div class=\\"modal-body\\">\\n        <div class=\\"role-change-member\\">\\n          <div class=\\"member-avatar small\\">\\n            {memberToPromote.name?.charAt(0) || '?'}\\n          </div>\\n          <div class=\\"member-info\\">\\n            <div class=\\"member-name\\">{memberToPromote.name}</div>\\n            <div class=\\"current-role\\">Current: {formatRoleDisplay(memberToPromote.role)}</div>\\n          </div>\\n        </div>\\n\\n        <div class=\\"role-selection\\">\\n          <label for=\\"newRole\\">New Role</label>\\n          <select id=\\"newRole\\" bind:value={newRole}>\\n            {#each availableRoleOptions as option}\\n              <option value={option.value}>{option.label}</option>\\n            {/each}\\n          </select>\\n          \\n          {#if newRole}\\n            <p class=\\"role-description\\">\\n              {availableRoleOptions.find(o => o.value === newRole)?.description}\\n            </p>\\n          {/if}\\n        </div>\\n\\n        {#if newRole === memberToPromote.role}\\n          <div class=\\"warning-message\\">\\n            <p>⚠️ This member already has this role</p>\\n          </div>\\n        {/if}\\n\\n        {#if newRole === 'president' && $userProfile?.role !== 'president'}\\n          <div class=\\"error-message\\">\\n            <p>❌ Only presidents can promote members to president</p>\\n          </div>\\n        {/if}\\n\\n        <div class=\\"modal-actions\\">\\n          <button class=\\"cancel-button\\" on:click={() => { showRoleChangeModal = false; memberToPromote = null; newRole = ''; }}>\\n            Cancel\\n          </button>\\n          <button \\n            class=\\"save-button\\"\\n            on:click={handleRoleChange}\\n            disabled={newRole === memberToPromote.role || (newRole === 'president' && $userProfile?.role !== 'president') || $isLoading}\\n          >\\n            {$isLoading ? '⏳ Updating...' : '✅ Update Role'}\\n          </button>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n{/if}\\n\\n<style>\\n\\n  /* Statistics Cards */\\n  .stats-grid {\\n    display: grid;\\n    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\\n    gap: 1rem;\\n    margin-bottom: 2rem;\\n    text-align: center;\\n  }\\n\\n  .stat-card {\\n    background: white;\\n    border-radius: 6px;\\n    padding: 1.5rem;\\n    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\\n    border-left: 4px solid;\\n  }\\n\\n  .stat-card.orange { border-left-color: #ff3e00; }\\n  .stat-card.blue { border-left-color: #2563eb; }\\n  .stat-card.green { border-left-color: #059669; }\\n  .stat-card.red { border-left-color: #dc2626; }\\n\\n  .stat-value {\\n    font-size: 2rem;\\n    font-weight: bold;\\n    margin-bottom: 0.5rem;\\n  }\\n\\n  .stat-card.orange .stat-value { color: #ff3e00; }\\n  .stat-card.blue .stat-value { color: #2563eb; }\\n  .stat-card.green .stat-value { color: #059669; }\\n  .stat-card.red .stat-value { color: #dc2626; }\\n\\n  .stat-label {\\n    font-size: 0.875rem;\\n    color: #6b7280;\\n    font-weight: 500;\\n  }\\n\\n  /* Controls Section */\\n  .controls-section {\\n    background: white;\\n    border-radius: 6px;\\n    padding: 1.5rem;\\n    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\\n    margin-bottom: 2rem;\\n    text-align: left;\\n  }\\n\\n  .controls-container {\\n    display: flex;\\n    justify-content: space-between;\\n    align-items: flex-start;\\n    gap: 2rem;\\n    flex-wrap: wrap;\\n  }\\n  .filters-group {\\n    display: flex;\\n    flex-direction: column;\\n    gap: 1rem;\\n    flex: 1;\\n    min-width: 300px;\\n  }\\n  .filters-row {\\n    display: flex;\\n    gap: 1rem;\\n    align-items: center;\\n  }\\n\\n  .search-box {\\n    position: relative;\\n    width: 100%;\\n    max-width: 350px;\\n  }\\n\\n  .search-box input {\\n    width: 100%;\\n    padding: 0.75rem 0.75rem 0.75rem 2.5rem;\\n    border: 1px solid #d1d5db;\\n    border-radius: 6px;\\n    font-size: 1rem;\\n    transition: border-color 0.2s, box-shadow 0.2s;\\n    box-sizing: border-box;\\n  }\\n\\n  .search-box input:focus {\\n    outline: none;\\n    border-color: #ff3e00;\\n    box-shadow: 0 0 0 1px #ff3e00;\\n  }\\n\\n  .search-icon {\\n    position: absolute;\\n    left: 0.75rem;\\n    top: 50%;\\n    transform: translateY(-50%);\\n    color: #6b7280;\\n  }\\n\\n  .filter-select {\\n    padding: 0.75rem;\\n    border: 1px solid #d1d5db;\\n    border-radius: 6px;\\n    font-size: 1rem;\\n    background: white;\\n    cursor: pointer;\\n    min-width: 140px;\\n    box-sizing: border-box;\\n  }\\n\\n  .filter-select:focus {\\n    outline: none;\\n    border-color: #ff3e00;\\n    box-shadow: 0 0 0 1px #ff3e00;\\n  }\\n\\n  .action-buttons {\\n    display: flex;\\n    gap: 0.5rem;\\n    flex-shrink: 0;\\n  }\\n\\n  .reset-button, .export-button {\\n    padding: 0.75rem 1rem;\\n    border: 1px solid #d1d5db;\\n    border-radius: 6px;\\n    font-size: 0.875rem;\\n    font-weight: 500;\\n    cursor: pointer;\\n    transition: all 0.2s ease;\\n  }\\n\\n  .reset-button {\\n    background: white;\\n    color: #6b7280;\\n  }\\n\\n  .reset-button:hover {\\n    background: #f9fafb;\\n    border-color: #9ca3af;\\n  }\\n\\n  .export-button {\\n    background: #2563eb;\\n    color: white;\\n    border-color: #2563eb;\\n  }\\n\\n  .export-button:hover {\\n    background: #1d4ed8;\\n  }\\n\\n\\n  /* Members Container */\\n  .members-container {\\n    background: white;\\n    border-radius: 6px;\\n    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\\n    overflow: hidden;\\n  }\\n\\n  /* Desktop Table */\\n  .desktop-table {\\n    display: block;\\n  }\\n\\n  .members-table {\\n    width: 100%;\\n    border-collapse: collapse;\\n  }\\n\\n  .members-table th {\\n    background: #f8fafc;\\n    padding: 1rem;\\n    text-align: left;\\n    font-weight: 600;\\n    color: #374151;\\n    font-size: 0.75rem;\\n    text-transform: uppercase;\\n    letter-spacing: 0.05em;\\n    border-bottom: 1px solid #e5e7eb;\\n  }\\n\\n  .members-table td {\\n    padding: 1rem;\\n    border-bottom: 1px solid #f1f5f9;\\n  }\\n\\n  .members-table tr:hover {\\n    background: #f8fafc;\\n  }\\n\\n  .member-info {\\n    display: flex;\\n    align-items: center;\\n    gap: 0.75rem;\\n  }\\n\\n  .member-avatar {\\n    width: 40px;\\n    height: 40px;\\n    border-radius: 50%;\\n    background: linear-gradient(135deg, #ff3e00 0%, #e63600 100%);\\n    display: flex;\\n    align-items: center;\\n    justify-content: center;\\n    font-size: 1rem;\\n    font-weight: 700;\\n    color: white;\\n    flex-shrink: 0;\\n  }\\n\\n  .member-details {\\n    min-width: 0;\\n  }\\n\\n  .member-name {\\n    font-weight: 600;\\n    color: #111827;\\n    font-size: 0.875rem;\\n  }\\n\\n  .member-email {\\n    color: #6b7280;\\n    font-size: 0.75rem;\\n  }\\n\\n  .role-badge {\\n    display: inline-flex;\\n    align-items: center;\\n    padding: 0.25rem 0.75rem;\\n    border-radius: 9999px;\\n    font-size: 0.75rem;\\n    font-weight: 500;\\n    border: 1px solid;\\n  }\\n\\n  .role-badge.president {\\n    background: #faf5ff;\\n    color: #7c3aed;\\n    border-color: #c4b5fd;\\n  }\\n\\n  .role-badge.vice_president {\\n    background: #eff6ff;\\n    color: #2563eb;\\n    border-color: #93c5fd;\\n  }\\n\\n  .role-badge.officer {\\n    background: #fff7ed;\\n    color: #ea580c;\\n    border-color: #fed7aa;\\n  }\\n\\n  .role-badge.competition_director {\\n    background: #fef3c7;\\n    color: #d97706;\\n    border-color: #fde68a;\\n  }\\n\\n  .role-badge.member {\\n    background: #f9fafb;\\n    color: #374151;\\n    border-color: #d1d5db;\\n  }\\n\\n  .points-info {\\n    min-width: 0;\\n  }\\n\\n  .total-points {\\n    font-weight: 600;\\n    color: #111827;\\n    font-size: 0.875rem;\\n  }\\n\\n  .monthly-points {\\n    color: #6b7280;\\n    font-size: 0.75rem;\\n  }\\n\\n  .activity-info {\\n    min-width: 0;\\n  }\\n\\n  .activity-badge {\\n    display: inline-flex;\\n    align-items: center;\\n    padding: 0.25rem 0.5rem;\\n    border-radius: 9999px;\\n    font-size: 0.75rem;\\n    font-weight: 500;\\n    border: 1px solid;\\n    margin-bottom: 0.25rem;\\n  }\\n\\n  .activity-badge.active {\\n    background: #f0fdf4;\\n    color: #059669;\\n    border-color: #bbf7d0;\\n  }\\n\\n  .activity-badge.inactive {\\n    background: #fef2f2;\\n    color: #dc2626;\\n    border-color: #fecaca;\\n  }\\n\\n  .last-activity {\\n    color: #6b7280;\\n    font-size: 0.75rem;\\n  }\\n\\n  .join-date {\\n    color: #6b7280;\\n    font-size: 0.875rem;\\n  }\\n\\n  .action-buttons-cell {\\n    display: flex;\\n    gap: 0.5rem;\\n    flex-wrap: wrap;\\n  }\\n\\n  .view-button, .manage-button, .edit-button {\\n    padding: 0.375rem 0.75rem;\\n    border: none;\\n    border-radius: 4px;\\n    font-size: 0.75rem;\\n    font-weight: 500;\\n    cursor: pointer;\\n    transition: all 0.2s ease;\\n    text-decoration: none;\\n  }\\n\\n  .view-button {\\n    background: #2563eb;\\n    color: white;\\n  }\\n\\n  .view-button:hover {\\n    background: #1d4ed8;\\n  }\\n  .edit-button {\\n    background: #059669;\\n    color: white;\\n  }\\n  .edit-button:hover {\\n    background: #047857;\\n  }\\n\\n  .manage-button {\\n    background: #ff3e00;\\n    color: white;\\n  }\\n\\n  .manage-button:hover {\\n    background: #e63600;\\n  }\\n\\n  /* Mobile Cards */\\n  .mobile-cards {\\n    display: none;\\n    gap: 1rem;\\n    padding: 1rem;\\n  }\\n\\n  .member-card {\\n    background: white;\\n    border: 1px solid #e5e7eb;\\n    border-left: 4px solid #ff3e00;\\n    border-radius: 6px;\\n    padding: 1rem;\\n  }\\n\\n  .card-header {\\n    display: flex;\\n    align-items: center;\\n    justify-content: space-between;\\n    margin-bottom: 1rem;\\n  }\\n\\n  .card-stats {\\n    display: grid;\\n    grid-template-columns: 1fr 1fr;\\n    gap: 0.75rem;\\n    margin-bottom: 1rem;\\n  }\\n\\n  .stat-item {\\n    display: flex;\\n    flex-direction: column;\\n    gap: 0.25rem;\\n  }\\n\\n  .stat-item .stat-label {\\n    color: #6b7280;\\n    font-size: 0.75rem;\\n  }\\n\\n  .stat-item .stat-value {\\n    font-weight: 600;\\n    color: #111827;\\n  }\\n\\n  .card-actions {\\n    display: flex;\\n    gap: 0.5rem;\\n    padding-top: 0.75rem;\\n    border-top: 1px solid #f1f5f9;\\n  }\\n\\n  .view-button-mobile, .manage-button-mobile, .edit-button-mobile {\\n    flex: 1;\\n    padding: 0.75rem;\\n    border: none;\\n    border-radius: 6px;\\n    font-size: 0.875rem;\\n    font-weight: 500;\\n    cursor: pointer;\\n    transition: all 0.2s ease;\\n  }\\n\\n  .view-button-mobile {\\n    background: #2563eb;\\n    color: white;\\n  }\\n\\n  .view-button-mobile:hover {\\n    background: #1d4ed8;\\n  }\\n  .edit-button-mobile {\\n    background: #059669;\\n    color: white;\\n  }\\n  .edit-button-mobile:hover {\\n    background: #047857;\\n  }\\n\\n  .manage-button-mobile {\\n    background: #ff3e00;\\n    color: white;\\n  }\\n\\n  .manage-button-mobile:hover {\\n    background: #e63600;\\n  }\\n\\n  /* Modal Styles */\\n  .modal-backdrop {\\n    position: fixed;\\n    top: 0;\\n    left: 0;\\n    right: 0;\\n    bottom: 0;\\n    background: rgba(0, 0, 0, 0.5);\\n    display: flex;\\n    align-items: center;\\n    justify-content: center;\\n    padding: 1rem;\\n    z-index: 50;\\n  }\\n\\n  .modal-content {\\n    background: white;\\n    border-radius: 6px;\\n    max-width: 42rem;\\n    width: 100%;\\n    max-height: 90vh;\\n    overflow: auto;\\n    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1);\\n  }\\n\\n  .modal-content.small {\\n    max-width: 28rem;\\n  }\\n\\n  .modal-header {\\n    display: flex;\\n    align-items: center;\\n    justify-content: space-between;\\n    padding: 1.5rem;\\n    border-bottom: 1px solid #e5e7eb;\\n  }\\n\\n  .modal-header h2 {\\n    color: #111827;\\n    font-size: 1.25rem;\\n    font-weight: 700;\\n    margin: 0;\\n    text-transform: none;\\n  }\\n\\n  .close-button {\\n    background: none;\\n    border: none;\\n    color: #9ca3af;\\n    font-size: 1.5rem;\\n    cursor: pointer;\\n    padding: 0;\\n    line-height: 1;\\n  }\\n\\n  .close-button:hover {\\n    color: #6b7280;\\n  }\\n\\n  .modal-body {\\n    padding: 1.5rem;\\n  }\\n\\n  .member-profile {\\n    display: flex;\\n    align-items: center;\\n    gap: 1rem;\\n    margin-bottom: 1.5rem;\\n  }\\n\\n  .profile-avatar {\\n    width: 64px;\\n    height: 64px;\\n    border-radius: 50%;\\n    background: linear-gradient(135deg, #ff3e00 0%, #e63600 100%);\\n    display: flex;\\n    align-items: center;\\n    justify-content: center;\\n    font-size: 1.5rem;\\n    font-weight: 700;\\n    color: white;\\n    flex-shrink: 0;\\n  }\\n\\n  .profile-info h3 {\\n    color: #111827;\\n    font-size: 1.25rem;\\n    font-weight: 600;\\n    margin: 0 0 0.25rem 0;\\n    text-transform: none;\\n  }\\n\\n  .profile-info p {\\n    color: #6b7280;\\n    margin: 0 0 0.5rem 0;\\n  }\\n\\n  .member-stats {\\n    display: grid;\\n    grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));\\n    gap: 1rem;\\n    margin-bottom: 1.5rem;\\n    text-align: center;\\n  }\\n\\n  .member-stats .stat-item {\\n    align-items: center;\\n  }\\n\\n  .member-stats .stat-value {\\n    font-size: 1.5rem;\\n    font-weight: bold;\\n    margin-bottom: 0.25rem;\\n  }\\n\\n  .member-stats .stat-value.orange { color: #ff3e00; }\\n  .member-stats .stat-value.blue { color: #2563eb; }\\n  .member-stats .stat-value.green { color: #059669; }\\n  .member-stats .stat-value.red { color: #dc2626; }\\n\\n  .submissions-section h4 {\\n    color: #111827;\\n    font-size: 1.125rem;\\n    font-weight: 600;\\n    margin: 0 0 1rem 0;\\n    text-transform: none;\\n  }\\n\\n  .no-submissions {\\n    color: #6b7280;\\n    font-style: italic;\\n    text-align: center;\\n    padding: 2rem;\\n  }\\n\\n  .submissions-list {\\n    display: flex;\\n    flex-direction: column;\\n    gap: 0.75rem;\\n    max-height: 15rem;\\n    overflow-y: auto;\\n  }\\n\\n  .submission-item {\\n    background: #f8fafc;\\n    border-radius: 6px;\\n    padding: 0.75rem;\\n    display: flex;\\n    justify-content: space-between;\\n    align-items: flex-start;\\n    gap: 1rem;\\n  }\\n\\n  .submission-category {\\n    font-weight: 600;\\n    color: #111827;\\n    font-size: 0.875rem;\\n  }\\n\\n  .submission-description {\\n    color: #6b7280;\\n    font-size: 0.75rem;\\n    margin: 0.25rem 0;\\n  }\\n\\n  .submission-date {\\n    color: #9ca3af;\\n    font-size: 0.75rem;\\n  }\\n\\n  .submission-status {\\n    text-align: right;\\n    flex-shrink: 0;\\n  }\\n\\n  .submission-points {\\n    font-weight: bold;\\n    color: #ff3e00;\\n    font-size: 0.875rem;\\n    margin-bottom: 0.25rem;\\n  }\\n\\n  .status-badge {\\n    display: inline-flex;\\n    align-items: center;\\n    padding: 0.125rem 0.5rem;\\n    border-radius: 9999px;\\n    font-size: 0.75rem;\\n    font-weight: 500;\\n    border: 1px solid;\\n  }\\n\\n  .status-badge.approved {\\n    background: #f0fdf4;\\n    color: #059669;\\n    border-color: #bbf7d0;\\n  }\\n\\n  .status-badge.rejected {\\n    background: #fef2f2;\\n    color: #dc2626;\\n    border-color: #fecaca;\\n  }\\n\\n  .status-badge.pending {\\n    background: #fffbeb;\\n    color: #d97706;\\n    border-color: #fed7aa;\\n  }\\n\\n  /* Edit Member Modal */\\n  .edit-member-header {\\n    display: flex;\\n    align-items: center;\\n    gap: 0.75rem;\\n    margin-bottom: 1.5rem;\\n  }\\n  .edit-form {\\n    display: flex;\\n    flex-direction: column;\\n    gap: 1rem;\\n    margin-bottom: 1.5rem;\\n  }\\n  .form-group {\\n    display: flex;\\n    flex-direction: column;\\n  }\\n  .form-group label {\\n    font-weight: 500;\\n    color: #374151;\\n    margin-bottom: 0.5rem;\\n    font-size: 0.875rem;\\n  }\\n  .form-group input {\\n    padding: 0.75rem;\\n    border: 1px solid #d1d5db;\\n    border-radius: 6px;\\n    font-size: 1rem;\\n    transition: border-color 0.2s, box-shadow 0.2s;\\n  }\\n  .form-group input:focus {\\n    outline: none;\\n    border-color: #ff3e00;\\n    box-shadow: 0 0 0 1px #ff3e00;\\n  }\\n  .form-group input:disabled {\\n    background-color: #f9fafb;\\n    color: #6b7280;\\n    cursor: not-allowed;\\n  }\\n  /* Role Change Modal */\\n  .role-change-member {\\n    display: flex;\\n    align-items: center;\\n    gap: 0.75rem;\\n    margin-bottom: 1.5rem;\\n  }\\n\\n  .member-avatar.small {\\n    width: 48px;\\n    height: 48px;\\n    font-size: 1.125rem;\\n  }\\n\\n  .current-role {\\n    color: #6b7280;\\n    font-size: 0.875rem;\\n  }\\n\\n  .role-selection {\\n    margin-bottom: 1.5rem;\\n  }\\n\\n  .role-selection label {\\n    display: block;\\n    font-weight: 500;\\n    color: #374151;\\n    margin-bottom: 0.5rem;\\n  }\\n\\n  .role-selection select {\\n    width: 100%;\\n    padding: 0.75rem;\\n    border: 1px solid #d1d5db;\\n    border-radius: 6px;\\n    font-size: 1rem;\\n    background: white;\\n    cursor: pointer;\\n  }\\n\\n  .role-selection select:focus {\\n    outline: none;\\n    border-color: #ff3e00;\\n    box-shadow: 0 0 0 1px #ff3e00;\\n  }\\n\\n  .role-description {\\n    color: #6b7280;\\n    font-size: 0.875rem;\\n    margin-top: 0.5rem;\\n  }\\n\\n  .warning-message {\\n    background: #fffbeb;\\n    border: 1px solid #fed7aa;\\n    border-radius: 6px;\\n    padding: 0.75rem;\\n    margin-bottom: 1rem;\\n  }\\n\\n  .warning-message p {\\n    color: #92400e;\\n    font-size: 0.875rem;\\n    margin: 0;\\n  }\\n\\n  .error-message {\\n    background: #fef2f2;\\n    border: 1px solid #fecaca;\\n    border-radius: 6px;\\n    padding: 0.75rem;\\n    margin-bottom: 1rem;\\n  }\\n\\n  .error-message p {\\n    color: #991b1b;\\n    font-size: 0.875rem;\\n    margin: 0;\\n  }\\n\\n  .modal-actions {\\n    display: flex;\\n    gap: 0.75rem;\\n    justify-content: flex-end;\\n  }\\n\\n  .cancel-button {\\n    padding: 0.75rem 1rem;\\n    border: 1px solid #d1d5db;\\n    border-radius: 6px;\\n    background: white;\\n    color: #374151;\\n    font-size: 1rem;\\n    font-weight: 500;\\n    cursor: pointer;\\n    transition: all 0.2s ease;\\n  }\\n\\n  .cancel-button:hover {\\n    background: #f9fafb;\\n    border-color: #9ca3af;\\n  }\\n\\n  .save-button {\\n    padding: 0.75rem 1rem;\\n    border: none;\\n    border-radius: 6px;\\n    background: #ff3e00;\\n    color: white;\\n    font-size: 1rem;\\n    font-weight: 500;\\n    cursor: pointer;\\n    transition: all 0.2s ease;\\n  }\\n\\n  .save-button:hover:not(:disabled) {\\n    background: #e63600;\\n  }\\n\\n  .save-button:disabled {\\n    background: #d1d5db;\\n    cursor: not-allowed;\\n  }\\n\\n  /* Mobile Responsive */\\n  @media (max-width: 768px) {\\n\\n    .desktop-table {\\n      display: none;\\n    }\\n\\n    .mobile-cards {\\n      display: flex;\\n      flex-direction: column;\\n    }\\n\\n    .filters-row {\\n      flex-direction: column;\\n      align-items: stretch;\\n    }\\n\\n    .filters-group {\\n      min-width: 100%;\\n    }\\n    .controls-container {\\n      flex-direction: column;\\n      gap: 1rem;\\n    }\\n    .action-buttons {\\n      justify-content: stretch;\\n      width: 100%;\\n    }\\n\\n    .action-buttons button {\\n      flex: 1;\\n    }\\n    .filter-select {\\n      width: 100%;\\n    }\\n\\n    .stats-grid {\\n      grid-template-columns: repeat(2, 1fr);\\n    }\\n\\n    .member-stats {\\n      grid-template-columns: repeat(2, 1fr);\\n    }\\n\\n    .modal-content {\\n      margin: 1rem;\\n      max-height: calc(100vh - 2rem);\\n    }\\n\\n    .modal-actions {\\n      flex-direction: column;\\n    }\\n\\n    .card-actions {\\n      flex-direction: column;\\n      gap: 0.5rem;\\n    }\\n    .card-actions button {\\n      width: 100%;\\n    }\\n  }\\n\\n  @media (min-width: 640px) {\\n    .card-stats {\\n      grid-template-columns: repeat(4, 1fr);\\n    }\\n  }\\n</style>\\n"],"names":[],"mappings":"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"}`
};
function formatRoleDisplay(role) {
  const roleMap = {
    "member": "Member",
    "officer": "Officer",
    "competition_director": "Competition Director",
    "vice_president": "Vice President",
    "president": "President"
  };
  return roleMap[role] || "Unknown";
}
function formatDate(dateString) {
  if (!dateString) return "Never";
  try {
    let isoString = dateString;
    if (dateString.includes(" ") && !dateString.includes("T")) {
      isoString = dateString.replace(" ", "T");
      if (!isoString.includes("+") && !isoString.includes("Z")) {
        isoString += "Z";
      }
    }
    const date = new Date(isoString);
    if (isNaN(date.getTime())) {
      console.warn("Invalid date after parsing:", dateString, "->", isoString);
      return "Invalid Date";
    }
    return date.toLocaleDateString("en-US", {
      year: "numeric",
      month: "short",
      day: "numeric"
    });
  } catch (error2) {
    console.warn("Error formatting date:", dateString, error2);
    return "Invalid Date";
  }
}
function getActivityStatus(member) {
  if (!member.last_submission_date) return "inactive";
  const ninetyDaysAgo = /* @__PURE__ */ new Date();
  ninetyDaysAgo.setDate(ninetyDaysAgo.getDate() - 90);
  const lastActivity = new Date(member.last_submission_date);
  return lastActivity >= ninetyDaysAgo ? "active" : "inactive";
}
const Page = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let isOfficer;
  let hasManagePermissions;
  let $userProfile, $$unsubscribe_userProfile;
  let $canManageOfficers, $$unsubscribe_canManageOfficers;
  let $isLoading, $$unsubscribe_isLoading;
  let $members, $$unsubscribe_members;
  let $error, $$unsubscribe_error;
  let $memberStats, $$unsubscribe_memberStats;
  let $searchTerm, $$unsubscribe_searchTerm;
  let $$unsubscribe_roleFilter;
  let $$unsubscribe_activityFilter;
  let $filteredMembers, $$unsubscribe_filteredMembers;
  $$unsubscribe_userProfile = subscribe(userProfile, (value) => $userProfile = value);
  $$unsubscribe_canManageOfficers = subscribe(canManageOfficers, (value) => $canManageOfficers = value);
  $$unsubscribe_isLoading = subscribe(isLoading, (value) => $isLoading = value);
  $$unsubscribe_members = subscribe(members, (value) => $members = value);
  $$unsubscribe_error = subscribe(error, (value) => $error = value);
  $$unsubscribe_memberStats = subscribe(memberStats, (value) => $memberStats = value);
  $$unsubscribe_searchTerm = subscribe(searchTerm, (value) => $searchTerm = value);
  $$unsubscribe_roleFilter = subscribe(roleFilter, (value) => value);
  $$unsubscribe_activityFilter = subscribe(activityFilter, (value) => value);
  $$unsubscribe_filteredMembers = subscribe(filteredMembers, (value) => $filteredMembers = value);
  const roleOptions = [
    {
      value: "member",
      label: "Member",
      description: "Standard member privileges"
    },
    {
      value: "officer",
      label: "Officer",
      description: "Can approve submissions and access officer tools"
    },
    {
      value: "competition_director",
      label: "Competition Director",
      description: "Can manage competition entries and see brewer names"
    },
    {
      value: "vice_president",
      label: "Vice President",
      description: "Can manage officers and access all tools"
    },
    {
      value: "president",
      label: "President",
      description: "Full administrative access"
    }
  ];
  onDestroy(() => {
  });
  $$result.css.add(css);
  isOfficer = $userProfile?.is_officer || false;
  hasManagePermissions = $canManageOfficers;
  roleOptions.filter((option) => {
    if ($userProfile?.role === "president") {
      return true;
    } else if ($userProfile?.role === "vice_president") {
      return option.value !== "president";
    }
    return false;
  });
  $$unsubscribe_userProfile();
  $$unsubscribe_canManageOfficers();
  $$unsubscribe_isLoading();
  $$unsubscribe_members();
  $$unsubscribe_error();
  $$unsubscribe_memberStats();
  $$unsubscribe_searchTerm();
  $$unsubscribe_roleFilter();
  $$unsubscribe_activityFilter();
  $$unsubscribe_filteredMembers();
  return `  ${validate_component(Container, "Container").$$render($$result, { size: "xl" }, {}, {
    default: () => {
      return `${!isOfficer ? `${validate_component(EmptyState, "EmptyState").$$render(
        $$result,
        {
          icon: "🔒",
          title: "Access Denied",
          message: "You need officer privileges to access this page."
        },
        {},
        {}
      )}` : `${validate_component(Hero, "Hero").$$render(
        $$result,
        {
          title: "Manage Members",
          subtitle: "View and manage club members, their roles, activity, and point standings",
          icon: "👥",
          center: true
        },
        {},
        {}
      )} ${$isLoading && $members.length === 0 ? `${validate_component(LoadingSpinner, "LoadingSpinner").$$render($$result, { message: "Loading members..." }, {}, {})}` : `${$error ? `${validate_component(EmptyState, "EmptyState").$$render(
        $$result,
        {
          icon: "❌",
          title: "Error loading members",
          message: $error
        },
        {},
        {
          default: () => {
            return `${validate_component(Button, "Button").$$render($$result, { variant: "secondary" }, {}, {
              default: () => {
                return `🔄 Try Again`;
              }
            })}`;
          }
        }
      )}` : ` <div class="stats-grid svelte-jfip4b"><div class="stat-card orange svelte-jfip4b"><div class="stat-value svelte-jfip4b">${escape($memberStats.totalMembers)}</div> <div class="stat-label svelte-jfip4b" data-svelte-h="svelte-1hibunz">Total Members</div></div> <div class="stat-card blue svelte-jfip4b"><div class="stat-value svelte-jfip4b">${escape($memberStats.totalOfficers)}</div> <div class="stat-label svelte-jfip4b" data-svelte-h="svelte-f5o8l1">Officers</div></div> <div class="stat-card green svelte-jfip4b"><div class="stat-value svelte-jfip4b">${escape($memberStats.activeMembers)}</div> <div class="stat-label svelte-jfip4b" data-svelte-h="svelte-tr0ren">Active (90 days)</div></div> <div class="stat-card red svelte-jfip4b"><div class="stat-value svelte-jfip4b">${escape($memberStats.avgPointsPerMember)}</div> <div class="stat-label svelte-jfip4b" data-svelte-h="svelte-17bwv35">Avg Points</div></div></div>  <div class="controls-section svelte-jfip4b"><div class="controls-container svelte-jfip4b"><div class="filters-group svelte-jfip4b"><div class="search-box svelte-jfip4b"><input type="text" placeholder="Search members..." class="svelte-jfip4b"${add_attribute("value", $searchTerm, 0)}> <span class="search-icon svelte-jfip4b" data-svelte-h="svelte-k77c2d">🔍</span></div> <div class="filters-row svelte-jfip4b"><select class="filter-select svelte-jfip4b"><option value="all" data-svelte-h="svelte-1yhiy9v">All Roles</option><option value="president" data-svelte-h="svelte-xw71ah">Presidents</option><option value="vice_president" data-svelte-h="svelte-1d6zxy4">Vice Presidents</option><option value="competition_director" data-svelte-h="svelte-1396dfq">Competition Directors</option><option value="officer" data-svelte-h="svelte-1ilnw31">Officers</option><option value="member" data-svelte-h="svelte-1ytkx31">Members</option></select> <select class="filter-select svelte-jfip4b"><option value="all" data-svelte-h="svelte-1owtbcz">All Activity</option><option value="active" data-svelte-h="svelte-2zb8tj">Active (90 days)</option><option value="inactive" data-svelte-h="svelte-1qfbg34">Inactive (90+ days)</option></select></div></div> <div class="action-buttons svelte-jfip4b"><button class="reset-button svelte-jfip4b" data-svelte-h="svelte-1jwpt44">🔄 Reset</button> <button class="export-button svelte-jfip4b" data-svelte-h="svelte-1gs4miv">📊 Export</button></div></div></div> ${$filteredMembers.length === 0 && $members.length > 0 ? `${validate_component(EmptyState, "EmptyState").$$render(
        $$result,
        {
          icon: "🔍",
          title: "No members found",
          message: "Try adjusting your search or filter criteria"
        },
        {},
        {
          default: () => {
            return `${validate_component(Button, "Button").$$render($$result, { variant: "secondary" }, {}, {
              default: () => {
                return `Clear Filters`;
              }
            })}`;
          }
        }
      )}` : `${$members.length === 0 ? `${validate_component(EmptyState, "EmptyState").$$render(
        $$result,
        {
          icon: "👥",
          title: "No members yet",
          message: "Members will appear here once they join the club"
        },
        {},
        {}
      )}` : ` <div class="members-container svelte-jfip4b"> <div class="desktop-table svelte-jfip4b"><table class="members-table svelte-jfip4b"><thead data-svelte-h="svelte-lp0521"><tr class="svelte-jfip4b"><th class="svelte-jfip4b">Member</th> <th class="svelte-jfip4b">Role</th> <th class="svelte-jfip4b">Points</th> <th class="svelte-jfip4b">Activity</th> <th class="svelte-jfip4b">Joined</th> <th class="svelte-jfip4b">Actions</th></tr></thead> <tbody>${each($filteredMembers, (member) => {
        return `<tr class="svelte-jfip4b"><td class="svelte-jfip4b"><div class="member-info svelte-jfip4b"><div class="member-avatar svelte-jfip4b">${escape(member.name?.charAt(0) || "?")}</div> <div class="member-details svelte-jfip4b"><div class="member-name svelte-jfip4b">${escape(member.name)}</div> <div class="member-email svelte-jfip4b">${escape(member.email)}</div></div> </div></td> <td class="svelte-jfip4b"><span class="${"role-badge " + escape(member.role, true) + " svelte-jfip4b"}">${escape(formatRoleDisplay(member.role))} </span></td> <td class="svelte-jfip4b"><div class="points-info svelte-jfip4b"><div class="total-points svelte-jfip4b">${escape(member.total_points)} total</div> <div class="monthly-points svelte-jfip4b">${escape(member.monthly_points)} this month</div> </div></td> <td class="svelte-jfip4b"><div class="activity-info svelte-jfip4b"><span class="${"activity-badge " + escape(getActivityStatus(member), true) + " svelte-jfip4b"}">${escape(getActivityStatus(member) === "active" ? "✅ Active" : "💤 Inactive")}</span> <div class="last-activity svelte-jfip4b">Last: ${escape(formatDate(member.last_submission_date))}</div> </div></td> <td class="join-date svelte-jfip4b">${escape(formatDate(member.join_date))}</td> <td class="svelte-jfip4b"><div class="action-buttons-cell svelte-jfip4b"><button class="view-button svelte-jfip4b" data-svelte-h="svelte-1sz26si">👁️ View</button> ${hasManagePermissions && member.id !== $userProfile?.id ? `<button class="edit-button svelte-jfip4b" data-svelte-h="svelte-xmamfm">✏️ Edit</button> <button class="manage-button svelte-jfip4b" data-svelte-h="svelte-1c3vnl5">⚡ Manage Role
                          </button>` : ``} </div></td> </tr>`;
      })}</tbody></table></div>  <div class="mobile-cards svelte-jfip4b">${each($filteredMembers, (member) => {
        return `<div class="member-card svelte-jfip4b"><div class="card-header svelte-jfip4b"><div class="member-info svelte-jfip4b"><div class="member-avatar svelte-jfip4b">${escape(member.name?.charAt(0) || "?")}</div> <div class="member-details svelte-jfip4b"><div class="member-name svelte-jfip4b">${escape(member.name)}</div> <div class="member-email svelte-jfip4b">${escape(member.email)}</div> </div></div> <span class="${"role-badge " + escape(member.role, true) + " svelte-jfip4b"}">${escape(formatRoleDisplay(member.role))} </span></div> <div class="card-stats svelte-jfip4b"><div class="stat-item svelte-jfip4b"><span class="stat-label svelte-jfip4b" data-svelte-h="svelte-1a7g9it">Total Points</span> <span class="stat-value svelte-jfip4b">${escape(member.total_points)}</span></div> <div class="stat-item svelte-jfip4b"><span class="stat-label svelte-jfip4b" data-svelte-h="svelte-1sei53m">Monthly Points</span> <span class="stat-value svelte-jfip4b">${escape(member.monthly_points)}</span></div> <div class="stat-item svelte-jfip4b"><span class="stat-label svelte-jfip4b" data-svelte-h="svelte-1uiknbp">Activity</span> <span class="${"activity-badge " + escape(getActivityStatus(member), true) + " svelte-jfip4b"}">${escape(getActivityStatus(member) === "active" ? "✅ Active" : "💤 Inactive")} </span></div> <div class="stat-item svelte-jfip4b"><span class="stat-label svelte-jfip4b" data-svelte-h="svelte-5capsd">Joined</span> <span class="stat-value svelte-jfip4b">${escape(formatDate(member.join_date))}</span> </div></div> <div class="card-actions svelte-jfip4b"><button class="view-button-mobile svelte-jfip4b" data-svelte-h="svelte-ytkdkd">👁️ View Details</button> ${hasManagePermissions && member.id !== $userProfile?.id ? `<button class="edit-button-mobile svelte-jfip4b" data-svelte-h="svelte-16diln">✏️ Edit</button> <button class="manage-button-mobile svelte-jfip4b" data-svelte-h="svelte-13uun4">⚡ Manage Role
                    </button>` : ``}</div> </div>`;
      })}</div></div>`}`}`}`}`}`;
    }
  })}  ${``}  ${``}  ${``}`;
});

export { Page as default };
//# sourceMappingURL=_page.svelte-B5jV4RXe.js.map
